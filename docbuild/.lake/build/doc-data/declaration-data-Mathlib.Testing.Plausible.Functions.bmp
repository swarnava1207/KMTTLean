{"name":"Mathlib.Testing.Plausible.Functions","instances":[{"typeNames":["Finsupp"],"name":"Plausible.TotalFunction.Finsupp.sampleableExt","className":"Plausible.SampleableExt"},{"typeNames":["DFinsupp"],"name":"Plausible.TotalFunction.DFinsupp.sampleableExt","className":"Plausible.SampleableExt"},{"typeNames":["Plausible.InjectiveFunction"],"name":"Plausible.instInhabitedInjectiveFunction","className":"Inhabited"},{"typeNames":["Plausible.InjectiveFunction"],"name":"Plausible.InjectiveFunction.instRepr","className":"Repr"},{"typeNames":["Subtype"],"name":"Plausible.InjectiveFunction.PiInjective.sampleableExt","className":"Plausible.SampleableExt"},{"typeNames":["Function.Injective"],"name":"Plausible.Injective.testable","className":"Plausible.Testable"},{"typeNames":["Monotone"],"name":"Plausible.Monotone.testable","className":"Plausible.Testable"},{"typeNames":["Antitone"],"name":"Plausible.Antitone.testable","className":"Plausible.Testable"}],"imports":["Init","Mathlib.Data.Finsupp.ToDFinsupp","Mathlib.Algebra.Order.Group.Nat","Mathlib.Data.Int.Range","Mathlib.Data.List.Sigma","Plausible.Functions"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L390-L394","name":"Plausible.Antitone.testable","line":390,"kind":"instance","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.Antitone.testable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.Antitone.testable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Antitone</span>.<span class=\"name\">testable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;x&quot;</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;y&quot;</span> <span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;H&quot;</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Monotone/Defs.html#Antitone\">Antitone</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L384-L388","name":"Plausible.Monotone.testable","line":384,"kind":"instance","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.Monotone.testable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.Monotone.testable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Monotone</span>.<span class=\"name\">testable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;x&quot;</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;y&quot;</span> <span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;H&quot;</span> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span>)</span></span>)</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L378-L382","name":"Plausible.Injective.testable","line":378,"kind":"instance","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.Injective.testable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.Injective.testable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Injective</span>.<span class=\"name\">testable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;x&quot;</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;y&quot;</span> <span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">&quot;H&quot;</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span>)</span></span>)</span></span>)</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L360-L372","name":"Plausible.InjectiveFunction.PiInjective.sampleableExt","line":360,"kind":"instance","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.PiInjective.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.PiInjective.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">PiInjective</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L341-L358","name":"Plausible.InjectiveFunction.injective","line":341,"kind":"theorem","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.injective\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.apply\">apply</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L331-L339","name":"Plausible.InjectiveFunction.mk","line":331,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.mk","doc":"Create an injective function from one list and a permutation of that list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L315-L329","name":"Plausible.InjectiveFunction.shrink","line":315,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.shrink","doc":"Shrink an injective function slicing a segment in the middle of the domain and removing\nthe corresponding elements in the codomain, hence maintaining the property that\none is a permutation of the other.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.shrink\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">shrink</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L300-L312","name":"Plausible.InjectiveFunction.shrinkPerm","line":300,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.shrinkPerm","doc":"Shrink a permutation of a list, slicing a segment in the middle.\n\nThe sizes of the slice being removed start at `n` (with `n` the length\nof the list) and then `n / 2`, then `n / 4`, etc down to 1. The slices\nwill be taken at index `0`, `n / k`, `2n / k`, `3n / k`, etc.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.shrinkPerm\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">shrinkPerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span></span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L290-L298","name":"Plausible.InjectiveFunction.sliceSizes","line":290,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.sliceSizes","doc":"A list, in decreasing order, of sizes that should be\nsliced off a list of length `n`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.sliceSizes\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">sliceSizes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Batteries/Data/MLList/Basic.html#MLList\">MLList</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L280-L288","name":"Plausible.InjectiveFunction.Perm.slice","line":280,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.Perm.slice","doc":"Remove a slice of length `m` at index `n` in a list and a permutation, maintaining the property\nthat it is a permutation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.Perm.slice\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">Perm</span>.<span class=\"name\">slice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span></span></span> → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L250-L274","name":"Plausible.InjectiveFunction.applyId_injective","line":250,"kind":"theorem","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.applyId_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.applyId_injective\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">applyId_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId\">List.applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.zip\">zip</a></span> <span class=\"fn\">ys</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L239-L248","name":"Plausible.InjectiveFunction.List.applyId_eq_self","line":239,"kind":"theorem","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId_eq_self\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">applyId_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">xs</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId\">applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.zip\">zip</a></span> <span class=\"fn\">ys</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L206-L237","name":"Plausible.InjectiveFunction.applyId_mem_iff","line":206,"kind":"theorem","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.applyId_mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.applyId_mem_iff\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">applyId_mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">ys</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId\">List.applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.zip\">zip</a></span> <span class=\"fn\">ys</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ys</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L185-L204","name":"Plausible.InjectiveFunction.List.applyId_zip_eq","line":185,"kind":"theorem","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId_zip_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId_zip_eq\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">applyId_zip_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">xs</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId\">applyId</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.zip\">zip</a></span> <span class=\"fn\">ys</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">ys</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L174-L178","name":"Plausible.InjectiveFunction.List.applyId_cons","line":174,"kind":"theorem","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId_cons\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">applyId_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId\">applyId</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">y</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">z</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId\">applyId</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L169-L172","name":"Plausible.InjectiveFunction.List.applyId","line":169,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId","doc":"Interpret a list of pairs as a total function, defaulting to\nthe identity function when no entries are found for a given function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.List.applyId\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">applyId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L166-L167","name":"Plausible.InjectiveFunction.instRepr","line":166,"kind":"instance","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.instRepr\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L158-L164","name":"Plausible.InjectiveFunction.repr","line":158,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.repr","doc":"Produce a string for a given `InjectiveFunction`.\nThe output is of the form `[x₀ ↦ f x₀, .. xₙ ↦ f xₙ, x ↦ x]`.\nUnlike for `TotalFunction`, the default value is not a constant\nbut the identity function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.repr\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L154-L156","name":"Plausible.InjectiveFunction.apply","line":154,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.apply","doc":"Apply a total function to an argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.apply\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L149-L150","name":"Plausible.instInhabitedInjectiveFunction","line":149,"kind":"instance","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.instInhabitedInjectiveFunction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.instInhabitedInjectiveFunction\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedInjectiveFunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L146-L147","name":"Plausible.InjectiveFunction.mapToSelf","line":146,"kind":"ctor","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.mapToSelf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction.mapToSelf\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span>.<span class=\"name\">mapToSelf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.snd\">Sigma.snd</a> <span class=\"fn\">xs</span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.snd\">Sigma.snd</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\">InjectiveFunction</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L135-L147","name":"Plausible.InjectiveFunction","line":135,"kind":"inductive","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction","doc":"Data structure specifying a total function using a list of pairs\nand a default value returned when the input is not in the domain of\nthe partial function.\n\n`mapToSelf f` encodes `x ↦ f x` when `x ∈ f` and `x ↦ x`,\ni.e. `x` to itself, otherwise.\n\nWe use `Σ` to encode mappings instead of `×` because we\nrely on the association list API defined in `Mathlib/Data/List/Sigma.lean`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.InjectiveFunction\"><span class=\"name\">Plausible</span>.<span class=\"name\">InjectiveFunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L123-L128","name":"Plausible.TotalFunction.DFinsupp.sampleableExt","line":123,"kind":"instance","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.DFinsupp.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.DFinsupp.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">DFinsupp</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L115-L120","name":"Plausible.TotalFunction.Finsupp.sampleableExt","line":115,"kind":"instance","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.Finsupp.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.Finsupp.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">Finsupp</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L88-L111","name":"Plausible.TotalFunction.applyFinsupp","line":88,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.applyFinsupp","doc":"Create a finitely supported function from a total function by taking the default value to\nzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.applyFinsupp\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">applyFinsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tf</span> : <span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L82-L86","name":"Plausible.TotalFunction.zeroDefaultSupp","line":82,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.zeroDefaultSupp","doc":"The support of a zero default `TotalFunction`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.zeroDefaultSupp\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">zeroDefaultSupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Testing/Plausible/Functions.lean#L77-L80","name":"Plausible.TotalFunction.zeroDefault","line":77,"kind":"def","docLink":"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.zeroDefault","doc":"Map a total_function to one whose default value is zero so that it represents a finsupp. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/Plausible/Functions.html#Plausible.TotalFunction.zeroDefault\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">zeroDefault</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></div></div>"}]}