{"name":"Mathlib.Topology.Category.Born","instances":[{"typeNames":["Born","_builtin_typeu"],"name":"Born.instCoeSortType","className":"CoeSort"},{"typeNames":["Born"],"name":"Born.instInhabited","className":"Inhabited"},{"typeNames":["Born"],"name":"Born.instLargeCategory","className":"CategoryTheory.Category"},{"typeNames":["Born"],"name":"Born.instConcreteCategoryLocallyBoundedMapCarrier","className":"CategoryTheory.ConcreteCategory"}],"imports":["Init","Mathlib.CategoryTheory.ConcreteCategory.Basic","Mathlib.Topology.Bornology.Hom"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L45-L47","name":"Born.instConcreteCategoryLocallyBoundedMapCarrier","line":45,"kind":"instance","docLink":"./Mathlib/Topology/Category/Born.html#Born.instConcreteCategoryLocallyBoundedMapCarrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born.instConcreteCategoryLocallyBoundedMapCarrier\"><span class=\"name\">Born</span>.<span class=\"name\">instConcreteCategoryLocallyBoundedMapCarrier</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Hom.html#LocallyBoundedMap\">LocallyBoundedMap</a> <span class=\"fn\"><span class=\"fn\">x1</span>.<a href=\"./Mathlib/Topology/Category/Born.html#Born.carrier\">carrier</a></span> <span class=\"fn\"><span class=\"fn\">x2</span>.<a href=\"./Mathlib/Topology/Category/Born.html#Born.carrier\">carrier</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L40-L43","name":"Born.instLargeCategory","line":40,"kind":"instance","docLink":"./Mathlib/Topology/Category/Born.html#Born.instLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born.instLargeCategory\"><span class=\"name\">Born</span>.<span class=\"name\">instLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">CategoryTheory.LargeCategory</a> <a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L37-L38","name":"Born.instInhabited","line":37,"kind":"instance","docLink":"./Mathlib/Topology/Category/Born.html#Born.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born.instInhabited\"><span class=\"name\">Born</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L33-L35","name":"Born.of","line":33,"kind":"def","docLink":"./Mathlib/Topology/Category/Born.html#Born.of","doc":"Construct a bundled `Born` from a `Bornology`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born.of\"><span class=\"name\">Born</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Basic.html#Bornology\">Bornology</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L30-L31","name":"Born.instCoeSortType","line":30,"kind":"instance","docLink":"./Mathlib/Topology/Category/Born.html#Born.instCoeSortType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born.instCoeSortType\"><span class=\"name\">Born</span>.<span class=\"name\">instCoeSortType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L24-L24","name":"Born.str","line":24,"kind":"def","docLink":"./Mathlib/Topology/Category/Born.html#Born.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born.str\"><span class=\"name\">Born</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Basic.html#Bornology\">Bornology</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Topology/Category/Born.html#Born.carrier\">carrier</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L23-L23","name":"Born.carrier","line":23,"kind":"def","docLink":"./Mathlib/Topology/Category/Born.html#Born.carrier","doc":"The underlying bornology. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born.carrier\"><span class=\"name\">Born</span>.<span class=\"name\">carrier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L21-L21","name":"Born.mk","line":21,"kind":"ctor","docLink":"./Mathlib/Topology/Category/Born.html#Born.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born.mk\"><span class=\"name\">Born</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">str</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Bornology/Basic.html#Bornology\">Bornology</a> <span class=\"fn\">carrier</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Born.html#Born\">Born</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Born.lean#L20-L24","name":"Born","line":20,"kind":"structure","docLink":"./Mathlib/Topology/Category/Born.html#Born","doc":"The category of bornologies. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Born.html#Born\"><span class=\"name\">Born</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}