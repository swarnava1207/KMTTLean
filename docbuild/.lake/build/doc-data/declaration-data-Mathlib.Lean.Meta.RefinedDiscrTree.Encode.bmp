{"name":"Mathlib.Lean.Meta.RefinedDiscrTree.Encode","instances":[{"typeNames":["Lean.Meta.RefinedDiscrTree.DTExpr"],"name":"Lean.Meta.RefinedDiscrTree.instInhabitedDTExpr","className":"Inhabited"},{"typeNames":["Lean.Meta.RefinedDiscrTree.DTExpr"],"name":"Lean.Meta.RefinedDiscrTree.instBEqDTExpr","className":"BEq"},{"typeNames":["Lean.Meta.RefinedDiscrTree.DTExpr"],"name":"Lean.Meta.RefinedDiscrTree.instReprDTExpr","className":"Repr"},{"typeNames":["Lean.Meta.RefinedDiscrTree.DTExpr"],"name":"Lean.Meta.RefinedDiscrTree.instToFormatDTExpr","className":"Std.ToFormat"},{"typeNames":["Lean.Expr","Lean.Meta.RefinedDiscrTree.DTExpr","_private.Mathlib.Lean.Meta.RefinedDiscrTree.Encode.0.Lean.Meta.RefinedDiscrTree.MkDTExpr.M"],"name":"Lean.Meta.RefinedDiscrTree.MkDTExpr.instMonadCacheExprDTExprM","className":"Lean.MonadCache"}],"imports":["Init","Mathlib.Lean.Meta.RefinedDiscrTree.Basic","Mathlib.Lean.Meta.RefinedDiscrTree.Pi","Mathlib.Tactic.FunProp.StateList"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L500-L506","name":"Lean.Meta.RefinedDiscrTree.mkDTExprs","line":500,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.mkDTExprs","doc":"Similar to `mkDTExpr`.\nReturn all encodings of `e` as a `DTExpr`, taking potential further η-reductions into account. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.mkDTExprs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">mkDTExprs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">onlySpecific</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarInContext</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L489-L498","name":"Lean.Meta.RefinedDiscrTree.mkDTExpr","line":489,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.mkDTExpr","doc":"Return the encoding of `e` as a `DTExpr`.\n\nWarning: to account for potential η-reductions of `e`, use `mkDTExprs` instead.\n\nThe argument `fvarInContext` allows you to specify which free variables in `e` will still be\nin the context when the `RefinedDiscrTree` is being used for lookup.\nIt should return true only if the `RefinedDiscrTree` is built and used locally. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.mkDTExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">mkDTExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarInContext</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L483-L487","name":"Lean.Meta.RefinedDiscrTree.DTExpr.isSpecific","line":483,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.isSpecific","doc":"Returns true if the `DTExpr` is not of the form `*` or `Eq * * *`\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.isSpecific\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">isSpecific</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L399-L479","name":"Lean.Meta.RefinedDiscrTree.MkDTExpr.mkDTExprsAux","line":399,"kind":"opaque","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.mkDTExprsAux","doc":"Return all encodings of `e` as a `DTExpr`, taking possible η-reductions into account.\nIf `root = false`, then `e` is a strict sub expression of the original expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.mkDTExprsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">mkDTExprsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">original</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Encode.0.Lean.Meta.RefinedDiscrTree.MkDTExpr.M\">Lean.Meta.RefinedDiscrTree.MkDTExpr.M✝</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L385-L396","name":"Lean.Meta.RefinedDiscrTree.MkDTExpr.cacheEtaPossibilities","line":385,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.cacheEtaPossibilities","doc":"run `etaPossibilities`, and cache the result if there are multiple possibilities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.cacheEtaPossibilities\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">cacheEtaPossibilities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">original</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lambdas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Encode.0.Lean.Meta.RefinedDiscrTree.MkDTExpr.M\">Lean.Meta.RefinedDiscrTree.MkDTExpr.M✝</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Encode.0.Lean.Meta.RefinedDiscrTree.MkDTExpr.M\">Lean.Meta.RefinedDiscrTree.MkDTExpr.M✝</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L371-L383","name":"Lean.Meta.RefinedDiscrTree.MkDTExpr.etaPossibilities","line":371,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.etaPossibilities","doc":"Return all pairs of body, bound variables that could possibly appear due to η-reduction "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.etaPossibilities\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">etaPossibilities</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lambdas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Encode.0.Lean.Meta.RefinedDiscrTree.MkDTExpr.M\">Lean.Meta.RefinedDiscrTree.MkDTExpr.M✝</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Encode.0.Lean.Meta.RefinedDiscrTree.MkDTExpr.M\">Lean.Meta.RefinedDiscrTree.MkDTExpr.M✝</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L361-L369","name":"Lean.Meta.RefinedDiscrTree.MkDTExpr.instMonadCacheExprDTExprM","line":361,"kind":"instance","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.instMonadCacheExprDTExprM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.instMonadCacheExprDTExprM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">instMonadCacheExprDTExprM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCache\">MonadCache</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Encode.0.Lean.Meta.RefinedDiscrTree.MkDTExpr.M\">Lean.Meta.RefinedDiscrTree.MkDTExpr.M✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L278-L352","name":"Lean.Meta.RefinedDiscrTree.MkDTExpr.mkDTExprAux","line":278,"kind":"opaque","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.mkDTExprAux","doc":"Return the encoding of `e` as a `DTExpr`.\nIf `root = false`, then `e` is a strict sub expression of the original expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.mkDTExprAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">mkDTExprAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Encode.0.Lean.Meta.RefinedDiscrTree.MkDTExpr.Context\">Lean.Meta.RefinedDiscrTree.MkDTExpr.Context✝</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L258-L265","name":"Lean.Meta.RefinedDiscrTree.MkDTExpr.getIgnores.isIgnoredArg","line":258,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.getIgnores.isIgnoredArg","doc":"Return whether the argument should be ignored. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.getIgnores.isIgnoredArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">getIgnores</span>.<span class=\"name\">isIgnoredArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg </span><span class=\"fn\">domain</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderInfo</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L243-L265","name":"Lean.Meta.RefinedDiscrTree.MkDTExpr.getIgnores","line":243,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.getIgnores","doc":"Return for each argument whether it should be ignored. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.MkDTExpr.getIgnores\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MkDTExpr</span>.<span class=\"name\">getIgnores</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L228-L230","name":"Lean.Meta.RefinedDiscrTree.DTExpr.hasLooseBVars","line":228,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.hasLooseBVars","doc":"Return `true` if `e` contains a loose bound variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.hasLooseBVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">hasLooseBVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L214-L217","name":"Lean.Meta.RefinedDiscrTree.isStarWithArg","line":214,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.isStarWithArg","doc":"Check whether the expression is represented by `Key.star` and has `arg` as an argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.isStarWithArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">isStarWithArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L208-L212","name":"Lean.Meta.RefinedDiscrTree.isStar","line":208,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.isStar","doc":"Check whether the expression is represented by `Key.star`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.isStar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">isStar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L195-L204","name":"Lean.Meta.RefinedDiscrTree.lambdaTelescopeReduce","line":195,"kind":"opaque","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.lambdaTelescopeReduce","doc":"Repeatedly apply reduce while stripping lambda binders and introducing their variables "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.lambdaTelescopeReduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">lambdaTelescopeReduce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L186-L193","name":"Lean.Meta.RefinedDiscrTree.reduce","line":186,"kind":"opaque","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.reduce","doc":"Reduction procedure for the `RefinedDiscrTree` indexing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.reduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">reduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L136-L139","name":"Lean.Meta.RefinedDiscrTree.DTExpr.flatten","line":136,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.flatten","doc":"Given a `DTExpr`, return the linearized encoding in terms of `Key`,\nwhich is used for `RefinedDiscrTree` indexing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.flatten\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">flatten</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initCapacity</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> := <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L100-L107","name":"Lean.Meta.RefinedDiscrTree.DTExpr.eqv.goArray","line":100,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.eqv.goArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.eqv.goArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">eqv</span>.<span class=\"name\">goArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as </span><span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L81-L97","name":"Lean.Meta.RefinedDiscrTree.DTExpr.eqv.go","line":81,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.eqv.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.eqv.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">eqv</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L76-L107","name":"Lean.Meta.RefinedDiscrTree.DTExpr.eqv","line":76,"kind":"def","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.eqv","doc":"Determine if two `DTExpr`s are equivalent. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.eqv\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">eqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L64-L74","name":"Lean.Meta.RefinedDiscrTree.DTExpr.size","line":64,"kind":"opaque","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.size","doc":"Return the size of the `DTExpr`. This is used for calculating the matching score when two\nexpressions are equal.\nThe score is not incremented at a lambda, which is so that the expressions\n`∀ x, p[x]` and `∃ x, p[x]` get the same size. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L62-L62","name":"Lean.Meta.RefinedDiscrTree.instToFormatDTExpr","line":62,"kind":"instance","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.instToFormatDTExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.instToFormatDTExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instToFormatDTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L42-L42","name":"Lean.Meta.RefinedDiscrTree.instReprDTExpr","line":42,"kind":"instance","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.instReprDTExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.instReprDTExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instReprDTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L42-L42","name":"Lean.Meta.RefinedDiscrTree.instBEqDTExpr","line":42,"kind":"instance","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.instBEqDTExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.instBEqDTExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instBEqDTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L42-L42","name":"Lean.Meta.RefinedDiscrTree.instInhabitedDTExpr","line":42,"kind":"instance","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.instInhabitedDTExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.instInhabitedDTExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedDTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L40-L41","name":"Lean.Meta.RefinedDiscrTree.DTExpr.proj","line":40,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.proj","doc":"A projection. It stores the structure name, projection index, struct body and arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L38-L39","name":"Lean.Meta.RefinedDiscrTree.DTExpr.forall","line":38,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.forall","doc":"A dependent arrow. It stores the domain and body. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.forall\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">forall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L36-L37","name":"Lean.Meta.RefinedDiscrTree.DTExpr.lam","line":36,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.lam","doc":"A lambda function. It stores the body. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.lam\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">lam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L34-L35","name":"Lean.Meta.RefinedDiscrTree.DTExpr.sort","line":34,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.sort","doc":"A sort. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">sort</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L32-L33","name":"Lean.Meta.RefinedDiscrTree.DTExpr.lit","line":32,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.lit","doc":"A literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Literal</a> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L30-L31","name":"Lean.Meta.RefinedDiscrTree.DTExpr.bvar","line":30,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.bvar","doc":"A bound variable. It stores the De Bruijn index and the arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.bvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">bvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L28-L29","name":"Lean.Meta.RefinedDiscrTree.DTExpr.fvar","line":28,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.fvar","doc":"A free variable. It stores the `FVarId` and the arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L26-L27","name":"Lean.Meta.RefinedDiscrTree.DTExpr.const","line":26,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.const","doc":"A constant. It stores the name and the arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L24-L25","name":"Lean.Meta.RefinedDiscrTree.DTExpr.opaque","line":24,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.opaque","doc":"An opaque variable or a let-expression in the case `WhnfCoreConfig.zeta := false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.opaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">opaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L22-L23","name":"Lean.Meta.RefinedDiscrTree.DTExpr.star","line":22,"kind":"ctor","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.star","doc":"A metavariable. It optionally stores an `MVarId`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr.star\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span> → <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\">DTExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L19-L42","name":"Lean.Meta.RefinedDiscrTree.DTExpr","line":19,"kind":"inductive","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr","doc":"`DTExpr` is a simplified form of `Expr`.\nIt is the intermediate step for converting from `Expr` to `Array Key`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.DTExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">DTExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}