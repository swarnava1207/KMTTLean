{"name":"Mathlib.Lean.Meta.DiscrTree","instances":[],"imports":["Init","Mathlib.Init","Lean.Meta.DiscrTree"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/DiscrTree.lean#L43-L48","name":"Lean.Meta.DiscrTree.keysSpecific","line":43,"kind":"def","docLink":"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.keysSpecific","doc":"Check if a `keys : Array DiscTree.Key` is \"specific\",\ni.e. something other than `[*]` or `[=, *, *, *]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.keysSpecific\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">keysSpecific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Meta/DiscrTree.lean#L15-L41","name":"Lean.Meta.DiscrTree.getSubexpressionMatches","line":15,"kind":"opaque","docLink":"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.getSubexpressionMatches","doc":"Find keys which match the expression, or some subexpression.\n\nNote that repeated subexpressions will be visited each time they appear,\nmaking this operation potentially very expensive.\nIt would be good to solve this problem!\n\nImplementation: we reverse the results from `getMatch`,\nso that we return lemmas matching larger subexpressions first,\nand amongst those we return more specific lemmas first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/DiscrTree.html#Lean.Meta.DiscrTree.getSubexpressionMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">getSubexpressionMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">DiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"}]}