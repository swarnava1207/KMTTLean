{"name":"Mathlib.Tactic.NormNum.PowMod","instances":[],"imports":["Init","Mathlib.Tactic.NormNum.Pow"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L101-L124","name":"Mathlib.Meta.NormNum.evalNatPowMod.go","line":101,"kind":"opaque","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.evalNatPowMod.go","doc":"Invariants: `a ^ b₀ % m = c₀`, `depth > 0`, `b >>> depth = b₀` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.evalNatPowMod.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalNatPowMod</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">m </span><span class=\"fn\">b₀ </span><span class=\"fn\">c₀ </span><span class=\"fn\">b</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">«$p»</span> =Q (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">«$a»</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">«$b₀»</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">«$m»</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$c₀»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> <span class=\"fn\">«$p»</span> <span class=\"fn\">«$a»</span> <span class=\"fn\">«$b»</span> <span class=\"fn\">«$m»</span> <span class=\"fn\">«$c»</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L73-L124","name":"Mathlib.Meta.NormNum.evalNatPowMod","line":73,"kind":"def","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.evalNatPowMod","doc":"Evaluates and proves `a^b % m` for natural numbers using fast modular exponentiation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.evalNatPowMod\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalNatPowMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">m</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">«$a»</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">«$b»</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">«$m»</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$c»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L64-L71","name":"Mathlib.Meta.NormNum.IsNatPowModT.bit1","line":64,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.bit1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.bit1\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">bit1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>) <span class=\"fn\">a</span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Nat.mul\">mul</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Nat.mul\">mul</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span>)</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L62-L62","name":"Mathlib.Meta.NormNum.natPow_one_natMod","line":62,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_one_natMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_one_natMod\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">natPow_one_natMod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">1</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L57-L61","name":"Mathlib.Meta.NormNum.natPow_zero_natMod_succ_succ","line":57,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_succ_succ\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">natPow_zero_natMod_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L54-L55","name":"Mathlib.Meta.NormNum.natPow_zero_natMod_one","line":54,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_one\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">natPow_zero_natMod_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L51-L52","name":"Mathlib.Meta.NormNum.natPow_zero_natMod_zero","line":51,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.natPow_zero_natMod_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">natPow_zero_natMod_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L47-L49","name":"Mathlib.Meta.NormNum.IsNatPowModT.bit0","line":47,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.bit0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.bit0\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">bit0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>) <span class=\"fn\">a</span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Nat.mul\">mul</a></span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L43-L45","name":"Mathlib.Meta.NormNum.IsNatPowModT.trans","line":43,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.trans\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">c </span><span class=\"fn\">b' </span><span class=\"fn\">c'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>) <span class=\"fn\">a</span> <span class=\"fn\">b'</span> <span class=\"fn\">m</span> <span class=\"fn\">c'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b'</span> <span class=\"fn\">m</span> <span class=\"fn\">c'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L39-L41","name":"Mathlib.Meta.NormNum.IsNatPowModT.run","line":39,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.run\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">1</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span>) <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L37-L37","name":"Mathlib.Meta.NormNum.IsNatPowModT.run'","line":37,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.run'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L36-L36","name":"Mathlib.Meta.NormNum.IsNatPowModT.mk","line":36,"kind":"ctor","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">run'</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Nat.pow\">pow</a></span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Nat/Div/Basic.html#Nat.mod\">mod</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\">IsNatPowModT</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/PowMod.lean#L35-L37","name":"Mathlib.Meta.NormNum.IsNatPowModT","line":35,"kind":"structure","docLink":"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT","doc":"Represents and proves equalities of the form `a^b % m = c` for natural numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/PowMod.html#Mathlib.Meta.NormNum.IsNatPowModT\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">IsNatPowModT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}