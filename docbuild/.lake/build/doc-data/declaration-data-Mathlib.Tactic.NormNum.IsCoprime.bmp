{"name":"Mathlib.Tactic.NormNum.IsCoprime","instances":[],"imports":["Init","Mathlib.RingTheory.Coprime.Lemmas","Mathlib.Tactic.NormNum.GCD"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/IsCoprime.lean#L47-L59","name":"Tactic.NormNum.evalIntIsCoprime","line":47,"kind":"def","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.evalIntIsCoprime","doc":"Evaluates the `IsCoprime` predicate over `ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.evalIntIsCoprime\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalIntIsCoprime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/NormNum/Core.html#Mathlib.Meta.NormNum.NormNumExt\">Mathlib.Meta.NormNum.NormNumExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/IsCoprime.lean#L36-L45","name":"Tactic.NormNum.proveIntIsCoprime","line":36,"kind":"def","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.proveIntIsCoprime","doc":"Evaluates `IsCoprime` for the given integer number literals.\nPanics if `ex` or `ey` aren't integer number literals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.proveIntIsCoprime\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">proveIntIsCoprime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex </span><span class=\"fn\">ey</span> : <span class=\"fn\">Q(<a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Coprime/Basic.html#IsCoprime\">IsCoprime</a> <span class=\"fn\">«$ex»</span> <span class=\"fn\">«$ey»</span></span>)</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Coprime/Basic.html#IsCoprime\">IsCoprime</a> <span class=\"fn\">«$ex»</span> <span class=\"fn\">«$ey»</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/IsCoprime.lean#L32-L34","name":"Tactic.NormNum.isInt_not_isCoprime","line":32,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.isInt_not_isCoprime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.isInt_not_isCoprime\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isInt_not_isCoprime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">nx </span><span class=\"fn\">ny</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">x</span> <span class=\"fn\">nx</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">y</span> <span class=\"fn\">ny</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Coprime/Basic.html#IsCoprime\">IsCoprime</a> <span class=\"fn\">nx</span> <span class=\"fn\">ny</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Coprime/Basic.html#IsCoprime\">IsCoprime</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/IsCoprime.lean#L28-L30","name":"Tactic.NormNum.isInt_isCoprime","line":28,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.isInt_isCoprime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.isInt_isCoprime\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isInt_isCoprime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">nx </span><span class=\"fn\">ny</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">x</span> <span class=\"fn\">nx</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">y</span> <span class=\"fn\">ny</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Coprime/Basic.html#IsCoprime\">IsCoprime</a> <span class=\"fn\">nx</span> <span class=\"fn\">ny</span></span> → <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Coprime/Basic.html#IsCoprime\">IsCoprime</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/IsCoprime.lean#L23-L26","name":"Tactic.NormNum.int_not_isCoprime_helper","line":23,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.int_not_isCoprime_helper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/IsCoprime.html#Tactic.NormNum.int_not_isCoprime_helper\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">int_not_isCoprime_helper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Init/Prelude.html#Nat.beq\">beq</a></span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Coprime/Basic.html#IsCoprime\">IsCoprime</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"}]}