{"name":"Mathlib.Tactic.DeriveCountable","instances":[],"imports":["Init","Lean.Meta.Transform","Lean.Meta.Inductive","Lean.Elab.Deriving.Basic","Lean.Elab.Deriving.Util","Batteries.Data.NameSet","Mathlib.Data.Countable.Defs","Mathlib.Data.Nat.Pairing"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveCountable.lean#L251-L271","name":"Mathlib.Deriving.Countable.mkCountableInstance","line":251,"kind":"def","docLink":"./Mathlib/Tactic/DeriveCountable.html#Mathlib.Deriving.Countable.mkCountableInstance","doc":"The deriving handler for the `Countable` class.\nHandles non-nested non-reflexive inductive types.\nThey can be mutual too â€” in that case, there is an optimization to re-use all the generated\nfunctions and proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveCountable.html#Mathlib.Deriving.Countable.mkCountableInstance\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Countable</span>.<span class=\"name\">mkCountableInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveCountable.lean#L195-L212","name":"Mathlib.Deriving.Countable.mkInjThms","line":195,"kind":"def","docLink":"./Mathlib/Tactic/DeriveCountable.html#Mathlib.Deriving.Countable.mkInjThms","doc":"Constructs a proof that the functions created by `mkToNatFuns` are injective. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveCountable.html#Mathlib.Deriving.Countable.mkInjThms\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Countable</span>.<span class=\"name\">mkInjThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Deriving/Util.html#Lean.Elab.Deriving.Context\">Lean.Elab.Deriving.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toNatFnNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`command</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveCountable.lean#L134-L147","name":"Mathlib.Deriving.Countable.mkToNatFuns","line":134,"kind":"def","docLink":"./Mathlib/Tactic/DeriveCountable.html#Mathlib.Deriving.Countable.mkToNatFuns","doc":"Constructs a function from the inductive type to `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveCountable.html#Mathlib.Deriving.Countable.mkToNatFuns\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Countable</span>.<span class=\"name\">mkToNatFuns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Deriving/Util.html#Lean.Elab.Deriving.Context\">Lean.Elab.Deriving.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toNatFnNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`command</span>)</span></div></div>"}]}