{"name":"Mathlib.CategoryTheory.Bicategory.Kan.Adjunction","instances":[{"typeNames":[],"name":"CategoryTheory.Bicategory.LeftExtension.instCommuteWithOfIsLeftAdjoint","className":"CategoryTheory.Bicategory.Lan.CommuteWith"}],"imports":["Init","Mathlib.CategoryTheory.Bicategory.Kan.HasKan","Mathlib.CategoryTheory.Bicategory.Adjunction.Basic","Mathlib.Tactic.TFAE"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L255-L257","name":"CategoryTheory.Bicategory.LeftExtension.instCommuteWithOfIsLeftAdjoint","line":255,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.instCommuteWithOfIsLeftAdjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.instCommuteWithOfIsLeftAdjoint\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">instCommuteWithOfIsLeftAdjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.IsLeftAdjoint\">IsLeftAdjoint</a> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasLeftKanExtension\">HasLeftKanExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.Lan.CommuteWith\">Lan.CommuteWith</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L199-L253","name":"CategoryTheory.Bicategory.LeftExtension.isKanOfWhiskerLeftAdjoint","line":199,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.isKanOfWhiskerLeftAdjoint","doc":"A left adjoint commutes with a left Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.isKanOfWhiskerLeftAdjoint\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">isKanOfWhiskerLeftAdjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">adj</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction\">Adjunction</a> <span class=\"fn\">h</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.whisker\">whisker</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L182-L193","name":"CategoryTheory.Bicategory.isRightAdjoint_TFAE","line":182,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.isRightAdjoint_TFAE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.isRightAdjoint_TFAE\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">isRightAdjoint_TFAE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.IsRightAdjoint\">IsRightAdjoint</a> <span class=\"fn\">u</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasAbsLeftKanLift\">HasAbsLeftKanLift</a> <span class=\"fn\">u</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasLeftKanLift\">HasLeftKanLift</a> <span class=\"fn\">u</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.LanLift.CommuteWith\">LanLift.CommuteWith</a> <span class=\"fn\">u</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">u</span></span></span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L176-L180","name":"CategoryTheory.Bicategory.LeftLift.IsAbsKan.adjunction","line":176,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.adjunction","doc":"For an adjuntion `f ⊣ u`, `f` is a left Kan lift of the identity along `u`.\nThe unit of this Kan lift is given by the unit of the adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.adjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">u</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan\">IsAbsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction\">Adjunction</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.lift\">lift</a></span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L152-L174","name":"CategoryTheory.Bicategory.LeftLift.IsKan.adjunction","line":152,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftLift.IsKan.adjunction","doc":"A left Kan lift of the identity along `u` such that `u` commutes with is a left adjoint\nto `u`. The unit of this adjoint is given by the unit of the Kan lift. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftLift.IsKan.adjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">u</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.whisker\">whisker</a></span> <span class=\"fn\">u</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction\">Adjunction</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.lift\">lift</a></span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L122-L150","name":"CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKanLift","line":122,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKanLift","doc":"For an adjuntion `f ⊣ u`, `f` is an absolute left Kan lift of the identity along `u`.\nThe unit of this Kan lift is given by the unit of the adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKanLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">isAbsoluteLeftKanLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">adj</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction\">Adjunction</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.mk\">LeftLift.mk</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">adj</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction.unit\">unit</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan\">IsAbsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L103-L114","name":"CategoryTheory.Bicategory.isLeftAdjoint_TFAE","line":103,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.isLeftAdjoint_TFAE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.isLeftAdjoint_TFAE\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">isLeftAdjoint_TFAE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.IsLeftAdjoint\">IsLeftAdjoint</a> <span class=\"fn\">f</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasAbsLeftKanExtension\">HasAbsLeftKanExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.HasLeftKanExtension\">HasLeftKanExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/HasKan.html#CategoryTheory.Bicategory.Lan.CommuteWith\">Lan.CommuteWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">f</span></span></span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L97-L101","name":"CategoryTheory.Bicategory.LeftExtension.IsAbsKan.adjunction","line":97,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.adjunction","doc":"For an adjuntion `f ⊣ u`, `u` is a left Kan extension of the identity along `f`.\nThe unit of this Kan extension is given by the unit of the adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.adjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan\">IsAbsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction\">Adjunction</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.extension\">extension</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L73-L95","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.adjunction","line":73,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.IsKan.adjunction","doc":"A left Kan extension of the identity along `f` such that `f` commutes with is a right adjoint\nto `f`. The unit of this adjoint is given by the unit of the Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.LeftExtension.IsKan.adjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.whisker\">whisker</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction\">Adjunction</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.extension\">extension</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.lean#L42-L71","name":"CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKan","line":42,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKan","doc":"For an adjuntion `f ⊣ u`, `u` is an absolute left Kan extension of the identity along `f`.\nThe unit of this Kan extension is given by the unit of the adjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/Adjunction.html#CategoryTheory.Bicategory.Adjunction.isAbsoluteLeftKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">isAbsoluteLeftKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">adj</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction\">Adjunction</a> <span class=\"fn\">f</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.mk\">LeftExtension.mk</a> <span class=\"fn\">u</span> <span class=\"fn\"><span class=\"fn\">adj</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Adjunction/Basic.html#CategoryTheory.Bicategory.Adjunction.unit\">unit</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan\">IsAbsKan</a></span></div></div>"}]}