{"name":"Aesop.RuleTac.Basic","instances":[{"typeNames":["Aesop.RuleTacInput"],"name":"Aesop.instInhabitedRuleTacInput","className":"Inhabited"},{"typeNames":["Aesop.Subgoal"],"name":"Aesop.instInhabitedSubgoal","className":"Inhabited"},{"typeNames":["Aesop.RuleTacOutput"],"name":"Aesop.instInhabitedRuleTacOutput","className":"Inhabited"},{"typeNames":["Aesop.RuleTac"],"name":"Aesop.instInhabitedRuleTac","className":"Inhabited"},{"typeNames":["Aesop.CasesPattern"],"name":"Aesop.instCasesPatternInhabited","className":"Inhabited"},{"typeNames":["Aesop.CasesTarget"],"name":"Aesop.instInhabitedCasesTarget","className":"Inhabited"}],"imports":["Init","Aesop.Forward.Match.Types","Aesop.Index.Basic","Aesop.Percent","Aesop.Rule.Forward","Aesop.RuleTac.GoalDiff","Aesop.RuleTac.FVarIdSubst","Aesop.Script.CtorNames","Aesop.Script.Step","Batteries.Lean.Meta.SavedState","Aesop.Options.Internal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L171-L171","name":"Aesop.instInhabitedCasesTarget","line":171,"kind":"instance","docLink":"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedCasesTarget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedCasesTarget\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedCasesTarget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget\">CasesTarget</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L170-L170","name":"Aesop.CasesTarget.patterns","line":170,"kind":"ctor","docLink":"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget.patterns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget.patterns\"><span class=\"name\">Aesop</span>.<span class=\"name\">CasesTarget</span>.<span class=\"name\">patterns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patterns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesPattern\">CasesPattern</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget\">CasesTarget</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L169-L169","name":"Aesop.CasesTarget.decl","line":169,"kind":"ctor","docLink":"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget.decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget.decl\"><span class=\"name\">Aesop</span>.<span class=\"name\">CasesTarget</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget\">CasesTarget</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L168-L171","name":"Aesop.CasesTarget","line":168,"kind":"inductive","docLink":"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesTarget\"><span class=\"name\">Aesop</span>.<span class=\"name\">CasesTarget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L166-L166","name":"Aesop.instCasesPatternInhabited","line":166,"kind":"instance","docLink":"./Aesop/RuleTac/Basic.html#Aesop.instCasesPatternInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.instCasesPatternInhabited\"><span class=\"name\">Aesop</span>.<span class=\"name\">instCasesPatternInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesPattern\">CasesPattern</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L165-L166","name":"Aesop.CasesPattern","line":165,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.CasesPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.CasesPattern\"><span class=\"name\">Aesop</span>.<span class=\"name\">CasesPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L151-L161","name":"Aesop.TacGen","line":151,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.TacGen","doc":"A tactic generator is a special sort of rule tactic, intended for use with\ngenerative machine learning methods. It generates zero or more tactics\n(represented as strings) that could be applied to the goal, plus a success\nprobability for each tactic. When Aesop executes a tactic generator, it executes\neach of the tactics and, if the tactic succeeds, adds a rule application for it.\nThe tactic's success probability (which must be between 0 and 1, inclusive)\nbecomes the success probability of the rule application. A `TacGen` rule\nsucceeds if at least one of its suggested tactics succeeds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.TacGen\"><span class=\"name\">Aesop</span>.<span class=\"name\">TacGen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L136-L149","name":"Aesop.RuleTac.ofTacticSyntax","line":136,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTac.ofTacticSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTac.ofTacticSyntax\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTac</span>.<span class=\"name\">ofTacticSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a> â†’ <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Tactic\">Lean.Syntax.Tactic</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTac\">RuleTac</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L133-L134","name":"Aesop.RuleTac.ofSingleRuleTac","line":133,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTac.ofSingleRuleTac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTac.ofSingleRuleTac\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTac</span>.<span class=\"name\">ofSingleRuleTac</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.SingleRuleTac\">SingleRuleTac</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTac\">RuleTac</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L127-L131","name":"Aesop.SingleRuleTac.toRuleTac","line":127,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.SingleRuleTac.toRuleTac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.SingleRuleTac.toRuleTac\"><span class=\"name\">Aesop</span>.<span class=\"name\">SingleRuleTac</span>.<span class=\"name\">toRuleTac</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.SingleRuleTac\">SingleRuleTac</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTac\">RuleTac</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L120-L125","name":"Aesop.SingleRuleTac","line":120,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.SingleRuleTac","doc":"A `RuleTac` which generates only a single `RuleApplication`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.SingleRuleTac\"><span class=\"name\">Aesop</span>.<span class=\"name\">SingleRuleTac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L117-L118","name":"Aesop.instInhabitedRuleTac","line":117,"kind":"instance","docLink":"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedRuleTac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedRuleTac\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRuleTac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTac\">RuleTac</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L112-L115","name":"Aesop.RuleTac","line":112,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTac","doc":"A `RuleTac` is the tactic that is run when a rule is applied to a goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTac\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L110-L110","name":"Aesop.instInhabitedRuleTacOutput","line":110,"kind":"instance","docLink":"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedRuleTacOutput","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedRuleTacOutput\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRuleTacOutput</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput\">RuleTacOutput</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L109-L109","name":"Aesop.RuleTacOutput.applications","line":109,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput.applications","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput.applications\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacOutput</span>.<span class=\"name\">applications</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput\">RuleTacOutput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\">RuleApplication</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L108-L108","name":"Aesop.RuleTacOutput.mk","line":108,"kind":"ctor","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacOutput</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">applications</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\">RuleApplication</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput\">RuleTacOutput</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L105-L110","name":"Aesop.RuleTacOutput","line":105,"kind":"structure","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput","doc":"The result of a rule tactic is a list of rule applications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacOutput\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacOutput</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L93-L101","name":"Aesop.RuleApplication.check","line":93,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.check","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.check\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleApplication</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\">RuleApplication</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L89-L89","name":"Aesop.RuleApplication.successProbability?","line":89,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.successProbability?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.successProbability?\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleApplication</span>.<span class=\"name\">successProbability?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\">RuleApplication</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Percent.html#Aesop.Percent\">Percent</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L88-L88","name":"Aesop.RuleApplication.scriptSteps?","line":88,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.scriptSteps?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.scriptSteps?\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleApplication</span>.<span class=\"name\">scriptSteps?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\">RuleApplication</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Script/Step.html#Aesop.Script.LazyStep\">Script.LazyStep</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L87-L87","name":"Aesop.RuleApplication.postState","line":87,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.postState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.postState\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleApplication</span>.<span class=\"name\">postState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\">RuleApplication</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Lean.Meta.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L86-L86","name":"Aesop.RuleApplication.goals","line":86,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.goals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.goals\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleApplication</span>.<span class=\"name\">goals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\">RuleApplication</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal\">Subgoal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L85-L85","name":"Aesop.RuleApplication.mk","line":85,"kind":"ctor","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleApplication</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal\">Subgoal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">postState</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Lean.Meta.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scriptSteps?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Script/Step.html#Aesop.Script.LazyStep\">Script.LazyStep</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">successProbability?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Percent.html#Aesop.Percent\">Percent</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\">RuleApplication</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L72-L89","name":"Aesop.RuleApplication","line":72,"kind":"structure","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication","doc":"A single rule application, representing the application of a tactic to the input\ngoal. Must accurately report the following information:\n\n- `goals`: the goals generated by the tactic.\n- `postState`: the `MetaM` state after the tactic was run.\n- `scriptSteps?`: script steps which produce the same effect as the rule tactic.\n  If `input.options.generateScript = false` (where `input` is the\n  `RuleTacInput`), this field is ignored. If the tactic does not support script\n  generation, use `none`.\n- `successProbability`: The success probability of this rule application. If\n  `none`, we use the success probability of the applied rule.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleApplication\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleApplication</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L69-L70","name":"Aesop.mvarIdToSubgoal","line":69,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.mvarIdToSubgoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.mvarIdToSubgoal\"><span class=\"name\">Aesop</span>.<span class=\"name\">mvarIdToSubgoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parentMVarId </span><span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal\">Subgoal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L64-L65","name":"Aesop.Subgoal.mvarId","line":64,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.Subgoal.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal.mvarId\"><span class=\"name\">Aesop</span>.<span class=\"name\">Subgoal</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal\">Subgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L60-L60","name":"Aesop.instInhabitedSubgoal","line":60,"kind":"instance","docLink":"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedSubgoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedSubgoal\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedSubgoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal\">Subgoal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L59-L59","name":"Aesop.Subgoal.diff","line":59,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.Subgoal.diff","doc":"A diff between the goal the rule was run on and this goal. Many `MetaM`\ntactics report information that allows you to easily construct a `GoalDiff`.\nIf you don't have access to such information, use `diffGoals`, but note that\nit may not give optimal results.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal.diff\"><span class=\"name\">Aesop</span>.<span class=\"name\">Subgoal</span>.<span class=\"name\">diff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal\">Subgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">GoalDiff</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L52-L52","name":"Aesop.Subgoal.mk","line":52,"kind":"ctor","docLink":"./Aesop/RuleTac/Basic.html#Aesop.Subgoal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">Subgoal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diff</span> : <a href=\"./Aesop/RuleTac/GoalDiff.html#Aesop.GoalDiff\">GoalDiff</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal\">Subgoal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L51-L60","name":"Aesop.Subgoal","line":51,"kind":"structure","docLink":"./Aesop/RuleTac/Basic.html#Aesop.Subgoal","doc":"A subgoal produced by a rule. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.Subgoal\"><span class=\"name\">Aesop</span>.<span class=\"name\">Subgoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L49-L49","name":"Aesop.instInhabitedRuleTacInput","line":49,"kind":"instance","docLink":"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedRuleTacInput","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.instInhabitedRuleTacInput\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRuleTacInput</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L48-L48","name":"Aesop.RuleTacInput.hypTypes","line":48,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.hypTypes","doc":"Normalised types of all non-implementation detail hypotheses in the local\ncontext of `goal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.hypTypes\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacInput</span>.<span class=\"name\">hypTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L45-L45","name":"Aesop.RuleTacInput.options","line":45,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.options","doc":"The options given to Aesop. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.options\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacInput</span>.<span class=\"name\">options</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Options/Internal.html#Aesop.Options'\">Options'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L43-L43","name":"Aesop.RuleTacInput.patternSubsts?","line":43,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.patternSubsts?","doc":"If the rule has a pattern, the pattern substitutions that were found in\nthe goal. Each substitution is a list of expressions which were found by\nmatching the pattern against expressions in the goal. For example, if `h : max\na b = max a c` appears in the goal and the rule has pattern `max x y`, there\nwill be two substitutions `{x â†¦ a, y â†¦ b}`) and `{x â†¦ a, y â†¦ c}`.\n\nIf the rule does not have a pattern, this is `none`. Otherwise it is\nguaranteed to be `some xs` with `xs` non-empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.patternSubsts?\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacInput</span>.<span class=\"name\">patternSubsts?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L34-L34","name":"Aesop.RuleTacInput.indexMatchLocations","line":34,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.indexMatchLocations","doc":"If the rule is indexed, the locations (i.e. hyps or the target) matched by\nthe rule's index entries. Otherwise an empty set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.indexMatchLocations\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacInput</span>.<span class=\"name\">indexMatchLocations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/Index/Basic.html#Aesop.IndexMatchLocation\">IndexMatchLocation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L31-L31","name":"Aesop.RuleTacInput.mvars","line":31,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.mvars","doc":"The set of mvars that `goal` depends on. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.mvars\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacInput</span>.<span class=\"name\">mvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/UnorderedArraySet.html#Aesop.UnorderedArraySet\">UnorderedArraySet</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L29-L29","name":"Aesop.RuleTacInput.goal","line":29,"kind":"def","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.goal","doc":"The goal on which the rule is run. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.goal\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacInput</span>.<span class=\"name\">goal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L27-L27","name":"Aesop.RuleTacInput.mk","line":27,"kind":"ctor","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacInput</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvars</span> : <span class=\"fn\"><a href=\"./Aesop/Util/UnorderedArraySet.html#Aesop.UnorderedArraySet\">UnorderedArraySet</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indexMatchLocations</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/Index/Basic.html#Aesop.IndexMatchLocation\">IndexMatchLocation</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patternSubsts?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">options</span> : <a href=\"./Aesop/Options/Internal.html#Aesop.Options'\">Options'</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hypTypes</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\">RuleTacInput</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/RuleTac/Basic.lean#L26-L49","name":"Aesop.RuleTacInput","line":26,"kind":"structure","docLink":"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput","doc":"Input for a rule tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTacInput\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleTacInput</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}