{"name":"Mathlib.CategoryTheory.Category.ReflQuiv","instances":[{"typeNames":["CategoryTheory.ReflQuiv","_builtin_typeu"],"name":"CategoryTheory.ReflQuiv.instCoeSortType","className":"CoeSort"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"CategoryTheory.ReflQuiv.instReflQuiverα","className":"CategoryTheory.ReflQuiver"},{"typeNames":["CategoryTheory.ReflQuiv"],"name":"CategoryTheory.ReflQuiv.instInhabited","className":"Inhabited"},{"typeNames":["CategoryTheory.ReflQuiv"],"name":"CategoryTheory.ReflQuiv.category","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.ReflQuiv.forget"],"name":"CategoryTheory.ReflQuiv.forget.Faithful","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["CategoryTheory.ReflQuiv.forgetToQuiv"],"name":"CategoryTheory.ReflQuiv.forgetToQuiv.Faithful","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["CategoryTheory.Cat.FreeRefl"],"name":"CategoryTheory.Cat.instCategoryFreeRefl","className":"CategoryTheory.Category"}],"imports":["Init","Mathlib.Combinatorics.Quiver.ReflQuiver","Mathlib.CategoryTheory.Category.Cat","Mathlib.CategoryTheory.Category.Quiv"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L222-L259","name":"CategoryTheory.ReflQuiv.adj","line":222,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj","doc":"The adjunction between forming the free category on a reflexive quiver, and forgetting a category\nto a reflexive quiver.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">Cat.freeRefl</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\">forget</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L216-L220","name":"CategoryTheory.ReflQuiv.adj.counit.comp_app_eq","line":216,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.comp_app_eq","doc":"The counit of `ReflQuiv.adj` is closely related to the counit of `Quiv.adj`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.comp_app_eq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">comp_app_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{max u u_1, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">Cat.FreeRefl.quotientFunctor</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app\">app</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.pathComposition\">pathComposition</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L205-L205","name":"CategoryTheory.ReflQuiv.adj.counit.app_obj","line":205,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">app_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{max u v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">Cat.FreeReflRel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app\">app</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L205-L205","name":"CategoryTheory.ReflQuiv.adj.counit.app_map","line":205,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">app_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{max u v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">Cat.FreeReflRel</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app\">app</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">hf</span> <span class=\"fn\">(fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.composePath\">composePath</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L203-L214","name":"CategoryTheory.ReflQuiv.adj.counit.app","line":203,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app","doc":"The counit components are defined using the universal property of the quotient\nfrom the corresponding counit component for the adjunction between categories and quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.counit.app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{max u v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">Cat.freeRefl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">of</a> <span class=\"fn\">C</span>)</span>)</span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L198-L201","name":"CategoryTheory.ReflQuiv.adj.unit.map_app_eq","line":198,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.map_app_eq","doc":"This is used in the proof of both triangle equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.map_app_eq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">map_app_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\">forgetToQuiv</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app\">app</a> <span class=\"fn\">↑<span class=\"fn\">V</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.adj\">Quiv.adj</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.unit\">unit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\"><span class=\"fn\">V</span>.<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.toQuiv\">toQuiv</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget\">Quiv.forget</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">Cat.FreeRefl.quotientFunctor</a> <span class=\"fn\">↑<span class=\"fn\">V</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L192-L192","name":"CategoryTheory.ReflQuiv.adj.unit.app_toPrefunctor","line":192,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app_toPrefunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app_toPrefunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">app_toPrefunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app\">app</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.toPrefunctor\">toPrefunctor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths.of\">Paths.of</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">Cat.FreeRefl.quotientFunctor</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.toPrefunctor\">toPrefunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L192-L192","name":"CategoryTheory.ReflQuiv.adj.unit.app_map","line":192,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">app_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app\">app</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">Cat.FreeRefl.quotientFunctor</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\">toPath</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L192-L192","name":"CategoryTheory.ReflQuiv.adj.unit.app_obj","line":192,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">app_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app\">app</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">Cat.FreeRefl.quotientFunctor</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L190-L196","name":"CategoryTheory.ReflQuiv.adj.unit.app","line":190,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app","doc":"The unit components are defined as the composite of the corresponding unit component for the\nadjunction between categories and quivers with the map underlying the quotient functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj.unit.app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\">forget</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">Cat.freeRefl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">of</a> <span class=\"fn\">V</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L179-L183","name":"CategoryTheory.Cat.freeReflNatTrans","line":179,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflNatTrans","doc":"We will make use of the natural quotient map from the free category on the underlying\nquiver of a refl quiver to the free category on the reflexive quiver. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflNatTrans\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeReflNatTrans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\">ReflQuiv.forgetToQuiv</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free\">free</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">freeRefl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L161-L161","name":"CategoryTheory.Cat.freeRefl_obj_α","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_obj_α","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_obj_α\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeRefl_obj_α</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">freeRefl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">V</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl\">FreeRefl</a> <span class=\"fn\">↑<span class=\"fn\">V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L161-L161","name":"CategoryTheory.Cat.freeRefl_obj_str_comp","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_obj_str_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_obj_str_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeRefl_obj_str_comp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.Hom\">Quotient.Hom</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝¹</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.Hom\">Quotient.Hom</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.comp\">Quotient.comp</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L161-L161","name":"CategoryTheory.Cat.freeRefl_map_obj_as","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_map_obj_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_map_obj_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeRefl_map_obj_as</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">freeRefl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L161-L161","name":"CategoryTheory.Cat.freeRefl_obj_str_id","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_obj_str_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_obj_str_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeRefl_obj_str_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.CompClosure\">Quotient.CompClosure</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L161-L161","name":"CategoryTheory.Cat.freeRefl_map_map","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl_map_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeRefl_map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">freeRefl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">hf</span> <span class=\"fn\">(fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">FreeRefl.quotientFunctor</a> <span class=\"fn\">↑<span class=\"fn\">Y✝</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">mapPath</a></span> <span class=\"fn\">f</span>)</span></span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L159-L177","name":"CategoryTheory.Cat.freeRefl","line":159,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl","doc":"The functor sending a reflexive quiver to the free category it generates, a quotient of\nits path category "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeRefl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L154-L157","name":"CategoryTheory.Cat.freeReflMap_naturality","line":154,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap_naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeReflMap_naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">FreeRefl.quotientFunctor</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap\">freeReflMap</a> <span class=\"fn\">F</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.toPrefunctor\">toPrefunctor</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">FreeRefl.quotientFunctor</a> <span class=\"fn\">W</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L145-L145","name":"CategoryTheory.Cat.freeReflMap_obj_as","line":145,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap_obj_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap_obj_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeReflMap_obj_as</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap\">freeReflMap</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L145-L145","name":"CategoryTheory.Cat.freeReflMap_map","line":145,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeReflMap_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap\">freeReflMap</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">hf</span> <span class=\"fn\">(fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">FreeRefl.quotientFunctor</a> <span class=\"fn\">W</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">mapPath</a></span> <span class=\"fn\">f</span>)</span></span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L143-L152","name":"CategoryTheory.Cat.freeReflMap","line":143,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap","doc":"A refl prefunctor `V ⥤rq W` induces a functor `FreeRefl V ⥤ FreeRefl W` defined using\n`freeMap` and the quotient functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeReflMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeReflMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl\">FreeRefl</a> <span class=\"fn\">V</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl\">FreeRefl</a> <span class=\"fn\">W</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L135-L140","name":"CategoryTheory.Cat.FreeRefl.lift_unique'","line":135,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.lift_unique'","doc":"This is a specialization of `Quotient.lift_unique'` rather than `Quotient.lift_unique`, hence\nthe prime in the name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.lift_unique'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">FreeRefl</span>.<span class=\"name\">lift_unique'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_4, u_3}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F₁ </span><span class=\"fn\">F₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl\">FreeRefl</a> <span class=\"fn\">V</span>)</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">quotientFunctor</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">F₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">quotientFunctor</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">F₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L130-L133","name":"CategoryTheory.Cat.FreeRefl.quotientFunctor","line":130,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor","doc":"The quotient functor associated to a quotient category defines a natural map from the free\ncategory on the underlying quiver of a refl quiver to the free category on the reflexive quiver. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">FreeRefl</span>.<span class=\"name\">quotientFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl\">FreeRefl</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L127-L128","name":"CategoryTheory.Cat.instCategoryFreeRefl","line":127,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.instCategoryFreeRefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.instCategoryFreeRefl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">instCategoryFreeRefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{max u_1 u_2, u_1}</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl\">FreeRefl</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L122-L125","name":"CategoryTheory.Cat.FreeRefl","line":122,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl","doc":"A reflexive quiver generates a free category, defined as as quotient of the free category\non its underlying quiver (called the \"path category\") by the hom relation that uses the specified\nreflexivity arrows as the identity arrows. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">FreeRefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L120-L120","name":"CategoryTheory.Cat.FreeReflRel.mk","line":120,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">FreeReflRel</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\">FreeReflRel</a> <span class=\"fn\">X</span> <span class=\"fn\">X</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\">toPath</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil\">Quiver.Path.nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L118-L120","name":"CategoryTheory.Cat.FreeReflRel","line":118,"kind":"inductive","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel","doc":"The hom relation that identifies the specified reflexivity arrows with the nil paths "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeReflRel\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">FreeReflRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L104-L112","name":"CategoryTheory.ReflPrefunctor.toFunctor","line":104,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflPrefunctor.toFunctor","doc":"A refl prefunctor can be promoted to a functor if it respects composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflPrefunctor.toFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">toFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">↑<span class=\"fn\">D</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <span class=\"fn\">↑<span class=\"fn\">C</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>) (<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <span class=\"fn\">↑<span class=\"fn\">D</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L94-L98","name":"CategoryTheory.ReflQuiv.isoOfEquiv","line":94,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.isoOfEquiv","doc":"Compatible equivalences of types and hom-types induce an isomorphism of reflexive quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.isoOfEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">isoOfEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>) → (<span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">Y</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_id</span> : <span class=\"fn\">∀ (<span class=\"fn\">X</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">he</span> <span class=\"fn\">X</span> <span class=\"fn\">X</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">X</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">(<span class=\"fn\">e</span> <span class=\"fn\">X</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">of</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">of</a> <span class=\"fn\">W</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L78-L92","name":"CategoryTheory.ReflQuiv.isoOfQuivIso","line":78,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.isoOfQuivIso","doc":"An isomorphism of quivers lifts to an isomorphism of reflexive quivers given a suitable\ncompatibility with the identities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.isoOfQuivIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">isoOfQuivIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">Quiv.of</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">Quiv.of</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_id</span> : <span class=\"fn\">∀ (<span class=\"fn\">X</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">X</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">of</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">of</a> <span class=\"fn\">W</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L76-L76","name":"CategoryTheory.ReflQuiv.forget_forgetToQuiv","line":76,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget_forgetToQuiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget_forgetToQuiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forget_forgetToQuiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\">forget</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\">forgetToQuiv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget\">Quiv.forget</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L73-L74","name":"CategoryTheory.ReflQuiv.forgetToQuiv.Faithful","line":73,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv.Faithful","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv.Faithful\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forgetToQuiv</span>.<span class=\"name\">Faithful</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\">forgetToQuiv</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L69-L71","name":"CategoryTheory.ReflQuiv.forgetToQuiv_faithful","line":69,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv_faithful","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv_faithful\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forgetToQuiv_faithful</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\">↑<span class=\"fn\">V</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">↑<span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\">forgetToQuiv</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\">forgetToQuiv</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L64-L64","name":"CategoryTheory.ReflQuiv.forgetToQuiv_map","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forgetToQuiv_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\">forgetToQuiv</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.toPrefunctor\">toPrefunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L64-L64","name":"CategoryTheory.ReflQuiv.forgetToQuiv_obj","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forgetToQuiv_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\">forgetToQuiv</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">Quiv.of</a> <span class=\"fn\">↑<span class=\"fn\">V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L63-L67","name":"CategoryTheory.ReflQuiv.forgetToQuiv","line":63,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv","doc":"The forgetful functor from categories to quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forgetToQuiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forgetToQuiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L60-L61","name":"CategoryTheory.ReflQuiv.forget.Faithful","line":60,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget.Faithful","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget.Faithful\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forget</span>.<span class=\"name\">Faithful</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\">forget</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L56-L58","name":"CategoryTheory.ReflQuiv.forget_faithful","line":56,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget_faithful","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget_faithful\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forget_faithful</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <span class=\"fn\">↑<span class=\"fn\">D</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\">forget</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\">forget</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L51-L51","name":"CategoryTheory.ReflQuiv.forget_obj","line":51,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forget_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\">forget</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">of</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L51-L51","name":"CategoryTheory.ReflQuiv.forget_map","line":51,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forget_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\">forget</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor\">Functor.toReflPrefunctor</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L50-L54","name":"CategoryTheory.ReflQuiv.forget","line":50,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget","doc":"The forgetful functor from categories to quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.forget\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">forget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L48-L48","name":"CategoryTheory.ReflQuiv.comp_eq_comp","line":48,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.comp_eq_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.comp_eq_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">comp_eq_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L47-L47","name":"CategoryTheory.ReflQuiv.id_eq_id","line":47,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.id_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.id_eq_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">id_eq_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id\">𝟭rq</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L41-L45","name":"CategoryTheory.ReflQuiv.category","line":41,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.category","doc":"Category structure on `ReflQuiv` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">category</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">LargeCategory</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L39-L39","name":"CategoryTheory.ReflQuiv.of_val","line":39,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of_val\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">of_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">of</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L37-L37","name":"CategoryTheory.ReflQuiv.instInhabited","line":37,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.instInhabited\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L34-L35","name":"CategoryTheory.ReflQuiv.of","line":34,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of","doc":"Construct a bundled `ReflQuiv` from the underlying type and the typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L31-L32","name":"CategoryTheory.ReflQuiv.toQuiv","line":31,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.toQuiv","doc":"The underlying quiver of a reflexive quiver "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.toQuiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">toQuiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L29-L29","name":"CategoryTheory.ReflQuiv.instReflQuiverα","line":29,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.instReflQuiverα","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.instReflQuiverα\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">instReflQuiverα</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L27-L27","name":"CategoryTheory.ReflQuiv.instCoeSortType","line":27,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.instCoeSortType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.instCoeSortType\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span>.<span class=\"name\">instCoeSortType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\">ReflQuiv</a> <a href=\"./foundational_types.html\">(Type</a> u)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/ReflQuiv.lean#L20-L23","name":"CategoryTheory.ReflQuiv","line":20,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv","doc":"Category of refl quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) u (v + 1))</div></div>"}]}