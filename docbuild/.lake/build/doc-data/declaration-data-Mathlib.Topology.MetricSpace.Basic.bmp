{"name":"Mathlib.Topology.MetricSpace.Basic","instances":[{"typeNames":[],"name":"MetricSpace.instT0Space","className":"T0Space"},{"typeNames":[],"name":"MetricSpace.toEMetricSpace","className":"EMetricSpace"},{"typeNames":["Subtype"],"name":"Subtype.metricSpace","className":"MetricSpace"},{"typeNames":["MulOpposite"],"name":"MulOpposite.instMetricSpace","className":"MetricSpace"},{"typeNames":["AddOpposite"],"name":"AddOpposite.instMetricSpace","className":"MetricSpace"},{"typeNames":["Real"],"name":"Real.metricSpace","className":"MetricSpace"},{"typeNames":["NNReal"],"name":"instMetricSpaceNNReal","className":"MetricSpace"},{"typeNames":["ULift"],"name":"instMetricSpaceULift","className":"MetricSpace"},{"typeNames":["Prod"],"name":"Prod.metricSpaceMax","className":"MetricSpace"},{"typeNames":[],"name":"metricSpacePi","className":"MetricSpace"},{"typeNames":["SeparationQuotient"],"name":"SeparationQuotient.instDist","className":"Dist"},{"typeNames":["SeparationQuotient"],"name":"SeparationQuotient.instMetricSpace","className":"MetricSpace"}],"imports":["Init","Mathlib.Topology.MetricSpace.Pseudo.Basic","Mathlib.Topology.MetricSpace.Pseudo.Lemmas","Mathlib.Topology.MetricSpace.Pseudo.Pi","Mathlib.Topology.MetricSpace.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L202-L205","name":"SeparationQuotient.instMetricSpace","line":202,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#SeparationQuotient.instMetricSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#SeparationQuotient.instMetricSpace\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">instMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#SeparationQuotient\">SeparationQuotient</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L198-L200","name":"SeparationQuotient.dist_mk","line":198,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#SeparationQuotient.dist_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#SeparationQuotient.dist_mk\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">dist_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Inseparable.html#SeparationQuotient.mk\">mk</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Inseparable.html#SeparationQuotient.mk\">mk</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L193-L196","name":"SeparationQuotient.instDist","line":193,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#SeparationQuotient.instDist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#SeparationQuotient.instDist\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">instDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist\">Dist</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#SeparationQuotient\">SeparationQuotient</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L172-L184","name":"Metric.secondCountable_of_countable_discretization","line":172,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Metric.secondCountable_of_countable_discretization","doc":"A metric space is second countable if one can reconstruct up to any `ε>0` any element of the\nspace from countably many data. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Metric.secondCountable_of_countable_discretization\"><span class=\"name\">Metric</span>.<span class=\"name\">secondCountable_of_countable_discretization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ <span class=\"fn\">ε</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∃ (<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">β</span></span>) (<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>), <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ε</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L160-L161","name":"metricSpacePi","line":160,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#metricSpacePi","doc":"A finite product of metric spaces is a metric space, with the sup distance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#metricSpacePi\"><span class=\"name\">metricSpacePi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<span class=\"fn\">π</span> <span class=\"fn\">b</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">((<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L149-L150","name":"Prod.metricSpaceMax","line":149,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Prod.metricSpaceMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Prod.metricSpaceMax\"><span class=\"name\">Prod</span>.<span class=\"name\">metricSpaceMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> (<span class=\"fn\">γ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L144-L145","name":"instMetricSpaceULift","line":144,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#instMetricSpaceULift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#instMetricSpaceULift\"><span class=\"name\">instMetricSpaceULift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift.{u_2, v}</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L139-L140","name":"instMetricSpaceNNReal","line":139,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#instMetricSpaceNNReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#instMetricSpaceNNReal\"><span class=\"name\">instMetricSpaceNNReal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L132-L133","name":"Real.metricSpace","line":132,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Real.metricSpace","doc":"Instantiate the reals as a metric space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Real.metricSpace\"><span class=\"name\">Real</span>.<span class=\"name\">metricSpace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L126-L126","name":"AddOpposite.instMetricSpace","line":126,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#AddOpposite.instMetricSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#AddOpposite.instMetricSpace\"><span class=\"name\">AddOpposite</span>.<span class=\"name\">instMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L126-L128","name":"MulOpposite.instMetricSpace","line":126,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#MulOpposite.instMetricSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#MulOpposite.instMetricSpace\"><span class=\"name\">MulOpposite</span>.<span class=\"name\">instMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L122-L124","name":"Subtype.metricSpace","line":122,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Subtype.metricSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Subtype.metricSpace\"><span class=\"name\">Subtype</span>.<span class=\"name\">metricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L119-L120","name":"Embedding.comapMetricSpace","line":119,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Embedding.comapMetricSpace","doc":"**Alias** of `Topology.IsEmbedding.comapMetricSpace`.\n\n---\n\nPull back a metric space structure by an embedding. This is a version of\n`MetricSpace.induced` useful in case if the domain already has a `TopologicalSpace` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Embedding.comapMetricSpace\"><span class=\"name\">Embedding</span>.<span class=\"name\">comapMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#Topology.IsEmbedding\">Topology.IsEmbedding</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L113-L117","name":"Topology.IsEmbedding.comapMetricSpace","line":113,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Topology.IsEmbedding.comapMetricSpace","doc":"Pull back a metric space structure by an embedding. This is a version of\n`MetricSpace.induced` useful in case if the domain already has a `TopologicalSpace` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Topology.IsEmbedding.comapMetricSpace\"><span class=\"name\">Topology</span>.<span class=\"name\">IsEmbedding</span>.<span class=\"name\">comapMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#Topology.IsEmbedding\">IsEmbedding</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L110-L111","name":"UniformEmbedding.comapMetricSpace","line":110,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#UniformEmbedding.comapMetricSpace","doc":"**Alias** of `IsUniformEmbedding.comapMetricSpace`.\n\n---\n\nPull back a metric space structure by a uniform embedding. This is a version of\n`MetricSpace.induced` useful in case if the domain already has a `UniformSpace` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#UniformEmbedding.comapMetricSpace\"><span class=\"name\">UniformEmbedding</span>.<span class=\"name\">comapMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L104-L108","name":"IsUniformEmbedding.comapMetricSpace","line":104,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#IsUniformEmbedding.comapMetricSpace","doc":"Pull back a metric space structure by a uniform embedding. This is a version of\n`MetricSpace.induced` useful in case if the domain already has a `UniformSpace` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#IsUniformEmbedding.comapMetricSpace\"><span class=\"name\">IsUniformEmbedding</span>.<span class=\"name\">comapMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L97-L102","name":"MetricSpace.induced","line":97,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace.induced","doc":"Metric space structure pulled back by an injective function. Injectivity is necessary to\nensure that `dist x y = 0` only if `x = y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace.induced\"><span class=\"name\">MetricSpace</span>.<span class=\"name\">induced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L90-L95","name":"EMetricSpace.toMetricSpace","line":90,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#EMetricSpace.toMetricSpace","doc":"One gets a metric space from an emetric space if the edistance\nis everywhere finite, by pushing the edistance to reals. We set it up so that the edist and the\nuniformity are defeq in the metric space and the emetric space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#EMetricSpace.toMetricSpace\"><span class=\"name\">EMetricSpace</span>.<span class=\"name\">toMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EMetricSpace\">EMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L79-L88","name":"EMetricSpace.toMetricSpaceOfDist","line":79,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#EMetricSpace.toMetricSpaceOfDist","doc":"One gets a metric space from an emetric space if the edistance\nis everywhere finite, by pushing the edistance to reals. We set it up so that the edist and the\nuniformity are defeq in the metric space and the emetric space. In this definition, the distance\nis given separately, to be able to prescribe some expression which is not defeq to the push-forward\nof the edistance to reals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#EMetricSpace.toMetricSpaceOfDist\"><span class=\"name\">EMetricSpace</span>.<span class=\"name\">toMetricSpaceOfDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EMetricSpace\">EMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">edist_ne_top</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">dist</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span>.<a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toReal\">toReal</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L74-L75","name":"Metric.uniformEmbedding_bot_of_pairwise_le_dist","line":74,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Metric.uniformEmbedding_bot_of_pairwise_le_dist","doc":"**Alias** of `Metric.isUniformEmbedding_bot_of_pairwise_le_dist`.\n\n---\n\nIf `f : β → α` sends any two distinct points to points at distance at least `ε > 0`, then\n`f` is a uniform embedding with respect to the discrete uniformity on `β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Metric.uniformEmbedding_bot_of_pairwise_le_dist\"><span class=\"name\">Metric</span>.<span class=\"name\">uniformEmbedding_bot_of_pairwise_le_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hε</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Pairwise\">Pairwise</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L67-L72","name":"Metric.isUniformEmbedding_bot_of_pairwise_le_dist","line":67,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Metric.isUniformEmbedding_bot_of_pairwise_le_dist","doc":"If `f : β → α` sends any two distinct points to points at distance at least `ε > 0`, then\n`f` is a uniform embedding with respect to the discrete uniformity on `β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Metric.isUniformEmbedding_bot_of_pairwise_le_dist\"><span class=\"name\">Metric</span>.<span class=\"name\">isUniformEmbedding_bot_of_pairwise_le_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hε</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Pairwise\">Pairwise</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L64-L65","name":"Metric.closedEmbedding_of_pairwise_le_dist","line":64,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Metric.closedEmbedding_of_pairwise_le_dist","doc":"**Alias** of `Metric.isClosedEmbedding_of_pairwise_le_dist`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Metric.closedEmbedding_of_pairwise_le_dist\"><span class=\"name\">Metric</span>.<span class=\"name\">closedEmbedding_of_pairwise_le_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hε</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Pairwise\">Pairwise</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#Topology.IsClosedEmbedding\">Topology.IsClosedEmbedding</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L59-L62","name":"Metric.isClosedEmbedding_of_pairwise_le_dist","line":59,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Metric.isClosedEmbedding_of_pairwise_le_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Metric.isClosedEmbedding_of_pairwise_le_dist\"><span class=\"name\">Metric</span>.<span class=\"name\">isClosedEmbedding_of_pairwise_le_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hε</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Pairwise\">Pairwise</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#Topology.IsClosedEmbedding\">Topology.IsClosedEmbedding</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L55-L57","name":"Metric.isClosed_of_pairwise_le_dist","line":55,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Metric.isClosed_of_pairwise_le_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Metric.isClosed_of_pairwise_le_dist\"><span class=\"name\">Metric</span>.<span class=\"name\">isClosed_of_pairwise_le_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hε</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Logic/Pairwise.html#Set.Pairwise\">Pairwise</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L51-L53","name":"MetricSpace.toEMetricSpace","line":51,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace.toEMetricSpace","doc":"A metric space induces an emetric space "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace.toEMetricSpace\"><span class=\"name\">MetricSpace</span>.<span class=\"name\">toEMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EMetricSpace\">EMetricSpace</a> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L44-L48","name":"MetricSpace.ofT0PseudoMetricSpace","line":44,"kind":"def","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace.ofT0PseudoMetricSpace","doc":"If a `PseudoMetricSpace` is a T₀ space, then it is a `MetricSpace`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace.ofT0PseudoMetricSpace\"><span class=\"name\">MetricSpace</span>.<span class=\"name\">ofT0PseudoMetricSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#T0Space\">T0Space</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L41-L42","name":"Metric.uniformEmbedding_iff'","line":41,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Metric.uniformEmbedding_iff'","doc":"**Alias** of `Metric.isUniformEmbedding_iff'`.\n\n---\n\nA map between metric spaces is a uniform embedding if and only if the distance between `f x`\nand `f y` is controlled in terms of the distance between `x` and `y` and conversely. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Metric.uniformEmbedding_iff'\"><span class=\"name\">Metric</span>.<span class=\"name\">uniformEmbedding_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">(∀ <span class=\"fn\">ε</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∃ <span class=\"fn\">δ</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">γ</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">δ</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ <span class=\"fn\">δ</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∃ <span class=\"fn\">ε</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">γ</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">δ</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L33-L39","name":"Metric.isUniformEmbedding_iff'","line":33,"kind":"theorem","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#Metric.isUniformEmbedding_iff'","doc":"A map between metric spaces is a uniform embedding if and only if the distance between `f x`\nand `f y` is controlled in terms of the distance between `x` and `y` and conversely. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#Metric.isUniformEmbedding_iff'\"><span class=\"name\">Metric</span>.<span class=\"name\">isUniformEmbedding_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">(∀ <span class=\"fn\">ε</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∃ <span class=\"fn\">δ</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">γ</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">δ</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ <span class=\"fn\">δ</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∃ <span class=\"fn\">ε</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">γ</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">δ</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/MetricSpace/Basic.lean#L30-L31","name":"MetricSpace.instT0Space","line":30,"kind":"instance","docLink":"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace.instT0Space","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace.instT0Space\"><span class=\"name\">MetricSpace</span>.<span class=\"name\">instT0Space</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#T0Space\">T0Space</a> <span class=\"fn\">γ</span></span></div></div>"}]}