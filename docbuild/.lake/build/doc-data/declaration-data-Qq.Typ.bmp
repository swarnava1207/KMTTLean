{"name":"Qq.Typ","instances":[{"typeNames":["Qq.Quoted"],"name":"Qq.instBEqQuoted","className":"BEq"},{"typeNames":["Qq.Quoted"],"name":"Qq.instHashableQuoted","className":"Hashable"},{"typeNames":["Qq.Quoted"],"name":"Qq.instInhabitedQuoted","className":"Inhabited"},{"typeNames":["Qq.Quoted"],"name":"Qq.instToStringQuoted","className":"ToString"},{"typeNames":["Qq.Quoted"],"name":"Qq.instReprQuoted","className":"Repr"},{"typeNames":["Qq.Quoted","Lean.Expr"],"name":"Qq.instCoeOutQuotedExpr","className":"CoeOut"},{"typeNames":["Qq.Quoted","Lean.MessageData"],"name":"Qq.instCoeOutQuotedMessageData","className":"CoeOut"},{"typeNames":["Qq.Quoted"],"name":"Qq.instToMessageDataQuoted","className":"Lean.ToMessageData"}],"imports":["Init","Lean"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L70-L73","name":"Qq.QuotedLevelDefEq.check","line":70,"kind":"def","docLink":"./Qq/Typ.html#Qq.QuotedLevelDefEq.check","doc":"Check that the claim `$u =QL $v` is actually true; that the two levels are defeq. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq.check\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedLevelDefEq</span>.<span class=\"name\">check</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq\">QuotedLevelDefEq</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L61-L67","name":"Qq.QuotedDefEq.check","line":61,"kind":"def","docLink":"./Qq/Typ.html#Qq.QuotedDefEq.check","doc":"Check that the claim `$lhs =Q $rhs` is actually true; that the two terms are defeq. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedDefEq.check\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedDefEq</span>.<span class=\"name\">check</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr.sort\">Lean.Expr.sort</a> <span class=\"fn\">u</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.QuotedDefEq\">QuotedDefEq</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L54-L58","name":"Qq.Quoted.check","line":54,"kind":"def","docLink":"./Qq/Typ.html#Qq.Quoted.check","doc":"Check that a term `e : Q(α)` really has type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.Quoted.check\"><span class=\"name\">Qq</span>.<span class=\"name\">Quoted</span>.<span class=\"name\">check</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L51-L51","name":"Qq.QuotedLevelDefEq.unsafeIntro","line":51,"kind":"ctor","docLink":"./Qq/Typ.html#Qq.QuotedLevelDefEq.unsafeIntro","doc":"For a safer constructor, see `Qq.assertLevelDefEqQ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq.unsafeIntro\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedLevelDefEq</span>.<span class=\"name\">unsafeIntro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq\">QuotedLevelDefEq</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L44-L51","name":"Qq.QuotedLevelDefEq","line":44,"kind":"structure","docLink":"./Qq/Typ.html#Qq.QuotedLevelDefEq","doc":"`QuotedLevelDefEq u v` says that the levels `u` and `v` are definitionally equal.\n\nYou should usually write this using the notation `$u =QL $v`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedLevelDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L42-L42","name":"Qq.QuotedDefEq.unsafeIntro","line":42,"kind":"ctor","docLink":"./Qq/Typ.html#Qq.QuotedDefEq.unsafeIntro","doc":"For a safer constructor, see `Qq.assertDefEqQ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedDefEq.unsafeIntro\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedDefEq</span>.<span class=\"name\">unsafeIntro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr.sort\">Lean.Expr.sort</a> <span class=\"fn\">u</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.QuotedDefEq\">QuotedDefEq</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L35-L42","name":"Qq.QuotedDefEq","line":35,"kind":"structure","docLink":"./Qq/Typ.html#Qq.QuotedDefEq","doc":"`QuotedDefEq lhs rhs` says that the expressions `lhs` and `rhs` are definitionally equal.\n\nYou should usually write this using the notation `$lhs =Q $rhs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr.sort\">Lean.Expr.sort</a> <span class=\"fn\">u</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L32-L33","name":"Qq.Quoted.ty","line":32,"kind":"def","docLink":"./Qq/Typ.html#Qq.Quoted.ty","doc":"Gets the type of a quoted expression.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.Quoted.ty\"><span class=\"name\">Qq</span>.<span class=\"name\">Quoted</span>.<span class=\"name\">ty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L30-L30","name":"Qq.instToMessageDataQuoted","line":30,"kind":"instance","docLink":"./Qq/Typ.html#Qq.instToMessageDataQuoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instToMessageDataQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instToMessageDataQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L29-L29","name":"Qq.instCoeOutQuotedMessageData","line":29,"kind":"instance","docLink":"./Qq/Typ.html#Qq.instCoeOutQuotedMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instCoeOutQuotedMessageData\"><span class=\"name\">Qq</span>.<span class=\"name\">instCoeOutQuotedMessageData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L28-L28","name":"Qq.instCoeOutQuotedExpr","line":28,"kind":"instance","docLink":"./Qq/Typ.html#Qq.instCoeOutQuotedExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instCoeOutQuotedExpr\"><span class=\"name\">Qq</span>.<span class=\"name\">instCoeOutQuotedExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L26-L26","name":"Qq.instReprQuoted","line":26,"kind":"instance","docLink":"./Qq/Typ.html#Qq.instReprQuoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instReprQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instReprQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L25-L25","name":"Qq.instToStringQuoted","line":25,"kind":"instance","docLink":"./Qq/Typ.html#Qq.instToStringQuoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instToStringQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instToStringQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L24-L24","name":"Qq.instInhabitedQuoted","line":24,"kind":"instance","docLink":"./Qq/Typ.html#Qq.instInhabitedQuoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instInhabitedQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instInhabitedQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L23-L23","name":"Qq.instHashableQuoted","line":23,"kind":"instance","docLink":"./Qq/Typ.html#Qq.instHashableQuoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instHashableQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instHashableQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L22-L22","name":"Qq.instBEqQuoted","line":22,"kind":"instance","docLink":"./Qq/Typ.html#Qq.instBEqQuoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instBEqQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instBEqQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L15-L20","name":"Qq.Quoted.unsafeMk","line":15,"kind":"def","docLink":"./Qq/Typ.html#Qq.Quoted.unsafeMk","doc":"Creates a quoted expression.  Requires that `e` has type `α`.\n\nYou should usually write this using the notation `q($e)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.Quoted.unsafeMk\"><span class=\"name\">Qq</span>.<span class=\"name\">Quoted</span>.<span class=\"name\">unsafeMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Typ.lean#L8-L13","name":"Qq.Quoted","line":8,"kind":"def","docLink":"./Qq/Typ.html#Qq.Quoted","doc":"`Quoted α` is the type of Lean expressions having type `α`.\n\nYou should usually write this using the notation `Q($α)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.Quoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Quoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}