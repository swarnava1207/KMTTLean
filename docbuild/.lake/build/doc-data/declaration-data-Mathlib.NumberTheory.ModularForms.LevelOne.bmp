{"name":"Mathlib.NumberTheory.ModularForms.LevelOne","instances":[],"imports":["Init","Mathlib.Analysis.Complex.AbsMax","Mathlib.NumberTheory.Modular","Mathlib.NumberTheory.ModularForms.QExpansion"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/LevelOne.lean#L95-L98","name":"ModularForm.levelOne_neg_weight_rank_zero","line":95,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/LevelOne.html#ModularForm.levelOne_neg_weight_rank_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/LevelOne.html#ModularForm.levelOne_neg_weight_rank_zero\"><span class=\"name\">ModularForm</span>.<span class=\"name\">levelOne_neg_weight_rank_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Basic.html#Module.rank\">Module.rank</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularForm\">ModularForm</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/LevelOne.lean#L90-L93","name":"ModularForm.levelOne_weight_zero_rank_one","line":90,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/LevelOne.html#ModularForm.levelOne_weight_zero_rank_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/LevelOne.html#ModularForm.levelOne_weight_zero_rank_one\"><span class=\"name\">ModularForm</span>.<span class=\"name\">levelOne_weight_zero_rank_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Dimension/Basic.html#Module.rank\">Module.rank</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularForm\">ModularForm</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">0</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/LevelOne.lean#L84-L86","name":"ModularFormClass.levelOne_weight_zero_const","line":84,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/LevelOne.html#ModularFormClass.levelOne_weight_zero_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/LevelOne.html#ModularFormClass.levelOne_weight_zero_const\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">levelOne_weight_zero_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">0</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>), <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.const\">Function.const</a> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/LevelOne.lean#L78-L82","name":"ModularFormClass.levelOne_neg_weight_eq_zero","line":78,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/LevelOne.html#ModularFormClass.levelOne_neg_weight_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/LevelOne.html#ModularFormClass.levelOne_neg_weight_eq_zero\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">levelOne_neg_weight_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/LevelOne.lean#L37-L47","name":"SlashInvariantForm.wt_eq_zero_of_eq_const","line":37,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/LevelOne.html#SlashInvariantForm.wt_eq_zero_of_eq_const","doc":"If a constant function is modular of weight `k`, then either `k = 0`, or the constant is `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/LevelOne.html#SlashInvariantForm.wt_eq_zero_of_eq_const\"><span class=\"name\">SlashInvariantForm</span>.<span class=\"name\">wt_eq_zero_of_eq_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/SlashInvariantForms.html#SlashInvariantFormClass\">SlashInvariantFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.const\">Function.const</a> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/LevelOne.lean#L29-L34","name":"SlashInvariantForm.exists_one_half_le_im_and_norm_le","line":29,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/LevelOne.html#SlashInvariantForm.exists_one_half_le_im_and_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/LevelOne.html#SlashInvariantForm.exists_one_half_le_im_and_norm_le\"><span class=\"name\">SlashInvariantForm</span>.<span class=\"name\">exists_one_half_le_im_and_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/SlashInvariantForms.html#SlashInvariantFormClass\">SlashInvariantFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">τ</span> : <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">ξ</span> : <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a>), <span class=\"fn\"><span class=\"fn\">1</span> / <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">ξ</span>.<a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane.im\">im</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">τ</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ξ</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></div></div>"}]}