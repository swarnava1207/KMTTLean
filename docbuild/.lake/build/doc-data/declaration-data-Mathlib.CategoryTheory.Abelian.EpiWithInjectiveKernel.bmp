{"name":"Mathlib.CategoryTheory.Abelian.EpiWithInjectiveKernel","instances":[{"typeNames":["CategoryTheory.Abelian.epiWithInjectiveKernel"],"name":"CategoryTheory.Abelian.instIsMultiplicativeEpiWithInjectiveKernel","className":"CategoryTheory.MorphismProperty.IsMultiplicative"}],"imports":["Init","Mathlib.Algebra.Homology.ShortComplex.ShortExact","Mathlib.CategoryTheory.MorphismProperty.Composition"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.lean#L59-L87","name":"CategoryTheory.Abelian.instIsMultiplicativeEpiWithInjectiveKernel","line":59,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.instIsMultiplicativeEpiWithInjectiveKernel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.instIsMultiplicativeEpiWithInjectiveKernel\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Abelian</span>.<span class=\"name\">instIsMultiplicativeEpiWithInjectiveKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel\">epiWithInjectiveKernel</a>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Composition.html#CategoryTheory.MorphismProperty.IsMultiplicative\">IsMultiplicative</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.lean#L53-L57","name":"CategoryTheory.Abelian.epiWithInjectiveKernel_of_iso","line":53,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Abelian</span>.<span class=\"name\">epiWithInjectiveKernel_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel\">epiWithInjectiveKernel</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.lean#L34-L51","name":"CategoryTheory.Abelian.epiWithInjectiveKernel_iff","line":34,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel_iff","doc":"A morphism `g : X ⟶ Y` is epi with an injective kernel iff there exists a morphism\n`f : I ⟶ X` with `I` injective such that `f ≫ g = 0` and\nthe short complex `I ⟶ X ⟶ Y` has a splitting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Abelian</span>.<span class=\"name\">epiWithInjectiveKernel_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel\">epiWithInjectiveKernel</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">I</span> : <span class=\"fn\">C</span>) (_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective/Basic.html#CategoryTheory.Injective\">Injective</a> <span class=\"fn\">I</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\">I</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span>) (<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>),\n    <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">X₁</span> := <span class=\"fn\">I</span>, <span class=\"fn\">X₂</span> := <span class=\"fn\">X</span>, <span class=\"fn\">X₃</span> := <span class=\"fn\">Y</span>, <span class=\"fn\">f</span> := <span class=\"fn\">f</span>, <span class=\"fn\">g</span> := <span class=\"fn\">g</span>, <span class=\"fn\">zero</span> := <span class=\"fn\">w</span> }</span>.<a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Splitting\">Splitting</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.lean#L29-L32","name":"CategoryTheory.Abelian.epiWithInjectiveKernel","line":29,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel","doc":"The class of morphisms in an abelian category that are epimorphisms\nand have an injective kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/EpiWithInjectiveKernel.html#CategoryTheory.Abelian.epiWithInjectiveKernel\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Abelian</span>.<span class=\"name\">epiWithInjectiveKernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">MorphismProperty</a> <span class=\"fn\">C</span></span></div></div>"}]}