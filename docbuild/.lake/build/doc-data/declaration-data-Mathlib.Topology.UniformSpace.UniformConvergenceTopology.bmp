{"name":"Mathlib.Topology.UniformSpace.UniformConvergenceTopology","instances":[{"typeNames":["UniformFun"],"name":"instNonemptyUniformFun","className":"Nonempty"},{"typeNames":["UniformOnFun"],"name":"instNonemptyUniformOnFun","className":"Nonempty"},{"typeNames":["UniformFun"],"name":"instSubsingletonUniformFun","className":"Subsingleton"},{"typeNames":["UniformOnFun"],"name":"instSubsingletonUniformOnFun","className":"Subsingleton"},{"typeNames":["UniformFun"],"name":"UniformFun.uniformSpace","className":"UniformSpace"},{"typeNames":["UniformFun"],"name":"UniformFun.topologicalSpace","className":"TopologicalSpace"},{"typeNames":["UniformFun"],"name":"UniformFun.instT2Space","className":"T2Space"},{"typeNames":["UniformOnFun"],"name":"UniformOnFun.uniformSpace","className":"UniformSpace"},{"typeNames":["UniformOnFun"],"name":"UniformOnFun.topologicalSpace","className":"TopologicalSpace"},{"typeNames":["UniformOnFun"],"name":"UniformOnFun.instCompleteSpace","className":"CompleteSpace"},{"typeNames":["UniformFun"],"name":"UniformFun.instCompleteSpace","className":"CompleteSpace"}],"imports":["Init","Mathlib.Topology.UniformSpace.UniformConvergence","Mathlib.Topology.UniformSpace.Pi","Mathlib.Topology.UniformSpace.Equiv","Mathlib.Topology.RestrictGen"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L1148-L1164","name":"UniformContinuousOn.comp_tendstoUniformly_eventually","line":1148,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformContinuousOn.comp_tendstoUniformly_eventually","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformContinuousOn.comp_tendstoUniformly_eventually\"><span class=\"name\">UniformContinuousOn</span>.<span class=\"name\">comp_tendstoUniformly_eventually</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuousOn\">UniformContinuousOn</a> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergence.html#TendstoUniformly\">TendstoUniformly</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergence.html#TendstoUniformly\">TendstoUniformly</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">F</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span>)</span></span>)</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span>)</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L1134-L1146","name":"UniformContinuousOn.comp_tendstoUniformly","line":1134,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformContinuousOn.comp_tendstoUniformly","doc":"Composing on the left by a uniformly continuous function preserves uniform convergence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformContinuousOn.comp_tendstoUniformly\"><span class=\"name\">UniformContinuousOn</span>.<span class=\"name\">comp_tendstoUniformly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hF</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuousOn\">UniformContinuousOn</a> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergence.html#TendstoUniformly\">TendstoUniformly</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergence.html#TendstoUniformly\">TendstoUniformly</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">F</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span>)</span></span>)</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span>)</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L1125-L1126","name":"UniformFun.instCompleteSpace","line":1125,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.instCompleteSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.instCompleteSpace\"><span class=\"name\">UniformFun</span>.<span class=\"name\">instCompleteSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L1099-L1119","name":"UniformOnFun.uniformSpace_eq_iInf_precomp_of_cover","line":1099,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace_eq_iInf_precomp_of_cover","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace_eq_iInf_precomp_of_cover\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformSpace_eq_iInf_precomp_of_cover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">δ</span> <span class=\"fn\">i</span></span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔗</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">δ</span> <span class=\"fn\">i</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_image</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.MapsTo\">Set.MapsTo</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">δ</span> <span class=\"fn\">i</span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">𝔗</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">𝔖</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_preimage</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.MapsTo\">Set.MapsTo</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">𝔖</span> <span class=\"fn\">(<span class=\"fn\">𝔗</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_cover</span> : <span class=\"fn\">∀ <span class=\"fn\">S</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">∃ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">S</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">⋃ <span class=\"fn\">i</span> ∈ <span class=\"fn\">I</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\">φ</span> <span class=\"fn\">i</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>),\n    <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">(<span class=\"fn\">𝔗</span> <span class=\"fn\">i</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">i</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">(<span class=\"fn\">δ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\">𝔗</span> <span class=\"fn\">i</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L1069-L1096","name":"UniformOnFun.uniformSpace_eq_inf_precomp_of_cover","line":1069,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace_eq_inf_precomp_of_cover","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace_eq_inf_precomp_of_cover\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformSpace_eq_inf_precomp_of_cover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ₁</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ₂</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ₁</span> : <span class=\"fn\"><span class=\"fn\">δ₁</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ₂</span> : <span class=\"fn\"><span class=\"fn\">δ₂</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔗₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">δ₁</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔗₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">δ₂</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_image₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.MapsTo\">Set.MapsTo</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">δ₁</span></span>) =&gt; <span class=\"fn\">φ₁</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">𝔗₁</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_image₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.MapsTo\">Set.MapsTo</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">δ₂</span></span>) =&gt; <span class=\"fn\">φ₂</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">𝔗₂</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_preimage₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.MapsTo\">Set.MapsTo</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">φ₁</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">𝔖</span> <span class=\"fn\">𝔗₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_preimage₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.MapsTo\">Set.MapsTo</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">φ₂</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">𝔖</span> <span class=\"fn\">𝔗₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_cover</span> : <span class=\"fn\">∀ <span class=\"fn\">S</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">S</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">φ₁</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">φ₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔗₁</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">φ₁</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">δ₁</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔗₁</span>)</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔗₂</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">φ₂</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">δ₂</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔗₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L1058-L1066","name":"UniformOnFun.isClosed_setOf_continuous","line":1058,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.isClosed_setOf_continuous","doc":"Suppose that the topology on `α` is defined by its restrictions to the sets of `𝔖`.\n\nThen the set of continuous functions is closed\nin the topology of uniform convergence on the sets of `𝔖`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.isClosed_setOf_continuous\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">isClosed_setOf_continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#Topology.RestrictGenTopology\">Topology.RestrictGenTopology</a> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">f</span>)</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L1035-L1055","name":"UniformOnFun.uniformEquivPiComm","line":1035,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivPiComm","doc":"The natural bijection between `α → Π i, δ i` and `Π i, α → δ i`, upgraded to a uniform\nisomorphism between `α →ᵤ[𝔖] (Π i, δ i)` and `Π i, α →ᵤ[𝔖] δ i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivPiComm\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformEquivPiComm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">δ</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">(<span class=\"fn\">δ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">δ</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">δ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">𝔖</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L1009-L1031","name":"UniformOnFun.uniformEquivProdArrow","line":1009,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivProdArrow","doc":"The natural bijection between `α → β × γ` and `(α → β) × (α → γ)`, upgraded to a uniform\nisomorphism between `α →ᵤ[𝔖] β × γ` and `(α →ᵤ[𝔖] β) × (α →ᵤ[𝔖] γ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivProdArrow\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformEquivProdArrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span>) <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L991-L1007","name":"UniformOnFun.instCompleteSpace","line":991,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.instCompleteSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.instCompleteSpace\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">instCompleteSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L983-L989","name":"UniformOnFun.continuous_rng_iff","line":983,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.continuous_rng_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.continuous_rng_iff\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">continuous_rng_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">UniformFun.ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Restrict.html#Set.restrict\">restrict</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L976-L981","name":"UniformOnFun.tendsto_iff_tendstoUniformlyOn","line":976,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.tendsto_iff_tendstoUniformlyOn","doc":"Convergence in the topology of `𝔖`-convergence means uniform convergence on `S` (in the sense\nof `TendstoUniformlyOn`) for all `S ∈ 𝔖`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.tendsto_iff_tendstoUniformlyOn\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">tendsto_iff_tendstoUniformlyOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">F</span> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergence.html#TendstoUniformlyOn\">TendstoUniformlyOn</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">F</span>) <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L968-L974","name":"UniformOnFun.continuousOn_eval₂","line":968,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.continuousOn_eval₂","doc":"If each point of `α` admits a neighbourhood `V ∈ 𝔖`,\nthen the evaluation of `f : α →ᵤ[𝔖] β` at `x : α` is continuous in `(f, x)`\non the set of `(f, x)` such that `f` is continuous at `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.continuousOn_eval₂\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">continuousOn_eval₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝔖</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∃ <span class=\"fn\">V</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">(fun (<span class=\"fn\">fx</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\"><span class=\"fn\">fx</span>.1</span> <span class=\"fn\"><span class=\"fn\">fx</span>.2</span></span>)</span>\n  <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">fx</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousAt\">ContinuousAt</a> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\"><span class=\"fn\">fx</span>.1</span>)</span> <span class=\"fn\"><span class=\"fn\">fx</span>.2</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L955-L966","name":"UniformOnFun.continuousAt_eval₂","line":955,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.continuousAt_eval₂","doc":"If `f : α →ᵤ[𝔖] β` is continuous at `x` and `x` admits a neighbourhood `V ∈ 𝔖`,\nthen evaluation of `g : α →ᵤ[𝔖] β` at `y : α` is continuous in `(g, y)` at `(f, x)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.continuousAt_eval₂\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">continuousAt_eval₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝔖</span> : <span class=\"fn\">∃ <span class=\"fn\">V</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousAt\">ContinuousAt</a> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousAt\">ContinuousAt</a> <span class=\"fn\">(fun (<span class=\"fn\">fx</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\"><span class=\"fn\">fx</span>.1</span> <span class=\"fn\"><span class=\"fn\">fx</span>.2</span></span>)</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L945-L953","name":"UniformOnFun.uniformContinuous_toFun","line":945,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_toFun","doc":"If `𝔖` covers `α`, the natural map `UniformOnFun.toFun` from `α →ᵤ[𝔖] β` to `α → β` is\nuniformly continuous.\n\nIn other words, if `𝔖` covers `α`, then the uniform structure of `𝔖`-convergence is finer than\nthat of pointwise convergence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_toFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">𝔖</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L937-L943","name":"UniformOnFun.uniformContinuous_restrict_toFun","line":937,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_restrict_toFun","doc":"The restriction map from `α →ᵤ[𝔖] β` to `⋃₀ 𝔖 → β` is uniformly continuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_restrict_toFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_restrict_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> (<span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">𝔖</span>).<a href=\"./Mathlib/Data/Set/Restrict.html#Set.restrict\">restrict</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L930-L935","name":"UniformOnFun.t2Space_of_covering","line":930,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.t2Space_of_covering","doc":"If `𝔖` covers `α`, then the topology of `𝔖`-convergence is T₂. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.t2Space_of_covering\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">t2Space_of_covering</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Hausdorff.html#T2Space\">T2Space</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">𝔖</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Hausdorff.html#T2Space\">T2Space</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L919-L928","name":"UniformOnFun.congrLeft","line":919,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.congrLeft","doc":"Turn a bijection `e : γ ≃ α` such that we have both `∀ T ∈ 𝔗, e '' T ∈ 𝔖` and\n`∀ S ∈ 𝔖, e ⁻¹' S ∈ 𝔗` into a uniform isomorphism `(γ →ᵤ[𝔗] β) ≃ᵤ (α →ᵤ[𝔖] β)` by pre-composing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.congrLeft\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">congrLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔗</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">γ</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">γ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">𝔗</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">Set.image</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">𝔖</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he'</span> : <span class=\"fn\">𝔖</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">Set.preimage</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">𝔗</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">γ</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔗</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L904-L917","name":"UniformOnFun.precomp_uniformContinuous","line":904,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.precomp_uniformContinuous","doc":"Let `f : γ → α`, `𝔖 : Set (Set α)`, `𝔗 : Set (Set γ)`, and assume that `∀ T ∈ 𝔗, f '' T ∈ 𝔖`.\nThen, the function `(fun g ↦ g ∘ f) : (α →ᵤ[𝔖] β) → (γ →ᵤ[𝔗] β)` is uniformly continuous.\n\nNote that one can easily see that assuming `∀ T ∈ 𝔗, ∃ S ∈ 𝔖, f '' T ⊆ S` would work too, but\nwe will get this for free when we prove that `𝒱(α, β, 𝔖, uβ) = 𝒱(α, β, 𝔖', uβ)` where `𝔖'` is the\n***noncovering*** bornology generated by `𝔖`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.precomp_uniformContinuous\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">precomp_uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔗</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">γ</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.MapsTo\">Set.MapsTo</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">𝔗</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔗</span>)</span> (<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L897-L902","name":"UniformOnFun.congrRight","line":897,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.congrRight","doc":"Turn a uniform isomorphism `γ ≃ᵤ β` into a uniform isomorphism `(α →ᵤ[𝔖] γ) ≃ᵤ (α →ᵤ[𝔖] β)`\nby post-composing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.congrRight\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">congrRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">γ</span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L894-L895","name":"UniformOnFun.postcomp_uniformEmbedding","line":894,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformEmbedding","doc":"**Alias** of `UniformOnFun.postcomp_isUniformEmbedding`.\n\n---\n\nPost-composition by a uniform embedding is a uniform embedding for the\nuniform structures of `𝔖`-convergence.\n\nMore precisely, if `f : γ → β` is a uniform embedding, then\n`(fun g ↦ f ∘ g) : (α →ᵤ[𝔖] γ) → (α →ᵤ[𝔖] β)` is a uniform embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformEmbedding\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">postcomp_uniformEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L884-L892","name":"UniformOnFun.postcomp_isUniformEmbedding","line":884,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_isUniformEmbedding","doc":"Post-composition by a uniform embedding is a uniform embedding for the\nuniform structures of `𝔖`-convergence.\n\nMore precisely, if `f : γ → β` is a uniform embedding, then\n`(fun g ↦ f ∘ g) : (α →ᵤ[𝔖] γ) → (α →ᵤ[𝔖] β)` is a uniform embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_isUniformEmbedding\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">postcomp_isUniformEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L881-L882","name":"UniformOnFun.postcomp_uniformInducing","line":881,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformInducing","doc":"**Alias** of `UniformOnFun.postcomp_isUniformInducing`.\n\n---\n\nPost-composition by a uniform inducing is a uniform inducing for the\nuniform structures of `𝔖`-convergence.\n\nMore precisely, if `f : γ → β` is a uniform inducing, then\n`(fun g ↦ f ∘ g) : (α →ᵤ[𝔖] γ) → (α →ᵤ[𝔖] β)` is a uniform inducing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformInducing\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">postcomp_uniformInducing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L865-L879","name":"UniformOnFun.postcomp_isUniformInducing","line":865,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_isUniformInducing","doc":"Post-composition by a uniform inducing is a uniform inducing for the\nuniform structures of `𝔖`-convergence.\n\nMore precisely, if `f : γ → β` is a uniform inducing, then\n`(fun g ↦ f ∘ g) : (α →ᵤ[𝔖] γ) → (α →ᵤ[𝔖] β)` is a uniform inducing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_isUniformInducing\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">postcomp_isUniformInducing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L854-L863","name":"UniformOnFun.postcomp_uniformContinuous","line":854,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformContinuous","doc":"Post-composition by a uniformly continuous function is uniformly continuous for the\nuniform structures of `𝔖`-convergence.\n\nMore precisely, if `f : γ → β` is uniformly continuous, then\n`(fun g ↦ f ∘ g) : (α →ᵤ[𝔖] γ) → (α →ᵤ[𝔖] β)` is uniformly continuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformContinuous\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">postcomp_uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L843-L852","name":"UniformOnFun.comap_eq","line":843,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.comap_eq","doc":"If `u` is a uniform structure on `β` and `f : γ → β`, then\n`𝒱(α, γ, 𝔖, comap f u) = comap (fun g ↦ f ∘ g) 𝒱(α, γ, 𝔖, u₁)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.comap_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">comap_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L835-L841","name":"UniformOnFun.inf_eq","line":835,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.inf_eq","doc":"If `u₁` and `u₂` are two uniform structures on `γ`, then\n`𝒱(α, γ, 𝔖, u₁ ⊓ u₂) = 𝒱(α, γ, 𝔖, u₁) ⊓ 𝒱(α, γ, 𝔖, u₂)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.inf_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">inf_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u₁ </span><span class=\"fn\">u₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L827-L833","name":"UniformOnFun.iInf_eq","line":827,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.iInf_eq","doc":"If `u` is a family of uniform structures on `γ`, then\n`𝒱(α, γ, 𝔖, (⨅ i, u i)) = ⨅ i, 𝒱(α, γ, 𝔖, u i)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.iInf_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">iInf_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L823-L825","name":"UniformOnFun.uniformContinuous_eval","line":823,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_eval\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">𝔖</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> (<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L816-L819","name":"UniformOnFun.uniformContinuous_eval_of_mem_sUnion","line":816,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_eval_of_mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_eval_of_mem_sUnion\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_eval_of_mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">𝔖</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> (<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L809-L814","name":"UniformOnFun.uniformContinuous_eval_of_mem","line":809,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_eval_of_mem","doc":"If `x : α` is in some `S ∈ 𝔖`, then evaluation at `x` is uniformly continuous on\n`α →ᵤ[𝔖] β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_eval_of_mem\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_eval_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxs</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> (<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L801-L807","name":"UniformOnFun.mono","line":801,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.mono","doc":"Let `u₁`, `u₂` be two uniform structures on `γ` and `𝔖₁ 𝔖₂ : Set (Set α)`. If `u₁ ≤ u₂` and\n`𝔖₂ ⊆ 𝔖₁` then `𝒱(α, γ, 𝔖₁, u₁) ≤ 𝒱(α, γ, 𝔖₂, u₂)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.mono\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">u₁ </span><span class=\"fn\">u₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u₂</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">𝔖₁ </span><span class=\"fn\">𝔖₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝔖</span> : <span class=\"fn\">𝔖₂</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">𝔖₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">𝔖₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L786-L799","name":"UniformOnFun.uniformEquivUniformFun","line":786,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivUniformFun","doc":"The uniformity on `α →ᵤ[𝔖] β` is the same as the uniformity on `α →ᵤ β`,\nprovided that `Set.univ ∈ 𝔖`.\n\nHere we formulate it as a `UniformEquiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivUniformFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformEquivUniformFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L780-L784","name":"UniformOnFun.uniformContinuous_ofUniformFun","line":780,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_ofUniformFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_ofUniformFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_ofUniformFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">UniformFun.toFun</a> <span class=\"fn\">f</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L775-L778","name":"UniformOnFun.gen_mem_nhds","line":775,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_mem_nhds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_mem_nhds\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">gen_mem_nhds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hV</span> : <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">V</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L771-L773","name":"UniformOnFun.nhds_eq","line":771,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.nhds_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.nhds_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">nhds_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⨅ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">⨅ <span class=\"fn\">V</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.principal\">Filter.principal</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">V</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L760-L769","name":"UniformOnFun.nhds_eq_of_basis","line":760,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.nhds_eq_of_basis","doc":"A version of `UniformOnFun.hasBasis_nhds_of_basis`\nwith weaker conclusion and weaker assumptions.\n\nWe make no assumptions about the set `𝔖`\nbut conclude only that the neighbourhoods filter is equal to some indexed infimum. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.nhds_eq_of_basis\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">nhds_eq_of_basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⨅ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>,\n    <span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\">⨅ (_ : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.principal\">Filter.principal</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">s</span>, <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">V</span> <span class=\"fn\">i</span></span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L755-L758","name":"UniformOnFun.gen_mem_uniformity","line":755,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_mem_uniformity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_mem_uniformity\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">gen_mem_uniformity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hV</span> : <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">s</span> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L752-L753","name":"UniformOnFun.uniformity_eq","line":752,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformity_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformity_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformity_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">⨅ <span class=\"fn\">V</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.principal\">Filter.principal</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">s</span> <span class=\"fn\">V</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L739-L750","name":"UniformOnFun.uniformity_eq_of_basis","line":739,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformity_eq_of_basis","doc":"A version of `UniformOnFun.hasBasis_uniformity_of_basis`\nwith weaker conclusion and weaker assumptions.\n\nWe make no assumptions about the set `𝔖`\nbut conclude only that the uniformity is equal to some indexed infimum. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformity_eq_of_basis\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformity_eq_of_basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\">⨅ (_ : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.principal\">Filter.principal</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">V</span> <span class=\"fn\">i</span>)</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L729-L735","name":"UniformOnFun.uniformContinuous_restrict","line":729,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_restrict","doc":"If `S ∈ 𝔖`, then the restriction to `S` is a uniformly continuous map from `α →ᵤ[𝔖] β` to\n`↥S →ᵤ β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_restrict\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_restrict</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">UniformFun.ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Restrict.html#Set.restrict\">restrict</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L722-L727","name":"UniformOnFun.hasBasis_nhds","line":722,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_nhds","doc":"For `f : α →ᵤ[𝔖] β`, where `𝔖 : Set (Set α)` is nonempty and directed, `𝓝 f` admits the\nfamily `{g | ∀ x ∈ S, (f x, g x) ∈ V}` for `S ∈ 𝔖` and `V ∈ 𝓤 β` as a filter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_nhds\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_nhds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">𝔖</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt; <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt;\n  <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">g</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L712-L720","name":"UniformOnFun.hasBasis_nhds_of_basis","line":712,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_nhds_of_basis","doc":"For `f : α →ᵤ[𝔖] β`, where `𝔖 : Set (Set α)` is nonempty and directed, `𝓝 f` admits the\nfamily `{g | ∀ x ∈ S, (f x, g x) ∈ V}` for `S ∈ 𝔖` and `V ∈ 𝓑` as a filter basis, for any basis\n`𝓑` of `𝓤 β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_nhds_of_basis\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_nhds_of_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">𝔖</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">Si</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Si</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">Si</span>.2</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">Si</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ι</span>) =&gt;\n  <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">g</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\"><span class=\"fn\">Si</span>.1</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">Si</span>.2</span>)</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L704-L708","name":"UniformOnFun.isCountablyGenerated_uniformity","line":704,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.isCountablyGenerated_uniformity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.isCountablyGenerated_uniformity\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">isCountablyGenerated_uniformity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/CountablyGenerated.html#Filter.IsCountablyGenerated\">IsCountablyGenerated</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hex</span> : <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span>)</span>.<a href=\"./Mathlib/Order/Filter/CountablyGenerated.html#Filter.IsCountablyGenerated\">IsCountablyGenerated</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L687-L702","name":"UniformOnFun.hasAntitoneBasis_uniformity","line":687,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasAntitoneBasis_uniformity","doc":"If `t n` is a monotone sequence of sets in `𝔖`\nsuch that each `s ∈ 𝔖` is included in some `t n`\nand `V n` is an antitone basis of entourages of `β`,\nthen `UniformOnFun.gen 𝔖 (t n) (V n)` is an antitone basis of entourages of `α →ᵤ[𝔖] β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasAntitoneBasis_uniformity\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasAntitoneBasis_uniformity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#IsDirected\">IsDirected</a> <span class=\"fn\">ι</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hex</span> : <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>), <span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasAntitoneBasis\">HasAntitoneBasis</a></span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasAntitoneBasis\">HasAntitoneBasis</a></span> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">(<span class=\"fn\">t</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<span class=\"fn\">V</span> <span class=\"fn\">n</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L667-L685","name":"UniformOnFun.hasBasis_uniformity_of_covering_of_basis","line":667,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_covering_of_basis","doc":"Let `t i` be a nonempty directed subfamily of `𝔖`\nsuch that every `s ∈ 𝔖` is included in some `t i`.\nLet `V` bounded by `p` be a basis of entourages of `β`.\n\nThen `UniformOnFun.gen 𝔖 (t i) (V j)` bounded by `p j` is a basis of entourages of `α →ᵤ[𝔖] β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_covering_of_basis\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity_of_covering_of_basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hdir</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#Directed\">Directed</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hex</span> : <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">i</span>.2</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ι'</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">(<span class=\"fn\">t</span> <span class=\"fn\"><span class=\"fn\">i</span>.1</span>)</span> <span class=\"fn\">(<span class=\"fn\">V</span> <span class=\"fn\"><span class=\"fn\">i</span>.2</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L658-L663","name":"UniformOnFun.hasBasis_uniformity","line":658,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity","doc":"If `𝔖 : Set (Set α)` is nonempty and directed, then the uniformity of `α →ᵤ[𝔖] β` admits the\nfamily `{(f, g) | ∀ x ∈ S, (f x, g x) ∈ V}` for `S ∈ 𝔖` and `V ∈ 𝓤 β` as a filter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">𝔖</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt; <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L645-L656","name":"UniformOnFun.hasBasis_uniformity_of_basis","line":645,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis","doc":"If `𝔖 : Set (Set α)` is nonempty and directed and `𝓑` is a filter basis of `𝓤 β`, then the\nuniformity of `α →ᵤ[𝔖] β` admits the family `{(f, g) | ∀ x ∈ S, (f x, g x) ∈ V}` for `S ∈ 𝔖` and\n`V ∈ 𝓑` as a filter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity_of_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">𝔖</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">Si</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Si</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">Si</span>.2</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">Si</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ι</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\"><span class=\"fn\">Si</span>.1</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">Si</span>.2</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L634-L643","name":"UniformOnFun.hasBasis_uniformity_of_basis_aux₂","line":634,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis_aux₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis_aux₂\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity_of_basis_aux₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> (<span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Restrict.html#Set.restrict\">restrict</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">(↑<span class=\"fn\">s</span>)</span> <span class=\"fn\">β</span>)</span></span>)</span> <a href=\"./Mathlib/Order/Basic.html#Order.Preimage\">⁻¹'o</a> <a href=\"./Init/Prelude.html#GE.ge\">GE.ge</a>) <span class=\"fn\">𝔖</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L627-L632","name":"UniformOnFun.hasBasis_uniformity_of_basis_aux₁","line":627,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis_aux₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis_aux₁\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity_of_basis_aux₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L617-L625","name":"UniformOnFun.topologicalSpace_eq","line":617,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace_eq","doc":"The topology of `𝔖`-convergence is the infimum, for `S ∈ 𝔖`, of topology induced by the map\nof `S.restrict : (α →ᵤ[𝔖] β) → (↥S →ᵤ β)` of restriction to `S`, where `↥S →ᵤ β` is endowed with\nthe topology of uniform convergence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">topologicalSpace_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace\">topologicalSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⨅ <span class=\"fn\">s</span> ∈ <span class=\"fn\">𝔖</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#TopologicalSpace.induced\">TopologicalSpace.induced</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">UniformFun.ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Restrict.html#Set.restrict\">restrict</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.topologicalSpace\">UniformFun.topologicalSpace</a> <span class=\"fn\">(↑<span class=\"fn\">s</span>)</span> <span class=\"fn\">β</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L612-L615","name":"UniformOnFun.topologicalSpace","line":612,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace","doc":"Topology of `𝔖`-convergence, i.e uniform convergence on the elements of `𝔖`, declared as an\ninstance on `α →ᵤ[𝔖] β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">topologicalSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L602-L608","name":"UniformOnFun.uniformSpace","line":602,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace","doc":"Uniform structure of `𝔖`-convergence, i.e uniform convergence on the elements of `𝔖`,\ndeclared as an instance on `α →ᵤ[𝔖] β`. It is defined as the infimum, for `S ∈ 𝔖`, of the pullback\nby `S.restrict`, the map of restriction to `S`, of the uniform structure `𝒰(s, β, uβ)` on\n`↥S →ᵤ β`. We will denote it `𝒱(α, β, 𝔖, uβ)`, where `uβ` is the uniform structure on `β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L584-L598","name":"UniformOnFun.isBasis_gen","line":584,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.isBasis_gen","doc":"If `𝔖 : Set (Set α)` is nonempty and directed and `𝓑` is a filter basis on `β × β`, then the\nfamily `UniformOnFun.gen 𝔖 S V` for `S ∈ 𝔖` and `V ∈ 𝓑` is a filter basis on\n`(α →ᵤ[𝔖] β) × (α →ᵤ[𝔖] β)`.\nWe will show in `has_basis_uniformity_of_basis` that, if `𝓑` is a basis for `𝓤 β`, then the\ncorresponding filter is the uniformity of `α →ᵤ[𝔖] β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.isBasis_gen\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">isBasis_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">𝔖</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝓑</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases/Basic.html#FilterBasis\">FilterBasis</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.IsBasis\">Filter.IsBasis</a> <span class=\"fn\">(fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt; <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝔖</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝓑</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L580-L582","name":"UniformOnFun.gen_mono","line":580,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_mono","doc":"`UniformOnFun.gen` is antitone in the first argument and monotone in the second. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_mono\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">gen_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S </span><span class=\"fn\">S'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">V'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\">S'</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hV</span> : <span class=\"fn\">V</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">V'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">S</span> <span class=\"fn\">V</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">S'</span> <span class=\"fn\">V'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L568-L578","name":"UniformOnFun.gen_eq_preimage_restrict","line":568,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_eq_preimage_restrict","doc":"For `S : Set α` and `V : Set (β × β)`, we have\n`UniformOnFun.gen 𝔖 S V = (S.restrict × S.restrict) ⁻¹' (UniformFun.gen S β V)`.\nThis is the crucial fact for proving that the family `UniformOnFun.gen S V` for `S ∈ 𝔖` and\n`V ∈ 𝓤 β` is indeed a basis for the uniformity `α →ᵤ[𝔖] β` endowed with `𝒱(α, β, 𝔖, uβ)`\nthe uniform structure of `𝔖`-convergence, as defined in `UniformOnFun.uniformSpace`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_eq_preimage_restrict\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">gen_eq_preimage_restrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">𝔖</span> <span class=\"fn\">S</span> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> (<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/Set/Restrict.html#Set.restrict\">restrict</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">UniformFun.toFun</a></span>) (<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/Set/Restrict.html#Set.restrict\">restrict</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">UniformFun.toFun</a></span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">(↑<span class=\"fn\">S</span>)</span> <span class=\"fn\">β</span> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L561-L566","name":"UniformOnFun.gen","line":561,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen","doc":"Basis sets for the uniformity of `𝔖`-convergence: for `S : Set α` and `V : Set (β × β)`,\n`gen 𝔖 S V` is the set of pairs `(f, g)` of functions `α →ᵤ[𝔖] β` such that\n`∀ x ∈ S, (f x, g x) ∈ V`. Note that the family `𝔖 : Set (Set α)` is only used to specify which\ntype alias of `α → β` to use here. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L539-L550","name":"UniformFun.uniformSpace_eq_iInf_precomp_of_cover","line":539,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace_eq_iInf_precomp_of_cover","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace_eq_iInf_precomp_of_cover\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformSpace_eq_iInf_precomp_of_cover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">δ</span> <span class=\"fn\">i</span></span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_cover</span> : <span class=\"fn\">∃ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">⋃ <span class=\"fn\">i</span> ∈ <span class=\"fn\">I</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\">φ</span> <span class=\"fn\">i</span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">i</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>) <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">(<span class=\"fn\">δ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">β</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L520-L536","name":"UniformFun.uniformSpace_eq_inf_precomp_of_cover","line":520,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace_eq_inf_precomp_of_cover","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace_eq_inf_precomp_of_cover\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformSpace_eq_inf_precomp_of_cover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ₁</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ₂</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ₁</span> : <span class=\"fn\"><span class=\"fn\">δ₁</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ₂</span> : <span class=\"fn\"><span class=\"fn\">δ₂</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_cover</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">φ₁</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">φ₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">φ₁</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>) <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">δ₁</span> <span class=\"fn\">β</span>)</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">φ₂</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>) <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">δ₂</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L511-L517","name":"UniformFun.isClosed_setOf_continuous","line":511,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.isClosed_setOf_continuous","doc":"The set of continuous functions is closed in the uniform convergence topology.\nThis is a simple wrapper over `TendstoUniformly.continuous`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.isClosed_setOf_continuous\"><span class=\"name\">UniformFun</span>.<span class=\"name\">isClosed_setOf_continuous</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a> <span class=\"fn\">f</span>)</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L487-L507","name":"UniformFun.uniformEquivPiComm","line":487,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformEquivPiComm","doc":"The natural bijection between `α → Π i, δ i` and `Π i, α → δ i`, upgraded to a uniform\nisomorphism between `α →ᵤ (Π i, δ i)` and `Π i, α →ᵤ δ i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformEquivPiComm\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformEquivPiComm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">δ</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">(<span class=\"fn\">δ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">δ</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">δ</span> <span class=\"fn\">i</span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L462-L482","name":"UniformFun.uniformEquivProdArrow","line":462,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformEquivProdArrow","doc":"The natural bijection between `α → β × γ` and `(α → β) × (α → γ)`, upgraded to a uniform\nisomorphism between `α →ᵤ β × γ` and `(α →ᵤ β) × (α →ᵤ γ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformEquivProdArrow\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformEquivProdArrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span>)</span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L455-L460","name":"UniformFun.tendsto_iff_tendstoUniformly","line":455,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.tendsto_iff_tendstoUniformly","doc":"The topology of uniform convergence indeed gives the same notion of convergence as\n`TendstoUniformly`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.tendsto_iff_tendstoUniformly\"><span class=\"name\">UniformFun</span>.<span class=\"name\">tendsto_iff_tendstoUniformly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">F</span> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergence.html#TendstoUniformly\">TendstoUniformly</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">F</span>) <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L451-L453","name":"UniformFun.instT2Space","line":451,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.instT2Space","doc":"The topology of uniform convergence is T₂. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.instT2Space\"><span class=\"name\">UniformFun</span>.<span class=\"name\">instT2Space</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Hausdorff.html#T2Space\">T2Space</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Hausdorff.html#T2Space\">T2Space</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L441-L449","name":"UniformFun.uniformContinuous_toFun","line":441,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformContinuous_toFun","doc":"The natural map `UniformFun.toFun` from `α →ᵤ β` to `α → β` is uniformly continuous.\n\nIn other words, the uniform structure of uniform convergence is finer than that of pointwise\nconvergence, aka the product uniform structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformContinuous_toFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformContinuous_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L434-L439","name":"UniformFun.congrLeft","line":434,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.congrLeft","doc":"Turn a bijection `γ ≃ α` into a uniform isomorphism\n`(γ →ᵤ β) ≃ᵤ (α →ᵤ β)` by pre-composing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.congrLeft\"><span class=\"name\">UniformFun</span>.<span class=\"name\">congrLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">γ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">γ</span> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L422-L432","name":"UniformFun.precomp_uniformContinuous","line":422,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.precomp_uniformContinuous","doc":"Pre-composition by any function is uniformly continuous for the uniform structures of\nuniform convergence.\n\nMore precisely, for any `f : γ → α`, the function `(· ∘ f) : (α →ᵤ β) → (γ →ᵤ β)` is uniformly\ncontinuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.precomp_uniformContinuous\"><span class=\"name\">UniformFun</span>.<span class=\"name\">precomp_uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L415-L420","name":"UniformFun.congrRight","line":415,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.congrRight","doc":"Turn a uniform isomorphism `γ ≃ᵤ β` into a uniform isomorphism `(α →ᵤ γ) ≃ᵤ (α →ᵤ β)` by\npost-composing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.congrRight\"><span class=\"name\">UniformFun</span>.<span class=\"name\">congrRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">γ</span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">≃ᵤ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L399-L408","name":"UniformFun.postcomp_uniformContinuous","line":399,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformContinuous","doc":"Post-composition by a uniformly continuous function is uniformly continuous on `α →ᵤ β`.\n\nMore precisely, if `f : γ → β` is uniformly continuous, then `(fun g ↦ f ∘ g) : (α →ᵤ γ) → (α →ᵤ β)`\nis uniformly continuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformContinuous\"><span class=\"name\">UniformFun</span>.<span class=\"name\">postcomp_uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L392-L397","name":"UniformFun.comap_eq","line":392,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.comap_eq","doc":"If `u` is a uniform structures on `β` and `f : γ → β`, then\n`𝒰(α, γ, comap f u) = comap (fun g ↦ f ∘ g) 𝒰(α, γ, u₁)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.comap_eq\"><span class=\"name\">UniformFun</span>.<span class=\"name\">comap_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L389-L390","name":"UniformFun.postcomp_uniformEmbedding","line":389,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformEmbedding","doc":"**Alias** of `UniformFun.postcomp_isUniformEmbedding`.\n\n---\n\nPost-composition by a uniform embedding is\na uniform embedding for the uniform structures of uniform convergence.\n\nMore precisely, if `f : γ → β` is a uniform embedding,\nthen `(f ∘ ·) : (α →ᵤ γ) → (α →ᵤ β)` is a uniform embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformEmbedding\"><span class=\"name\">UniformFun</span>.<span class=\"name\">postcomp_uniformEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L378-L387","name":"UniformFun.postcomp_isUniformEmbedding","line":378,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_isUniformEmbedding","doc":"Post-composition by a uniform embedding is\na uniform embedding for the uniform structures of uniform convergence.\n\nMore precisely, if `f : γ → β` is a uniform embedding,\nthen `(f ∘ ·) : (α →ᵤ γ) → (α →ᵤ β)` is a uniform embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_isUniformEmbedding\"><span class=\"name\">UniformFun</span>.<span class=\"name\">postcomp_isUniformEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformEmbedding\">IsUniformEmbedding</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L375-L376","name":"UniformFun.postcomp_uniformInducing","line":375,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformInducing","doc":"**Alias** of `UniformFun.postcomp_isUniformInducing`.\n\n---\n\nPost-composition by a uniform inducing function is\na uniform inducing function for the uniform structures of uniform convergence.\n\nMore precisely, if `f : γ → β` is uniform inducing,\nthen `(f ∘ ·) : (α →ᵤ γ) → (α →ᵤ β)` is uniform inducing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformInducing\"><span class=\"name\">UniformFun</span>.<span class=\"name\">postcomp_uniformInducing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L365-L373","name":"UniformFun.postcomp_isUniformInducing","line":365,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_isUniformInducing","doc":"Post-composition by a uniform inducing function is\na uniform inducing function for the uniform structures of uniform convergence.\n\nMore precisely, if `f : γ → β` is uniform inducing,\nthen `(f ∘ ·) : (α →ᵤ γ) → (α →ᵤ β)` is uniform inducing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_isUniformInducing\"><span class=\"name\">UniformFun</span>.<span class=\"name\">postcomp_isUniformInducing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> (<span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L355-L363","name":"UniformFun.inf_eq","line":355,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.inf_eq","doc":"If `u₁` and `u₂` are two uniform structures on `γ`, then\n`𝒰(α, γ, u₁ ⊓ u₂) = 𝒰(α, γ, u₁) ⊓ 𝒰(α, γ, u₂)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.inf_eq\"><span class=\"name\">UniformFun</span>.<span class=\"name\">inf_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u₁ </span><span class=\"fn\">u₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L345-L353","name":"UniformFun.iInf_eq","line":345,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.iInf_eq","doc":"If `u` is a family of uniform structures on `γ`, then\n`𝒰(α, γ, (⨅ i, u i)) = ⨅ i, 𝒰(α, γ, u i)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.iInf_eq\"><span class=\"name\">UniformFun</span>.<span class=\"name\">iInf_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L340-L343","name":"UniformFun.mono","line":340,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.mono","doc":"If `u₁` and `u₂` are two uniform structures on `γ` and `u₁ ≤ u₂`, then\n`𝒰(α, γ, u₁) ≤ 𝒰(α, γ, u₂)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.mono\"><span class=\"name\">UniformFun</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">(@<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">uniformSpace</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L335-L338","name":"UniformFun.mem_gen","line":335,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.mem_gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.mem_gen\"><span class=\"name\">UniformFun</span>.<span class=\"name\">mem_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">g</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">V</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L325-L331","name":"UniformFun.uniformContinuous_eval","line":325,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformContinuous_eval","doc":"Evaluation at a fixed point is uniformly continuous on `α →ᵤ β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformContinuous_eval\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformContinuous_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> (<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L317-L321","name":"UniformFun.hasBasis_nhds","line":317,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_nhds","doc":"For `f : α →ᵤ β`, `𝓝 f` admits the family `{g | ∀ x, (f x, g x) ∈ V}` for `V ∈ 𝓤 β` as a\nfilter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_nhds\"><span class=\"name\">UniformFun</span>.<span class=\"name\">hasBasis_nhds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt; <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt;\n  <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">g</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">V</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L310-L315","name":"UniformFun.hasBasis_nhds_of_basis","line":310,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_nhds_of_basis","doc":"For `f : α →ᵤ β`, `𝓝 f` admits the family `{g | ∀ x, (f x, g x) ∈ V}` for `V ∈ 𝓑` as a filter\nbasis, for any basis `𝓑` of `𝓤 β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_nhds_of_basis\"><span class=\"name\">UniformFun</span>.<span class=\"name\">hasBasis_nhds_of_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">g</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L299-L308","name":"UniformFun.hasBasis_uniformity_of_basis","line":299,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_uniformity_of_basis","doc":"The uniformity of `α →ᵤ β` admits the family `{(f, g) | ∀ x, (f x, g x) ∈ V}` for `V ∈ 𝓑` as\na filter basis, for any basis `𝓑` of `𝓤 β` (in the case `𝓑 = (𝓤 β).as_basis` this is true by\ndefinition). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_uniformity_of_basis\"><span class=\"name\">UniformFun</span>.<span class=\"name\">hasBasis_uniformity_of_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">p</span> (<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">s</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L293-L297","name":"UniformFun.hasBasis_uniformity","line":293,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_uniformity","doc":"By definition, the uniformity of `α →ᵤ β` admits the family `{(f, g) | ∀ x, (f x, g x) ∈ V}`\nfor `V ∈ 𝓤 β` as a filter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_uniformity\"><span class=\"name\">UniformFun</span>.<span class=\"name\">hasBasis_uniformity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L287-L289","name":"UniformFun.topologicalSpace","line":287,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.topologicalSpace","doc":"Topology of uniform convergence, declared as an instance on `α →ᵤ β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.topologicalSpace\"><span class=\"name\">UniformFun</span>.<span class=\"name\">topologicalSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L282-L285","name":"UniformFun.uniformSpace","line":282,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace","doc":"Uniform structure of uniform convergence, declared as an instance on `α →ᵤ β`.\nWe will denote it `𝒰(α, β, uβ)` in the rest of this file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L269-L280","name":"UniformFun.uniformCore","line":269,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformCore","doc":"Core of the uniform structure of uniform convergence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformCore\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace.Core\">UniformSpace.Core</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L244-L265","name":"UniformFun.gc","line":244,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gc","doc":"The function `UniformFun.filter α β : Filter (β × β) → Filter ((α →ᵤ β) × (α →ᵤ β))`\nhas a lower adjoint `l` (in the sense of `GaloisConnection`). The exact definition of `l` is not\ninteresting; we will only use that it exists (in `UniformFun.mono` and\n`UniformFun.iInf_eq`) and that\n`l (Filter.map (Prod.map f f) 𝓕) = Filter.map (Prod.map ((∘) f) ((∘) f)) (l 𝓕)` for each\n`𝓕 : Filter (γ × γ)` and `f : γ → α` (in `UniformFun.comap_eq`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gc\"><span class=\"name\">UniformFun</span>.<span class=\"name\">gc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/GaloisConnection/Defs.html#GaloisConnection\">GaloisConnection</a> <span class=\"fn\">(fun (<span class=\"fn\">𝓐</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.map\">Filter.map</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.phi\">UniformFun.phi</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> (<span class=\"fn\">𝓐</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>)</span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">𝓕</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.filter\">UniformFun.filter</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝓕</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L233-L234","name":"UniformFun.phi","line":233,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.phi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.phi\"><span class=\"name\">UniformFun</span>.<span class=\"name\">phi</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvx</span> : (<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L224-L228","name":"UniformFun.filter","line":224,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.filter","doc":"For `𝓕 : Filter (β × β)`, this is the filter generated by the filter basis\n`UniformFun.basis α β 𝓕`. For `𝓕 = 𝓤 β`, this will be the uniformity of uniform\nconvergence on `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.filter\"><span class=\"name\">UniformFun</span>.<span class=\"name\">filter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝓕</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L216-L222","name":"UniformFun.basis","line":216,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.basis","doc":"For `𝓕 : Filter (β × β)`, this is the set of all `UniformFun.gen α β V` for\n`V ∈ 𝓕` as a bundled `FilterBasis` over `(α →ᵤ β) × (α →ᵤ β)`. This will only be applied to\n`𝓕 = 𝓤 β` when `β` is equipped with a `UniformSpace` structure, but it is useful to define it for\nany filter in order to be able to state that it has a lower adjoint\n(see `UniformFun.gc`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.basis\"><span class=\"name\">UniformFun</span>.<span class=\"name\">basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝓕</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases/Basic.html#FilterBasis\">FilterBasis</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L207-L214","name":"UniformFun.isBasis_gen","line":207,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.isBasis_gen","doc":"If `𝓕` is a filter on `β × β`, then the set of all `UniformFun.gen α β V` for\n`V ∈ 𝓕` is a filter basis on `(α →ᵤ β) × (α →ᵤ β)`. This will only be applied to `𝓕 = 𝓤 β` when\n`β` is equipped with a `UniformSpace` structure, but it is useful to define it for any filter in\norder to be able to state that it has a lower adjoint (see `UniformFun.gc`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.isBasis_gen\"><span class=\"name\">UniformFun</span>.<span class=\"name\">isBasis_gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝓑</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.IsBasis\">Filter.IsBasis</a> <span class=\"fn\">(fun (<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>) =&gt; <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">𝓑</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L202-L205","name":"UniformFun.gen","line":202,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen","doc":"Basis sets for the uniformity of uniform convergence: `gen α β V` is the set of pairs `(f, g)`\nof functions `α →ᵤ β` such that `∀ x, (f x, g x) ∈ V`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\"><span class=\"name\">UniformFun</span>.<span class=\"name\">gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L189-L189","name":"UniformOnFun.ofFun_toFun","line":189,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun_toFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">ofFun_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L188-L188","name":"UniformOnFun.toFun_ofFun","line":188,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun_ofFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun_ofFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">toFun_ofFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">toFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">ofFun</a> <span class=\"fn\">𝔖</span>)</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L187-L187","name":"UniformFun.ofFun_toFun","line":187,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun_toFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">ofFun_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L186-L186","name":"UniformFun.toFun_ofFun","line":186,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun_ofFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun_ofFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">toFun_ofFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\">toFun</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\">ofFun</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L182-L184","name":"UniformOnFun.toFun","line":182,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun","doc":"Reinterpret `f : α →ᵤ[𝔖] β` as an element of `α → β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L178-L180","name":"UniformFun.toFun","line":178,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun","doc":"Reinterpret `f : α →ᵤ β` as an element of `α → β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L174-L176","name":"UniformOnFun.ofFun","line":174,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun","doc":"Reinterpret `f : α → β` as an element of `α →ᵤ[𝔖] β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">ofFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L170-L172","name":"UniformFun.ofFun","line":170,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun","doc":"Reinterpret `f : α → β` as an element of `α →ᵤ β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">ofFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L167-L168","name":"instSubsingletonUniformOnFun","line":167,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instSubsingletonUniformOnFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instSubsingletonUniformOnFun\"><span class=\"name\">instSubsingletonUniformOnFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L164-L165","name":"instSubsingletonUniformFun","line":164,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instSubsingletonUniformFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instSubsingletonUniformFun\"><span class=\"name\">instSubsingletonUniformFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L162-L162","name":"instNonemptyUniformOnFun","line":162,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instNonemptyUniformOnFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instNonemptyUniformOnFun\"><span class=\"name\">instNonemptyUniformOnFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝔖</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">𝔖</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L160-L160","name":"instNonemptyUniformFun","line":160,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instNonemptyUniformFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instNonemptyUniformFun\"><span class=\"name\">instNonemptyUniformFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L154-L154","name":"UniformConvergence.«term_→ᵤ[_]_»","line":154,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformConvergence.«term_→ᵤ[_]_»","doc":"The type of functions from `α` to `β` equipped with the uniform structure and topology of\nuniform convergence on some family `𝔖` of subsets of `α`. We denote it `α →ᵤ[𝔖] β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformConvergence.«term_→ᵤ[_]_»\"><span class=\"name\">UniformConvergence</span>.<span class=\"name\">«term_→ᵤ[_]_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L152-L152","name":"UniformConvergence.«term_→ᵤ_»","line":152,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformConvergence.«term_→ᵤ_»","doc":"The type of functions from `α` to `β` equipped with the uniform structure and topology of\nuniform convergence. We denote it `α →ᵤ β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformConvergence.«term_→ᵤ_»\"><span class=\"name\">UniformConvergence</span>.<span class=\"name\">«term_→ᵤ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L146-L150","name":"UniformOnFun","line":146,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun","doc":"The type of functions from `α` to `β` equipped with the uniform structure and topology of\nuniform convergence on some family `𝔖` of subsets of `α`. We denote it `α →ᵤ[𝔖] β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\"><span class=\"name\">UniformOnFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L141-L144","name":"UniformFun","line":141,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun","doc":"The type of functions from `α` to `β` equipped with the uniform structure and topology of\nuniform convergence. We denote it `α →ᵤ β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\"><span class=\"name\">UniformFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"}]}