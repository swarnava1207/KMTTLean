{"name":"Mathlib.Tactic.Recall","instances":[],"imports":["Init","Mathlib.Init","Lean.Elab.Command","Lean.Elab.DeclUtil"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Recall.lean#L16-L36","name":"Mathlib.Tactic.Recall.recall","line":16,"kind":"def","docLink":"./Mathlib/Tactic/Recall.html#Mathlib.Tactic.Recall.recall","doc":"The `recall` command redeclares a previous definition for illustrative purposes.\nThis can be useful for files that give an expository account of some theory in Lean.\n\nThe syntax of the command mirrors `def`, so all the usual bells and whistles work.\n```\nrecall List.cons_append (a : α) (as bs : List α) : (a :: as) ++ bs = a :: (as ++ bs) := rfl\n```\nAlso, one can leave out the body.\n```\nrecall Nat.add_comm (n m : Nat) : n + m = m + n\n```\n\nThe command verifies that the new definition type-checks and that the type and value\nprovided are definitionally equal to the original declaration. However, this does not\ncapture some details (like binders), so the following works without error.\n```\nrecall Nat.add_comm {n m : Nat} : n + m = m + n\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Recall.html#Mathlib.Tactic.Recall.recall\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Recall</span>.<span class=\"name\">recall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}