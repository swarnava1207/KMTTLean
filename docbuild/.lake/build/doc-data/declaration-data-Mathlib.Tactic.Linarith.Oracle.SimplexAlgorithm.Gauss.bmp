{"name":"Mathlib.Tactic.Linarith.Oracle.SimplexAlgorithm.Gauss","instances":[],"imports":["Init","Mathlib.Tactic.Linarith.Oracle.SimplexAlgorithm.Datatypes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.lean#L73-L79","name":"Linarith.SimplexAlgorithm.Gauss.getTableau","line":73,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.getTableau","doc":"Given matrix `A`, solves the linear equation `A x = 0` and returns the solution as a tableau where\nsome variables are free and others (basic) variable are expressed as linear combinations of the free\nones.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.getTableau\"><span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Gauss</span>.<span class=\"name\">getTableau</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">matType</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Linarith.SimplexAlgorithm.Tableau\">Tableau</a> <span class=\"fn\">matType</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.lean#L29-L71","name":"Linarith.SimplexAlgorithm.Gauss.getTableauImp","line":29,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.getTableauImp","doc":"Implementation of `getTableau` in `GaussM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.getTableauImp\"><span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Gauss</span>.<span class=\"name\">getTableauImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.GaussM\">GaussM</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span> <span class=\"fn\">matType</span> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Linarith.SimplexAlgorithm.Tableau\">Tableau</a> <span class=\"fn\">matType</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.lean#L22-L27","name":"Linarith.SimplexAlgorithm.Gauss.findNonzeroRow","line":22,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.findNonzeroRow","doc":"Finds the first row starting from the `rowStart` with nonzero element in the column `col`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.findNonzeroRow\"><span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Gauss</span>.<span class=\"name\">findNonzeroRow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rowStart </span><span class=\"fn\">col</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.GaussM\">GaussM</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span> <span class=\"fn\">matType</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.lean#L17-L18","name":"Linarith.SimplexAlgorithm.Gauss.GaussM","line":17,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.GaussM","doc":"The monad for the Gaussian Elimination algorithm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Gauss.html#Linarith.SimplexAlgorithm.Gauss.GaussM\"><span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Gauss</span>.<span class=\"name\">GaussM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}