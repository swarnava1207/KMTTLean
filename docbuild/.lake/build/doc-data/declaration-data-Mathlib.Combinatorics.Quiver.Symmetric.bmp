{"name":"Mathlib.Combinatorics.Quiver.Symmetric","instances":[{"typeNames":["Quiver.Symmetrify"],"name":"Quiver.symmetrifyQuiver","className":"Quiver"},{"typeNames":["Prefunctor.comp"],"name":"Prefunctor.mapReverseComp","className":"Prefunctor.MapReverse"},{"typeNames":["Prefunctor.id"],"name":"Prefunctor.mapReverseId","className":"Prefunctor.MapReverse"},{"typeNames":["Quiver.Symmetrify"],"name":"Quiver.instHasReverseSymmetrify","className":"Quiver.HasReverse"},{"typeNames":["Quiver.Symmetrify"],"name":"Quiver.instHasInvolutiveReverseSymmetrify","className":"Quiver.HasInvolutiveReverse"},{"typeNames":["Prefunctor.symmetrify"],"name":"Prefunctor.symmetrify_mapReverse","className":"Prefunctor.MapReverse"},{"typeNames":["Quiver.Push"],"name":"Quiver.Push.instHasReverse","className":"Quiver.HasReverse"},{"typeNames":["Quiver.Push"],"name":"Quiver.Push.instHasInvolutiveReverse","className":"Quiver.HasInvolutiveReverse"},{"typeNames":["Quiver.Push.of"],"name":"Quiver.Push.ofMapReverse","className":"Prefunctor.MapReverse"}],"imports":["Init","Mathlib.Combinatorics.Quiver.Path","Mathlib.Combinatorics.Quiver.Push"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L234-L241","name":"Quiver.IsPreconnected","line":234,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.IsPreconnected","doc":"A quiver is preconnected iff there exists a path between any pair of\nvertices.\nNote that if `V` doesn't `HasReverse`, then the definition is stronger than\nsimply having a preconnected underlying `SimpleGraph`, since a path in one\ndirection doesn't induce one in the other.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.IsPreconnected\"><span class=\"name\">Quiver</span>.<span class=\"name\">IsPreconnected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L229-L230","name":"Quiver.Push.ofMapReverse","line":229,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Push.ofMapReverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Push.ofMapReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">Push</span>.<span class=\"name\">ofMapReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Push.html#Quiver.Push.of\">of</a> <span class=\"fn\">σ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L225-L227","name":"Quiver.Push.of_reverse","line":225,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Push.of_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Push.of_reverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">Push</span>.<span class=\"name\">of_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Push.html#Quiver.Push.of\">of</a> <span class=\"fn\">σ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Push.html#Quiver.Push.of\">of</a> <span class=\"fn\">σ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L218-L223","name":"Quiver.Push.instHasInvolutiveReverse","line":218,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Push.instHasInvolutiveReverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Push.instHasInvolutiveReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">Push</span>.<span class=\"name\">instHasInvolutiveReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Push.html#Quiver.Push\">Push</a> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L214-L216","name":"Quiver.Push.instHasReverse","line":214,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Push.instHasReverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Push.instHasReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">Push</span>.<span class=\"name\">instHasReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Push.html#Quiver.Push\">Push</a> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L204-L206","name":"Prefunctor.symmetrify_mapReverse","line":204,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify_mapReverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify_mapReverse\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">symmetrify_mapReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify\">symmetrify</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L199-L199","name":"Prefunctor.symmetrify_obj","line":199,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify_obj\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">symmetrify_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify\">symmetrify</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L199-L199","name":"Prefunctor.symmetrify_map","line":199,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify_map\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">symmetrify_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">U</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : (<span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>) <a href=\"./Init/Core.html#Sum\">⊕</a> (<span class=\"fn\">Y✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X✝</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify\">symmetrify</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.map\">Sum.map</a> <span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L198-L202","name":"Prefunctor.symmetrify","line":198,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify","doc":"A prefunctor canonically defines a prefunctor of the symmetrifications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.symmetrify\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">symmetrify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">U</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L184-L196","name":"Quiver.Symmetrify.lift_unique","line":184,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift_unique","doc":"`lift φ` is the only prefunctor extending `φ` and preserving reverses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift_unique\"><span class=\"name\">Quiver</span>.<span class=\"name\">Symmetrify</span>.<span class=\"name\">lift_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Φ</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hΦ</span> : <a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of\">of</a> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\">Φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hΦinv</span> : <span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift\">lift</a> <span class=\"fn\">φ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L175-L182","name":"Quiver.Symmetrify.lift_reverse","line":175,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift_reverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">Symmetrify</span>.<span class=\"name\">lift_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift\">lift</a> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift\">lift</a> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L167-L173","name":"Quiver.Symmetrify.lift_spec","line":167,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift_spec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift_spec\"><span class=\"name\">Quiver</span>.<span class=\"name\">Symmetrify</span>.<span class=\"name\">lift_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of\">of</a> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift\">lift</a> <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L158-L165","name":"Quiver.Symmetrify.lift","line":158,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift","doc":"Given a quiver `V'` with reversible arrows, a prefunctor to `V'` can be lifted to one from\n`Symmetrify V` to `V'` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.lift\"><span class=\"name\">Quiver</span>.<span class=\"name\">Symmetrify</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L151-L151","name":"Quiver.Symmetrify.of_obj","line":151,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of_obj\"><span class=\"name\">Quiver</span>.<span class=\"name\">Symmetrify</span>.<span class=\"name\">of_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of\">of</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L151-L151","name":"Quiver.Symmetrify.of_map","line":151,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of_map\"><span class=\"name\">Quiver</span>.<span class=\"name\">Symmetrify</span>.<span class=\"name\">of_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of\">of</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L150-L154","name":"Quiver.Symmetrify.of","line":150,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of","doc":"The inclusion of a quiver in its symmetrification "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify.of\"><span class=\"name\">Quiver</span>.<span class=\"name\">Symmetrify</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L137-L144","name":"Quiver.Path.reverse_reverse","line":137,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse_reverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">reverse_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">reverse</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L130-L135","name":"Quiver.Path.reverse_comp","line":130,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">reverse_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">comp</a></span> <span class=\"fn\">q</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">reverse</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">reverse</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L125-L128","name":"Quiver.Path.reverse_toPath","line":125,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse_toPath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse_toPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">reverse_toPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\">toPath</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">Quiver.reverse</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\">toPath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L119-L123","name":"Quiver.Path.reverse","line":119,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse","doc":"Reverse the direction of a path. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L115-L117","name":"Quiver.Hom.toNeg","line":115,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Hom.toNeg","doc":"Shorthand for the \"backward\" arrow corresponding to `f` in `symmetrify V` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Hom.toNeg\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">toNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L111-L113","name":"Quiver.Hom.toPos","line":111,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Hom.toPos","doc":"Shorthand for the \"forward\" arrow corresponding to `f` in `symmetrify V` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Hom.toPos\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">toPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L105-L107","name":"Quiver.symmetrify_reverse","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.symmetrify_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.symmetrify_reverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">symmetrify_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.swap\">Sum.swap</a> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L99-L103","name":"Quiver.instHasInvolutiveReverseSymmetrify","line":99,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.instHasInvolutiveReverseSymmetrify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.instHasInvolutiveReverseSymmetrify\"><span class=\"name\">Quiver</span>.<span class=\"name\">instHasInvolutiveReverseSymmetrify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L96-L97","name":"Quiver.instHasReverseSymmetrify","line":96,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.instHasReverseSymmetrify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.instHasReverseSymmetrify\"><span class=\"name\">Quiver</span>.<span class=\"name\">instHasReverseSymmetrify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L90-L92","name":"Prefunctor.mapReverseId","line":90,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.mapReverseId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.mapReverseId\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">mapReverseId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.id\">𝟭q</a> <span class=\"fn\">U</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L84-L88","name":"Prefunctor.mapReverseComp","line":84,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.mapReverseComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.mapReverseComp\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">mapReverseComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ψ</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">φ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\">ψ</span>).<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L79-L82","name":"Prefunctor.map_reverse","line":79,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.map_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.map_reverse\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">map_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">Quiver.reverse</a> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">Quiver.reverse</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">e</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L77-L77","name":"Prefunctor.MapReverse.map_reverse'","line":77,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse.map_reverse'","doc":"The image of a reverse is the reverse of the image. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse.map_reverse'\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">MapReverse</span>.<span class=\"name\">map_reverse'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">U</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">Quiver.reverse</a> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">Quiver.reverse</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">e</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L75-L75","name":"Prefunctor.MapReverse.mk","line":75,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse.mk\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">MapReverse</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_reverse'</span> : <span class=\"fn\">∀ {<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">U</span>} (<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">Quiver.reverse</a> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">Quiver.reverse</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">e</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\">MapReverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L74-L77","name":"Prefunctor.MapReverse","line":74,"kind":"class","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse","doc":"A prefunctor preserving reversal of arrows "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Prefunctor.MapReverse\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">MapReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L66-L68","name":"Quiver.eq_reverse_iff","line":66,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.eq_reverse_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.eq_reverse_iff\"><span class=\"name\">Quiver</span>.<span class=\"name\">eq_reverse_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L57-L64","name":"Quiver.reverse_inj","line":57,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse_inj\"><span class=\"name\">Quiver</span>.<span class=\"name\">reverse_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L53-L55","name":"Quiver.reverse_reverse","line":53,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse_reverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">reverse_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L49-L49","name":"Quiver.HasInvolutiveReverse.inv'","line":49,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse.inv'","doc":"`reverse` is involutive "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse.inv'\"><span class=\"name\">Quiver</span>.<span class=\"name\">HasInvolutiveReverse</span>.<span class=\"name\">inv'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L47-L47","name":"Quiver.HasInvolutiveReverse.mk","line":47,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse.mk\"><span class=\"name\">Quiver</span>.<span class=\"name\">HasInvolutiveReverse</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toHasReverse</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv'</span> : <span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>} (<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">reverse</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L47-L49","name":"Quiver.HasInvolutiveReverse.toHasReverse","line":47,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse.toHasReverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse.toHasReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">HasInvolutiveReverse</span>.<span class=\"name\">toHasReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L46-L49","name":"Quiver.HasInvolutiveReverse","line":46,"kind":"class","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse","doc":"A quiver `HasInvolutiveReverse` if reversing twice is the identity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">HasInvolutiveReverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">V</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_2 v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L42-L44","name":"Quiver.reverse","line":42,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse","doc":"Reverse the direction of an arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>) → (<span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L40-L40","name":"Quiver.HasReverse.reverse'","line":40,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse.reverse'","doc":"the map which sends an arrow to its reverse "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse.reverse'\"><span class=\"name\">Quiver</span>.<span class=\"name\">HasReverse</span>.<span class=\"name\">reverse'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>) → (<span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L38-L38","name":"Quiver.HasReverse.mk","line":38,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse.mk\"><span class=\"name\">Quiver</span>.<span class=\"name\">HasReverse</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reverse'</span> : <span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>} → <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>) → (<span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L36-L40","name":"Quiver.HasReverse","line":36,"kind":"class","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse","doc":"A quiver `HasReverse` if we can reverse an arrow `p` from `a` to `b` to get an arrow\n`p.reverse` from `b` to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">HasReverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_2 v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L31-L32","name":"Quiver.symmetrifyQuiver","line":31,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.symmetrifyQuiver","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.symmetrifyQuiver\"><span class=\"name\">Quiver</span>.<span class=\"name\">symmetrifyQuiver</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Symmetrify</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Symmetric.lean#L27-L29","name":"Quiver.Symmetrify","line":27,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify","doc":"A type synonym for the symmetrized quiver (with an arrow both ways for each original arrow).\nNB: this does not work for `Prop`-valued quivers. It requires `[Quiver.{v+1} V]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\"><span class=\"name\">Quiver</span>.<span class=\"name\">Symmetrify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}