{"name":"Mathlib.Combinatorics.SimpleGraph.Ends.Defs","instances":[{"typeNames":["SimpleGraph.ComponentCompl"],"name":"SimpleGraph.ComponentCompl.setLike","className":"SetLike"},{"typeNames":["SimpleGraph.ComponentCompl"],"name":"SimpleGraph.componentCompl_nonempty_of_infinite","className":"Nonempty"},{"typeNames":["SimpleGraph.ComponentCompl"],"name":"SimpleGraph.componentCompl_finite","className":"Finite"}],"imports":["Init","Mathlib.CategoryTheory.CofilteredSystem","Mathlib.Combinatorics.SimpleGraph.Path","Mathlib.Data.Finite.Set"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L270-L276","name":"SimpleGraph.infinite_iff_in_eventualRange","line":270,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.infinite_iff_in_eventualRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.infinite_iff_in_eventualRange\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">infinite_iff_in_eventualRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor\">componentComplFunctor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp\">ComponentCompl.supp</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Infinite\">Infinite</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor\">componentComplFunctor</a></span>.<a href=\"./Mathlib/CategoryTheory/CofilteredSystem.html#CategoryTheory.Functor.eventualRange\">eventualRange</a></span> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L264-L268","name":"SimpleGraph.end_hom_mk_of_mk","line":264,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.end_hom_mk_of_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.end_hom_mk_of_mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">end_hom_mk_of_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor\">componentComplFunctor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">j</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sec</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.end\">end</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">L</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">K</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vnL</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">L</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">vnL</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L260-L262","name":"SimpleGraph.end","line":260,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.end","doc":"The end of a graph, defined as the sections of the functor `component_compl_functor` . "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.end\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">end</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">((<span class=\"fn\">j</span> : <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor\">componentComplFunctor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">j</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L251-L251","name":"SimpleGraph.componentComplFunctor_obj","line":251,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor_obj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentComplFunctor_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">K</span> : <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor\">componentComplFunctor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">K</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L251-L251","name":"SimpleGraph.componentComplFunctor_map","line":251,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor_map\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentComplFunctor_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X✝</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor\">componentComplFunctor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">ComponentCompl.hom</a> <span class=\"fn\">⋯</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L248-L258","name":"SimpleGraph.componentComplFunctor","line":248,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor","doc":"The functor assigning, to a finite set in `V`, the set of connected components in its complement.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplFunctor\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentComplFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> u)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L213-L240","name":"SimpleGraph.componentCompl_finite","line":213,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentCompl_finite","doc":"For a locally finite preconnected graph, the number of components outside of any finite set\nis finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentCompl_finite\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentCompl_finite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.LocallyFinite\">LocallyFinite</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">Gpc</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Preconnected\">Preconnected</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">↑<span class=\"fn\">K</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L196-L209","name":"SimpleGraph.ComponentCompl.infinite_iff_in_all_ranges","line":196,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.infinite_iff_in_all_ranges","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.infinite_iff_in_all_ranges\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">infinite_iff_in_all_ranges</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">↑<span class=\"fn\">K</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp\">supp</a></span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Infinite\">Infinite</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\">K</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">L</span>), <span class=\"fn\">∃ (<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">↑<span class=\"fn\">L</span></span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">h</span> <span class=\"fn\">D</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L192-L194","name":"SimpleGraph.ComponentCompl.hom_infinite","line":192,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_infinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_infinite\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">hom_infinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">K</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Cinf</span> : <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Infinite\">Infinite</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">h</span> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Infinite\">Infinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L188-L190","name":"SimpleGraph.ComponentCompl.hom_mk","line":188,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">hom_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vnL</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">K</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">vnL</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L182-L186","name":"SimpleGraph.ComponentCompl.hom_trans","line":182,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_trans\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">hom_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L </span><span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">K</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">M</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">⋯</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">h'</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">h</span> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L178-L180","name":"SimpleGraph.ComponentCompl.hom_refl","line":178,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_refl\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">hom_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">⋯</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L166-L176","name":"SimpleGraph.ComponentCompl.hom_eq_iff_not_disjoint","line":166,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_eq_iff_not_disjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_eq_iff_not_disjoint\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">hom_eq_iff_not_disjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">K</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">h</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <span class=\"fn\">↑<span class=\"fn\">D</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L162-L164","name":"SimpleGraph.ComponentCompl.hom_eq_iff_le","line":162,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_eq_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom_eq_iff_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">hom_eq_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">K</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">h</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L157-L160","name":"SimpleGraph.componentComplMk_mem_hom","line":157,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk_mem_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk_mem_hom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentComplMk_mem_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vK</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">L</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">ComponentCompl.hom</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">vK</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L153-L155","name":"SimpleGraph.ComponentCompl.subset_hom","line":153,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.subset_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.subset_hom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">subset_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">K</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\">hom</a> <span class=\"fn\">h</span> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L147-L151","name":"SimpleGraph.ComponentCompl.hom","line":147,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom","doc":"If `K ⊆ L`, the components outside of `L` are all contained in a single component outside of `K`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.hom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">K</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L127-L145","name":"SimpleGraph.ComponentCompl.exists_adj_boundary_pair","line":127,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.exists_adj_boundary_pair","doc":"Assuming `G` is preconnected and `K` not empty, given any connected component `C` outside of `K`,\nthere exists a vertex `k ∈ K` adjacent to a vertex `v ∈ C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.exists_adj_boundary_pair\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">exists_adj_boundary_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Gc</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Preconnected\">Preconnected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><span class=\"fn\">K</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">ck</span> : <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\">ck</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ck</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\"><span class=\"fn\">ck</span>.1</span> <span class=\"fn\"><span class=\"fn\">ck</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L119-L125","name":"SimpleGraph.ComponentCompl.mem_of_adj","line":119,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.mem_of_adj","doc":"Any vertex adjacent to a vertex of `C` and not lying in `K` must lie in `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.mem_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">mem_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> ∉ <span class=\"fn\">K</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">c</span> <span class=\"fn\">d</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L113-L117","name":"SimpleGraph.ComponentCompl.pairwise_disjoint","line":113,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.pairwise_disjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.pairwise_disjoint\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">pairwise_disjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Pairwise\">Pairwise</a> <span class=\"fn\">fun (<span class=\"fn\">C</span> <span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <span class=\"fn\">↑<span class=\"fn\">D</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L110-L111","name":"SimpleGraph.ComponentCompl.not_mem_of_mem","line":110,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.not_mem_of_mem\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cC</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span> ∉ <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L106-L108","name":"SimpleGraph.ComponentCompl.disjoint_right","line":106,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.disjoint_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.disjoint_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">disjoint_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">K</span> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L102-L104","name":"SimpleGraph.ComponentCompl.exists_eq_mk","line":102,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.exists_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.exists_eq_mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">exists_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">v</span> : <span class=\"fn\">V</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L98-L100","name":"SimpleGraph.ComponentCompl.nonempty","line":98,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.nonempty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L95-L96","name":"SimpleGraph.ComponentCompl.coe_inj","line":95,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.coe_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.coe_inj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">coe_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">D</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L91-L93","name":"SimpleGraph.ComponentCompl.coeGraph","line":91,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.coeGraph","doc":"The induced graph on the vertices `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.coeGraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">coeGraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">↥<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L85-L89","name":"SimpleGraph.ComponentCompl.ind","line":85,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.ind\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">v</span> : <span class=\"fn\">V</span>⦄ (<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">hv</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L75-L83","name":"SimpleGraph.ComponentCompl.lift","line":75,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.lift","doc":"A `ComponentCompl` specialization of `Quot.lift`, where soundness has to be proved only\nfor adjacent vertices.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.lift\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">⦃<span class=\"fn\">v</span> : <span class=\"fn\">V</span>⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>⦄ (<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span>) (<span class=\"fn\">hw</span> : <span class=\"fn\"><span class=\"fn\">w</span> ∉ <span class=\"fn\">K</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">hv</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">hw</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L67-L71","name":"SimpleGraph.componentCompl_nonempty_of_infinite","line":67,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentCompl_nonempty_of_infinite","doc":"In an infinite graph, the set of components out of a finite set is nonempty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentCompl_nonempty_of_infinite\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentCompl_nonempty_of_infinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">↑<span class=\"fn\">K</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L61-L65","name":"SimpleGraph.componentComplMk_eq_of_adj","line":61,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk_eq_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk_eq_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentComplMk_eq_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vK</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wK</span> : <span class=\"fn\"><span class=\"fn\">w</span> ∉ <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">vK</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">wK</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L58-L59","name":"SimpleGraph.componentComplMk_mem","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk_mem\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentComplMk_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vK</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">vK</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L53-L56","name":"SimpleGraph.ComponentCompl.mem_supp_iff","line":53,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.mem_supp_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.mem_supp_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">mem_supp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">vK</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\">componentComplMk</a></span> <span class=\"fn\">vK</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L49-L51","name":"SimpleGraph.ComponentCompl.setLike","line":49,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.setLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.setLike\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">setLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/SetLike/Basic.html#SetLike\">SetLike</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span>)</span> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L46-L47","name":"SimpleGraph.ComponentCompl.supp_inj","line":46,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp_inj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">supp_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp\">supp</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">D</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp\">supp</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L38-L38","name":"SimpleGraph.ComponentCompl.supp_injective_iff","line":38,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp_injective_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp_injective_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">supp_injective_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp\">supp</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp\">supp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L38-L44","name":"SimpleGraph.ComponentCompl.supp_injective","line":38,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">supp_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp\">supp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L34-L36","name":"SimpleGraph.ComponentCompl.supp","line":34,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp","doc":"The set of vertices of `G` making up the connected component `C` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl.supp\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span>.<span class=\"name\">supp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L30-L32","name":"SimpleGraph.componentComplMk","line":30,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk","doc":"The connected component of `v` in `G.induce Kᶜ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.componentComplMk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">componentComplMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vK</span> : <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\">ComponentCompl</a></span> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Ends/Defs.lean#L24-L26","name":"SimpleGraph.ComponentCompl","line":24,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl","doc":"The components outside a given set of vertices `K` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Ends/Defs.html#SimpleGraph.ComponentCompl\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ComponentCompl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}