{"name":"Mathlib.ModelTheory.Algebra.Ring.Basic","instances":[{"typeNames":["Eq"],"name":"FirstOrder.instDecidableEqRingFunc","className":"Decidable"},{"typeNames":["FirstOrder.Language.Relations"],"name":"FirstOrder.Language.instringIsAlgebraic","className":"IsEmpty"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Ring.instZeroTermRing","className":"Zero"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Ring.instOneTermRing","className":"One"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Ring.instAddTermRing","className":"Add"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Ring.instMulTermRing","className":"Mul"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Ring.instNegTermRing","className":"Neg"},{"typeNames":["FirstOrder.Language.Symbols"],"name":"FirstOrder.Ring.instFintypeSymbolsRing","className":"Fintype"}],"imports":["Init","Mathlib.ModelTheory.Syntax","Mathlib.ModelTheory.Semantics","Mathlib.Algebra.Ring.Equiv"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L296-L318","name":"FirstOrder.Ring.compatibleRingOfRingStructure","line":296,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.compatibleRingOfRingStructure","doc":"Given a Type `R` with a `Language.ring.Structure R`, the instance given by\n`addOfRingStructure` etc are compatible with the `Language.ring.Structure` instance on `R`.\n\nThis definition is only to be used when `addOfRingStructure`, `mulOfRingStructure` etc\nare local instances.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.compatibleRingOfRingStructure\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">compatibleRingOfRingStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L286-L291","name":"FirstOrder.Ring.oneOfRingStructure","line":286,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.oneOfRingStructure","doc":"A def to put an `One` instance on a type with a `Language.ring.Structure` instance.\n\nTo be used sparingly, usually only when defining a more useful definition like,\n`[Language.ring.Structure K] -> [Theory.field.Model K] -> Field K` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.oneOfRingStructure\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">oneOfRingStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L279-L284","name":"FirstOrder.Ring.zeroOfRingStructure","line":279,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zeroOfRingStructure","doc":"A def to put an `Zero` instance on a type with a `Language.ring.Structure` instance.\n\nTo be used sparingly, usually only when defining a more useful definition like,\n`[Language.ring.Structure K] -> [Theory.field.Model K] -> Field K` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zeroOfRingStructure\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">zeroOfRingStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L272-L277","name":"FirstOrder.Ring.negOfRingStructure","line":272,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.negOfRingStructure","doc":"A def to put an `Neg` instance on a type with a `Language.ring.Structure` instance.\n\nTo be used sparingly, usually only when defining a more useful definition like,\n`[Language.ring.Structure K] -> [Theory.field.Model K] -> Field K` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.negOfRingStructure\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">negOfRingStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L265-L270","name":"FirstOrder.Ring.mulOfRingStructure","line":265,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mulOfRingStructure","doc":"A def to put an `Mul` instance on a type with a `Language.ring.Structure` instance.\n\nTo be used sparingly, usually only when defining a more useful definition like,\n`[Language.ring.Structure K] -> [Theory.field.Model K] -> Field K` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mulOfRingStructure\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">mulOfRingStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L258-L263","name":"FirstOrder.Ring.addOfRingStructure","line":258,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.addOfRingStructure","doc":"A def to put an `Add` instance on a type with a `Language.ring.Structure` instance.\n\nTo be used sparingly, usually only when defining a more useful definition like,\n`[Language.ring.Structure K] -> [Theory.field.Model K] -> Field K` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.addOfRingStructure\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">addOfRingStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L235-L254","name":"FirstOrder.Ring.languageEquivEquivRingEquiv","line":235,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.languageEquivEquivRingEquiv","doc":"An isomorphism in the language of rings is a ring isomorphism "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.languageEquivEquivRingEquiv\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">languageEquivEquivRingEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonAssocRing\">NonAssocRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonAssocRing\">NonAssocRing</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Equiv\">Equiv</a></span> <span class=\"fn\">R</span> <span class=\"fn\">S</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Equiv.html#RingEquiv\">≃+*</a> <span class=\"fn\">S</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L205-L233","name":"FirstOrder.Ring.compatibleRingOfRing","line":205,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.compatibleRingOfRing","doc":"Given a Type `R` with instances for each of the `Ring` operations, make a\n`Language.ring.Structure R` instance, along with a proof that the operations given\nby the `Language.ring.Structure` are the same as those given by the `Add` or `Mul` etc.\ninstances.\n\nThis definition can be used when applying a theorem about the model theory of rings\nto a literal ring `R`, by writing `let _ := compatibleRingOfRing R`. After this, if,\nfor example, `R` is a field, then Lean will be able to find the instance for\n`Theory.field.Model R`, and it will be possible to apply theorems about the model theory\nof fields.\n\nThis is a `def` and not an `instance`, because the path\n`Ring` => `Language.ring.Structure` => `Ring` cannot be made to\ncommute by definition\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.compatibleRingOfRing\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">compatibleRingOfRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L199-L201","name":"FirstOrder.Ring.realize_one","line":199,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_one\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">realize_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L195-L197","name":"FirstOrder.Ring.realize_zero","line":195,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_zero\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">realize_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L190-L193","name":"FirstOrder.Ring.realize_neg","line":190,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_neg\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">realize_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L185-L188","name":"FirstOrder.Ring.realize_mul","line":185,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_mul\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">realize_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L180-L183","name":"FirstOrder.Ring.realize_add","line":180,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.realize_add\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">realize_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Language.Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L170-L170","name":"FirstOrder.Ring.CompatibleRing.funMap_one","line":170,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_one","doc":"The constant `1` in the `Language.ring.Structure` is the same as the constant given by the\n`One` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_one\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">CompatibleRing</span>.<span class=\"name\">funMap_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝⁴</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.oneFunc\">oneFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L167-L167","name":"FirstOrder.Ring.CompatibleRing.funMap_zero","line":167,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_zero","doc":"The constant `0` in the `Language.ring.Structure` is the same as the constant given by the\n`Zero` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_zero\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">CompatibleRing</span>.<span class=\"name\">funMap_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝⁴</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zeroFunc\">zeroFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L164-L164","name":"FirstOrder.Ring.CompatibleRing.funMap_neg","line":164,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_neg","doc":"Negation in the `Language.ring.Structure` is the same as the negation given by the\n`Neg` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_neg\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">CompatibleRing</span>.<span class=\"name\">funMap_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝⁴</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.negFunc\">negFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L161-L161","name":"FirstOrder.Ring.CompatibleRing.funMap_mul","line":161,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_mul","doc":"Multiplication in the `Language.ring.Structure` is the same as the multiplication given by the\n`Mul` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_mul\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">CompatibleRing</span>.<span class=\"name\">funMap_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝⁴</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mulFunc\">mulFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L158-L158","name":"FirstOrder.Ring.CompatibleRing.funMap_add","line":158,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_add","doc":"Addition in the `Language.ring.Structure` is the same as the addition given by the\n`Add` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.funMap_add\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">CompatibleRing</span>.<span class=\"name\">funMap_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝⁴</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.addFunc\">addFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L154-L154","name":"FirstOrder.Ring.CompatibleRing.mk","line":154,"kind":"ctor","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.mk\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">CompatibleRing</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toStructure</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funMap_add</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">R</span></span>), <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.addFunc\">addFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funMap_mul</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">R</span></span>), <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mulFunc\">mulFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funMap_neg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span> → <span class=\"fn\">R</span></span>), <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.negFunc\">negFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funMap_zero</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">R</span></span>), <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zeroFunc\">zeroFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funMap_one</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">R</span></span>), <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Language.Structure.funMap</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.oneFunc\">oneFunc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L154-L170","name":"FirstOrder.Ring.CompatibleRing.toStructure","line":154,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.toStructure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing.toStructure\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">CompatibleRing</span>.<span class=\"name\">toStructure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝⁴</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\">CompatibleRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L145-L170","name":"FirstOrder.Ring.CompatibleRing","line":145,"kind":"class","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing","doc":"A Type `R` is a `CompatibleRing` if it is a structure for the language of rings and this\nstructure is the same as the structure already given on `R` by the classes `Add`, `Mul` etc.\n\nIt is recommended to use this type class as a hypothesis to any theorem whose statement\nrequires a type to have be both a `Ring` (or `Field` etc.) and a\n`Language.ring.Structure` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.CompatibleRing\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">CompatibleRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">FirstOrder.Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">R</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L138-L141","name":"FirstOrder.Ring.card_ring","line":138,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.card_ring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.card_ring\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">card_ring</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">5</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L124-L136","name":"FirstOrder.Ring.instFintypeSymbolsRing","line":124,"kind":"instance","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instFintypeSymbolsRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instFintypeSymbolsRing\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">instFintypeSymbolsRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Symbols\">Symbols</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L121-L122","name":"FirstOrder.Ring.neg_def","line":121,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.neg_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.neg_def\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">neg_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.negFunc\">negFunc</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Functions.apply₁\">apply₁</a></span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L118-L119","name":"FirstOrder.Ring.instNegTermRing","line":118,"kind":"instance","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instNegTermRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instNegTermRing\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">instNegTermRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L115-L116","name":"FirstOrder.Ring.mul_def","line":115,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mul_def\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">mul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">t₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">t₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mulFunc\">mulFunc</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Functions.apply₂\">apply₂</a></span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L112-L113","name":"FirstOrder.Ring.instMulTermRing","line":112,"kind":"instance","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instMulTermRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instMulTermRing\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">instMulTermRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L109-L110","name":"FirstOrder.Ring.add_def","line":109,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.add_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.add_def\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">add_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">t₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">t₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.addFunc\">addFunc</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Functions.apply₂\">apply₂</a></span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L106-L107","name":"FirstOrder.Ring.instAddTermRing","line":106,"kind":"instance","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instAddTermRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instAddTermRing\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">instAddTermRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L104-L104","name":"FirstOrder.Ring.one_def","line":104,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.one_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.one_def\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">one_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Constants.term\">Language.Constants.term</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.oneFunc\">oneFunc</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L101-L102","name":"FirstOrder.Ring.instOneTermRing","line":101,"kind":"instance","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instOneTermRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instOneTermRing\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">instOneTermRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L99-L99","name":"FirstOrder.Ring.zero_def","line":99,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zero_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zero_def\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">zero_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Constants.term\">Language.Constants.term</a> <a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zeroFunc\">zeroFunc</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L96-L97","name":"FirstOrder.Ring.instZeroTermRing","line":96,"kind":"instance","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instZeroTermRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.instZeroTermRing\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">instZeroTermRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L92-L94","name":"FirstOrder.Ring.oneFunc","line":92,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.oneFunc","doc":"`RingFunc.one`, but with the defeq type `Language.ring.Functions 0` instead\nof `RingFunc 0` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.oneFunc\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">oneFunc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L88-L90","name":"FirstOrder.Ring.zeroFunc","line":88,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zeroFunc","doc":"`RingFunc.zero`, but with the defeq type `Language.ring.Functions 0` instead\nof `RingFunc 0` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.zeroFunc\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">zeroFunc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L84-L86","name":"FirstOrder.Ring.negFunc","line":84,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.negFunc","doc":"`RingFunc.neg`, but with the defeq type `Language.ring.Functions 1` instead\nof `RingFunc 1` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.negFunc\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">negFunc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L80-L82","name":"FirstOrder.Ring.mulFunc","line":80,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mulFunc","doc":"`RingFunc.mul`, but with the defeq type `Language.ring.Functions 2` instead\nof `RingFunc 2` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.mulFunc\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">mulFunc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L76-L78","name":"FirstOrder.Ring.addFunc","line":76,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.addFunc","doc":"`RingFunc.add`, but with the defeq type `Language.ring.Functions 2` instead\nof `RingFunc 2` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Ring.addFunc\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Ring</span>.<span class=\"name\">addFunc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">Language.ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L62-L62","name":"FirstOrder.Language.instringIsAlgebraic","line":62,"kind":"instance","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.instringIsAlgebraic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.instringIsAlgebraic\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">instringIsAlgebraic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\">ring</a>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.IsAlgebraic\">IsAlgebraic</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L58-L62","name":"FirstOrder.Language.ring","line":58,"kind":"def","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring","doc":"The language of rings contains the operations (+,*,-,0,1) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.Language.ring\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ring</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L56-L56","name":"FirstOrder.instDecidableEqRingFunc","line":56,"kind":"instance","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.instDecidableEqRingFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.instDecidableEqRingFunc\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">instDecidableEqRingFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc\">ringFunc</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L55-L55","name":"FirstOrder.ringFunc.one","line":55,"kind":"ctor","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.one\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">ringFunc</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc\">ringFunc</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L54-L54","name":"FirstOrder.ringFunc.zero","line":54,"kind":"ctor","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.zero\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">ringFunc</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc\">ringFunc</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L53-L53","name":"FirstOrder.ringFunc.neg","line":53,"kind":"ctor","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.neg\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">ringFunc</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc\">ringFunc</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L52-L52","name":"FirstOrder.ringFunc.mul","line":52,"kind":"ctor","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.mul\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">ringFunc</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc\">ringFunc</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L51-L51","name":"FirstOrder.ringFunc.add","line":51,"kind":"ctor","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc.add\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">ringFunc</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc\">ringFunc</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Algebra/Ring/Basic.lean#L48-L56","name":"FirstOrder.ringFunc","line":48,"kind":"inductive","docLink":"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc","doc":"The type of Ring functions, to be used in the definition of the language of rings.\nIt contains the operations (+,*,-,0,1) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Algebra/Ring/Basic.html#FirstOrder.ringFunc\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">ringFunc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>"}]}