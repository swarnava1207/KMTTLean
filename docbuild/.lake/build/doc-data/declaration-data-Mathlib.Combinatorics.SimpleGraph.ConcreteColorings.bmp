{"name":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Circulant","Mathlib.Combinatorics.SimpleGraph.Coloring","Mathlib.Combinatorics.SimpleGraph.Hasse","Mathlib.Data.Fin.Parity"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L142-L157","name":"SimpleGraph.chromaticNumber_cycleGraph_of_odd","line":142,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_cycleGraph_of_odd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_cycleGraph_of_odd\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">chromaticNumber_cycleGraph_of_odd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hOdd</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Parity.html#Odd\">Odd</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Circulant.html#SimpleGraph.cycleGraph\">cycleGraph</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.chromaticNumber\">chromaticNumber</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L114-L140","name":"SimpleGraph.cycleGraph.tricoloring","line":114,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.cycleGraph.tricoloring","doc":"Tricoloring of a cycle graph "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.cycleGraph.tricoloring\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">cycleGraph</span>.<span class=\"name\">tricoloring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Circulant.html#SimpleGraph.cycleGraph\">cycleGraph</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.Coloring\">Coloring</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L105-L112","name":"SimpleGraph.chromaticNumber_cycleGraph_of_even","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_cycleGraph_of_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_cycleGraph_of_even\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">chromaticNumber_cycleGraph_of_even</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hEven</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Circulant.html#SimpleGraph.cycleGraph\">cycleGraph</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.chromaticNumber\">chromaticNumber</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L88-L103","name":"SimpleGraph.cycleGraph.bicoloring_of_even","line":88,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.cycleGraph.bicoloring_of_even","doc":"Bicoloring of a cycle graph of even size "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.cycleGraph.bicoloring_of_even\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">cycleGraph</span>.<span class=\"name\">bicoloring_of_even</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Circulant.html#SimpleGraph.cycleGraph\">cycleGraph</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.Coloring\">Coloring</a></span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L79-L86","name":"SimpleGraph.Walk.three_le_chromaticNumber_of_odd_loop","line":79,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Walk.three_le_chromaticNumber_of_odd_loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Walk.three_le_chromaticNumber_of_odd_loop\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">three_le_chromaticNumber_of_odd_loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hOdd</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Parity.html#Odd\">Odd</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">3</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.chromaticNumber\">chromaticNumber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L73-L77","name":"SimpleGraph.Coloring.odd_length_iff_not_congr","line":73,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Coloring.odd_length_iff_not_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Coloring.odd_length_iff_not_congr\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Coloring</span>.<span class=\"name\">odd_length_iff_not_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.Coloring\">Coloring</a></span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Parity.html#Odd\">Odd</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L61-L71","name":"SimpleGraph.Coloring.even_length_iff_congr","line":61,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Coloring.even_length_iff_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.Coloring.even_length_iff_congr\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Coloring</span>.<span class=\"name\">even_length_iff_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.Coloring\">Coloring</a></span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L53-L59","name":"SimpleGraph.chromaticNumber_pathGraph","line":53,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_pathGraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_pathGraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">chromaticNumber_pathGraph</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">pathGraph</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.chromaticNumber\">chromaticNumber</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L42-L51","name":"SimpleGraph.pathGraph_two_embedding","line":42,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph_two_embedding","doc":"Embedding of `pathGraph 2` into the first two elements of `pathGraph n` for `2 ≤ n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph_two_embedding\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">pathGraph_two_embedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">pathGraph</a> <span class=\"fn\">2</span></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Embedding\">↪g</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">pathGraph</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L34-L40","name":"SimpleGraph.pathGraph.bicoloring","line":34,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph.bicoloring","doc":"Bicoloring of a path graph "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph.bicoloring\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">pathGraph</span>.<span class=\"name\">bicoloring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">pathGraph</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.Coloring\">Coloring</a></span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L26-L32","name":"SimpleGraph.two_le_chromaticNumber_of_adj","line":26,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.two_le_chromaticNumber_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.two_le_chromaticNumber_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">two_le_chromaticNumber_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.chromaticNumber\">chromaticNumber</a></span></div></div>"}]}