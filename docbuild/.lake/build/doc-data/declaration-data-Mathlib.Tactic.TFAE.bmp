{"name":"Mathlib.Tactic.TFAE","instances":[],"imports":["Init","Qq","Mathlib.Data.Nat.Notation","Mathlib.Util.AtomM","Mathlib.Data.List.TFAE","Mathlib.Tactic.ExtendDoc"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L337-L338","name":"Mathlib.Tactic.TFAE.tfaeHave'","line":337,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.tfaeHave'","doc":"\"Goal-style\" `tfae_have` syntax is deprecated. Now, `tfae_have ...` should be followedby  `:= ...`; see below for the new behavior. This warning can be turned off with `set_option Mathlib.Tactic.TFAE.useDeprecated true`.\n\n***\n\n`tfae_have` introduces hypotheses for proving goals of the form `TFAE [P₁, P₂, ...]`. Specifically,\n`tfae_have i <arrow> j := ...` introduces a hypothesis of type `Pᵢ <arrow> Pⱼ` to the local\ncontext, where `<arrow>` can be `→`, `←`, or `↔`. Note that `i` and `j` are natural number indices\n(beginning at 1) used to specify the propositions `P₁, P₂, ...` that appear in the goal.\n\n```lean4\nexample (h : P → R) : TFAE [P, Q, R] := by\n  tfae_have 1 → 3 := h\n  ...\n```\nThe resulting context now includes `tfae_1_to_3 : P → R`.\n\nOnce sufficient hypotheses have been introduced by `tfae_have`, `tfae_finish` can be used to close\nthe goal. For example,\n\n```lean4\nexample : TFAE [P, Q, R] := by\n  tfae_have 1 → 2 := sorry /- proof of P → Q -/\n  tfae_have 2 → 1 := sorry /- proof of Q → P -/\n  tfae_have 2 ↔ 3 := sorry /- proof of Q ↔ R -/\n  tfae_finish\n```\n\nAll features of `have` are supported by `tfae_have`, including naming, matching,\ndestructuring, and goal creation. These are demonstrated below.\n\n```lean4\nexample : TFAE [P, Q] := by\n  -- assert `tfae_1_to_2 : P → Q`:\n  tfae_have 1 → 2 := sorry\n\n  -- assert `hpq : P → Q`:\n  tfae_have hpq : 1 → 2 := sorry\n\n  -- match on `p : P` and prove `Q` via `f p`:\n  tfae_have 1 → 2\n  | p => f p\n\n  -- assert `pq : P → Q`, `qp : Q → P`:\n  tfae_have ⟨pq, qp⟩ : 1 ↔ 2 := sorry\n\n  -- assert `h : P → Q`; `?a` is a new goal:\n  tfae_have h : 1 → 2 := f ?a\n  ...\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.tfaeHave'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">tfaeHave'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L327-L331","name":"Mathlib.Tactic.TFAE.useDeprecated","line":327,"kind":"opaque","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.useDeprecated","doc":"Re-enables \"goal-style\" syntax for `tfae_have` when `true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.useDeprecated\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">useDeprecated</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L245-L264","name":"Mathlib.Tactic.TFAE.elabTFAEType","line":245,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.elabTFAEType","doc":"Accesses the propositions at indices `i` and `j` of `tfaeList`, and constructs the expression\n`Pi <arr> Pj`, which will be the type of our `tfae_have` hypothesis "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.elabTFAEType\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">elabTFAEType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tfaeList</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`_private.Mathlib.Tactic.TFAE.0.Mathlib.Tactic.TFAE.Parser.tfaeType</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L235-L241","name":"Mathlib.Tactic.TFAE.elabIndex","line":235,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.elabIndex","doc":"Turn syntax for a given index into a natural number, as long as it lies between `1` and\n`maxIndex`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.elabIndex\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">elabIndex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`num</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxIndex</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L224-L233","name":"Mathlib.Tactic.TFAE.mkTFAEId","line":224,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.mkTFAEId","doc":"Construct a name for a hypothesis introduced by `tfae_have`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.mkTFAEId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">mkTFAEId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`_private.Mathlib.Tactic.TFAE.0.Mathlib.Tactic.TFAE.Parser.tfaeType</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L210-L220","name":"Mathlib.Tactic.TFAE.proveTFAE","line":210,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.proveTFAE","doc":"Attempt to prove a statement of the form `TFAE [P₁, P₂, ...]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.proveTFAE\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">proveTFAE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atoms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">is</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Prop</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$l»</span>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L200-L208","name":"Mathlib.Tactic.TFAE.proveGetLastDImpl","line":200,"kind":"opaque","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.proveGetLastDImpl","doc":"Attempt to prove `getLastD l P' → P` given an explicit list `l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.proveGetLastDImpl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">proveGetLastDImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atoms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">i'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">is</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">P'</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Prop</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">«$l»</span>.<a href=\"./Init/Data/List/Basic.html#List.getLastD\">getLastD</a></span> <span class=\"fn\">«$P'»</span></span> → <span class=\"fn\">«$P»</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L187-L198","name":"Mathlib.Tactic.TFAE.proveChain","line":187,"kind":"opaque","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.proveChain","doc":"Generate a proof of `Chain (· → ·) P l`. We assume `P : Prop` and `l : List Prop`, and that `l`\nis an explicit list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.proveChain\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">proveChain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atoms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">is</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Prop</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Chain\">List.Chain</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x1</span> → <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">«$P»</span> <span class=\"fn\">«$l»</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L179-L185","name":"Mathlib.Tactic.TFAE.proveImpl","line":179,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.proveImpl","doc":"Prove an implication via depth-first traversal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.proveImpl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">proveImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atoms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">P'</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$P»</span> → <span class=\"fn\">«$P'»</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L166-L177","name":"Mathlib.Tactic.TFAE.dfs","line":166,"kind":"opaque","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.dfs","doc":"Uses depth-first search to find a path from `P` to `P'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.dfs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">dfs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atoms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">P'</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> : <span class=\"fn\">Q(<span class=\"fn\">«$P»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\">«$P'»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L156-L160","name":"Mathlib.Tactic.TFAE.getTFAEList.getExplicitList","line":156,"kind":"opaque","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.getTFAEList.getExplicitList","doc":"Convert an expression representing an explicit list into a list of expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.getTFAEList.getExplicitList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">getTFAEList</span>.<span class=\"name\">getExplicitList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Prop</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L146-L160","name":"Mathlib.Tactic.TFAE.getTFAEList","line":146,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.getTFAEList","doc":"Extract a list of `Prop` expressions from an expression of the form `TFAE [P₁, P₂, ...]` as\nlong as `[P₁, P₂, ...]` is an explicit list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.getTFAEList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">getTFAEList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">Prop</a></span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L124-L139","name":"Mathlib.Tactic.TFAE.tfaeFinish","line":124,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.tfaeFinish","doc":"`tfae_finish` is used to close goals of the form `TFAE [P₁, P₂, ...]` once a sufficient collection\nof hypotheses of the form `Pᵢ → Pⱼ` or `Pᵢ ↔ Pⱼ` have been introduced to the local context.\n\n`tfae_have` can be used to conveniently introduce these hypotheses; see `tfae_have`.\n\nExample:\n```lean4\nexample : TFAE [P, Q, R] := by\n  tfae_have 1 → 2 := sorry /- proof of P → Q -/\n  tfae_have 2 → 1 := sorry /- proof of Q → P -/\n  tfae_have 2 ↔ 3 := sorry /- proof of Q ↔ R -/\n  tfae_finish\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.tfaeFinish\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">tfaeFinish</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/TFAE.lean#L75-L122","name":"Mathlib.Tactic.TFAE.tfaeHave","line":75,"kind":"def","docLink":"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.tfaeHave","doc":"`tfae_have` introduces hypotheses for proving goals of the form `TFAE [P₁, P₂, ...]`. Specifically,\n`tfae_have i <arrow> j := ...` introduces a hypothesis of type `Pᵢ <arrow> Pⱼ` to the local\ncontext, where `<arrow>` can be `→`, `←`, or `↔`. Note that `i` and `j` are natural number indices\n(beginning at 1) used to specify the propositions `P₁, P₂, ...` that appear in the goal.\n\n```lean4\nexample (h : P → R) : TFAE [P, Q, R] := by\n  tfae_have 1 → 3 := h\n  ...\n```\nThe resulting context now includes `tfae_1_to_3 : P → R`.\n\nOnce sufficient hypotheses have been introduced by `tfae_have`, `tfae_finish` can be used to close\nthe goal. For example,\n\n```lean4\nexample : TFAE [P, Q, R] := by\n  tfae_have 1 → 2 := sorry /- proof of P → Q -/\n  tfae_have 2 → 1 := sorry /- proof of Q → P -/\n  tfae_have 2 ↔ 3 := sorry /- proof of Q ↔ R -/\n  tfae_finish\n```\n\nAll features of `have` are supported by `tfae_have`, including naming, matching,\ndestructuring, and goal creation. These are demonstrated below.\n\n```lean4\nexample : TFAE [P, Q] := by\n  -- assert `tfae_1_to_2 : P → Q`:\n  tfae_have 1 → 2 := sorry\n\n  -- assert `hpq : P → Q`:\n  tfae_have hpq : 1 → 2 := sorry\n\n  -- match on `p : P` and prove `Q` via `f p`:\n  tfae_have 1 → 2\n  | p => f p\n\n  -- assert `pq : P → Q`, `qp : Q → P`:\n  tfae_have ⟨pq, qp⟩ : 1 ↔ 2 := sorry\n\n  -- assert `h : P → Q`; `?a` is a new goal:\n  tfae_have h : 1 → 2 := f ?a\n  ...\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TFAE.html#Mathlib.Tactic.TFAE.tfaeHave\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TFAE</span>.<span class=\"name\">tfaeHave</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}