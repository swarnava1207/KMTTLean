{"name":"Mathlib.Analysis.Fourier.FiniteAbelian.PontryaginDuality","instances":[],"imports":["Init","Mathlib.Algebra.DirectSum.AddChar","Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","Mathlib.Analysis.SpecialFunctions.Complex.Circle","Mathlib.GroupTheory.FiniteAbelian.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L203-L204","name":"AddChar.expect_apply_ne_zero_iff_eq_zero","line":203,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.expect_apply_ne_zero_iff_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.expect_apply_ne_zero_iff_eq_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">expect_apply_ne_zero_iff_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a>.<a href=\"./Mathlib/Algebra/BigOperators/Expect.html#Finset.expect\">expect</a></span> <span class=\"fn\">fun (<span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L198-L201","name":"AddChar.expect_apply_eq_zero_iff_ne_zero","line":198,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.expect_apply_eq_zero_iff_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.expect_apply_eq_zero_iff_ne_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">expect_apply_eq_zero_iff_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a>.<a href=\"./Mathlib/Algebra/BigOperators/Expect.html#Finset.expect\">expect</a></span> <span class=\"fn\">fun (<span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L195-L196","name":"AddChar.sum_apply_ne_zero_iff_eq_zero","line":195,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.sum_apply_ne_zero_iff_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.sum_apply_ne_zero_iff_eq_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">sum_apply_ne_zero_iff_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∑ <span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>, <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L189-L193","name":"AddChar.sum_apply_eq_zero_iff_ne_zero","line":189,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.sum_apply_eq_zero_iff_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.sum_apply_eq_zero_iff_ne_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">sum_apply_eq_zero_iff_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∑ <span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>, <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L185-L187","name":"AddChar.expect_apply_eq_ite","line":185,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.expect_apply_eq_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.expect_apply_eq_ite\"><span class=\"name\">AddChar</span>.<span class=\"name\">expect_apply_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a>.<a href=\"./Mathlib/Algebra/BigOperators/Expect.html#Finset.expect\">expect</a></span> <span class=\"fn\">fun (<span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L181-L183","name":"AddChar.sum_apply_eq_ite","line":181,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.sum_apply_eq_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.sum_apply_eq_ite\"><span class=\"name\">AddChar</span>.<span class=\"name\">sum_apply_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∑ <span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>, <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L176-L177","name":"AddChar.doubleDualEquiv_symm_doubleDualEmb_apply","line":176,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEquiv_symm_doubleDualEmb_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEquiv_symm_doubleDualEmb_apply\"><span class=\"name\">AddChar</span>.<span class=\"name\">doubleDualEquiv_symm_doubleDualEmb_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEquiv\">doubleDualEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L172-L174","name":"AddChar.doubleDualEmb_doubleDualEquiv_symm_apply","line":172,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_doubleDualEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_doubleDualEquiv_symm_apply\"><span class=\"name\">AddChar</span>.<span class=\"name\">doubleDualEmb_doubleDualEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEquiv\">doubleDualEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L169-L170","name":"AddChar.coe_doubleDualEquiv","line":169,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.coe_doubleDualEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.coe_doubleDualEquiv\"><span class=\"name\">AddChar</span>.<span class=\"name\">coe_doubleDualEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEquiv\">doubleDualEquiv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L166-L167","name":"AddChar.doubleDualEquiv","line":166,"kind":"def","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEquiv","doc":"The double dual isomorphism of a finite abelian group. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEquiv\"><span class=\"name\">AddChar</span>.<span class=\"name\">doubleDualEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L163-L164","name":"AddChar.doubleDualEmb_ne_zero","line":163,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_ne_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">doubleDualEmb_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L160-L161","name":"AddChar.doubleDualEmb_eq_zero","line":160,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_eq_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">doubleDualEmb_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L156-L158","name":"AddChar.doubleDualEmb_inj","line":156,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_inj\"><span class=\"name\">AddChar</span>.<span class=\"name\">doubleDualEmb_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L151-L154","name":"AddChar.doubleDualEmb_bijective","line":151,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_bijective\"><span class=\"name\">AddChar</span>.<span class=\"name\">doubleDualEmb_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L147-L149","name":"AddChar.doubleDualEmb_injective","line":147,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.doubleDualEmb_injective\"><span class=\"name\">AddChar</span>.<span class=\"name\">doubleDualEmb_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar.doubleDualEmb\">doubleDualEmb</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L144-L145","name":"AddChar.forall_apply_eq_zero","line":144,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.forall_apply_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.forall_apply_eq_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">forall_apply_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>), <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L131-L142","name":"AddChar.exists_apply_ne_zero","line":131,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.exists_apply_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.exists_apply_ne_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">exists_apply_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∃ (<span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>), <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L128-L129","name":"AddChar.complexBasis_apply","line":128,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.complexBasis_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.complexBasis_apply\"><span class=\"name\">AddChar</span>.<span class=\"name\">complexBasis_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ψ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.complexBasis\">complexBasis</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">ψ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">ψ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L122-L124","name":"AddChar.coe_complexBasis","line":122,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.coe_complexBasis","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.coe_complexBasis\"><span class=\"name\">AddChar</span>.<span class=\"name\">coe_complexBasis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.complexBasis\">complexBasis</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/FunLike/Basic.html#DFunLike.coe\">DFunLike.coe</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L117-L120","name":"AddChar.complexBasis","line":117,"kind":"def","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.complexBasis","doc":"Complex-valued characters of a finite abelian group `α` form a basis of `α → ℂ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.complexBasis\"><span class=\"name\">AddChar</span>.<span class=\"name\">complexBasis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis/Defs.html#Basis\">Basis</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L111-L112","name":"AddChar.zmodAddEquiv_apply","line":111,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmodAddEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmodAddEquiv_apply\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmodAddEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmodAddEquiv\">zmodAddEquiv</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.circleEquivComplex\">circleEquivComplex</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L104-L109","name":"AddChar.zmodAddEquiv","line":104,"kind":"def","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmodAddEquiv","doc":"`ZMod n` is (noncanonically) isomorphic to its group of characters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmodAddEquiv\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmodAddEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L94-L102","name":"AddChar.card_eq","line":94,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.card_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.card_eq\"><span class=\"name\">AddChar</span>.<span class=\"name\">card_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L82-L92","name":"AddChar.circleEquivComplex","line":82,"kind":"def","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.circleEquivComplex","doc":"The circle-valued characters of a finite abelian group are the same as its complex-valued\ncharacters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.circleEquivComplex\"><span class=\"name\">AddChar</span>.<span class=\"name\">circleEquivComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Analysis/Complex/Circle.html#Circle\">Circle</a></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L67-L71","name":"AddChar.zmodHom","line":67,"kind":"def","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmodHom","doc":"`AddChar.zmod` bundled as an `AddChar`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmodHom\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmodHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span> <a href=\"./Mathlib/Analysis/Complex/Circle.html#Circle\">Circle</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L65-L65","name":"AddChar.zmod_inj","line":65,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_inj\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmod_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L57-L63","name":"AddChar.zmod_injective","line":57,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_injective\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmod_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L54-L55","name":"AddChar.zmod_add","line":54,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_add\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmod_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L49-L50","name":"AddChar.zmod_zero","line":49,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_zero\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmod_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L45-L47","name":"AddChar.zmod_intCast","line":45,"kind":"theorem","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_intCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod_intCast\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmod_intCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\">zmod</a> <span class=\"fn\">n</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Circle.html#Circle.exp\">Circle.exp</a> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/SpecialFunctions/Trigonometric/Basic.html#Real.pi\">Real.pi</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.lean#L39-L43","name":"AddChar.zmod","line":39,"kind":"def","docLink":"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod","doc":"Indexing of the complex characters of `ZMod n`. `AddChar.zmod n x` is the character sending `y`\nto `e ^ (2 * π * i * x * y / n)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Fourier/FiniteAbelian/PontryaginDuality.html#AddChar.zmod\"><span class=\"name\">AddChar</span>.<span class=\"name\">zmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/AddChar.html#AddChar\">AddChar</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span> <a href=\"./Mathlib/Analysis/Complex/Circle.html#Circle\">Circle</a></span></div></div>"}]}