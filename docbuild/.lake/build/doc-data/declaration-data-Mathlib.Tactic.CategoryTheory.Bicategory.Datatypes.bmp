{"name":"Mathlib.Tactic.CategoryTheory.Bicategory.Datatypes","instances":[{"typeNames":["Mathlib.Tactic.Bicategory.Context"],"name":"Mathlib.Tactic.Bicategory.instContextContext","className":"Mathlib.Tactic.BicategoryLike.Context"},{"typeNames":["Mathlib.Tactic.Bicategory.BicategoryM"],"name":"Mathlib.Tactic.Bicategory.instMonadMor₁BicategoryM","className":"Mathlib.Tactic.BicategoryLike.MonadMor₁"},{"typeNames":["Mathlib.Tactic.Bicategory.BicategoryM"],"name":"Mathlib.Tactic.Bicategory.instMonadMor₂IsoBicategoryM","className":"Mathlib.Tactic.BicategoryLike.MonadMor₂Iso"},{"typeNames":["Mathlib.Tactic.Bicategory.BicategoryM"],"name":"Mathlib.Tactic.Bicategory.instMonadMor₂BicategoryM","className":"Mathlib.Tactic.BicategoryLike.MonadMor₂"},{"typeNames":["Mathlib.Tactic.Bicategory.BicategoryM"],"name":"Mathlib.Tactic.Bicategory.instMkMor₁BicategoryM","className":"Mathlib.Tactic.BicategoryLike.MkMor₁"},{"typeNames":["Mathlib.Tactic.Bicategory.BicategoryM"],"name":"Mathlib.Tactic.Bicategory.instMkMor₂BicategoryM","className":"Mathlib.Tactic.BicategoryLike.MkMor₂"},{"typeNames":["Mathlib.Tactic.Bicategory.BicategoryM"],"name":"Mathlib.Tactic.Bicategory.instMonadCoherehnceHomBicategoryM","className":"Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom"}],"imports":["Init","Mathlib.Tactic.CategoryTheory.Coherence.Datatypes","Mathlib.Tactic.CategoryTheory.BicategoricalComp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L508-L509","name":"Mathlib.Tactic.Bicategory.instMonadCoherehnceHomBicategoryM","line":508,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMonadCoherehnceHomBicategoryM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMonadCoherehnceHomBicategoryM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">instMonadCoherehnceHomBicategoryM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom\">BicategoryLike.MonadCoherehnceHom</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L505-L506","name":"Mathlib.Tactic.Bicategory.instMkMor₂BicategoryM","line":505,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMkMor₂BicategoryM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMkMor₂BicategoryM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">instMkMor₂BicategoryM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MkMor₂\">BicategoryLike.MkMor₂</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L483-L503","name":"Mathlib.Tactic.Bicategory.Mor₂OfExpr","line":483,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Mor₂OfExpr","doc":"Construct a `Mor₂` term from a Lean expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Mor₂OfExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Mor₂OfExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">BicategoryLike.Mor₂</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L455-L480","name":"Mathlib.Tactic.Bicategory.Mor₂IsoOfExpr","line":455,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Mor₂IsoOfExpr","doc":"Construct a `Mor₂Iso` term from a Lean expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Mor₂IsoOfExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Mor₂IsoOfExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">BicategoryLike.Mor₂Iso</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L452-L453","name":"Mathlib.Tactic.Bicategory.instMkMor₁BicategoryM","line":452,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMkMor₁BicategoryM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMkMor₁BicategoryM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">instMkMor₁BicategoryM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MkMor₁\">BicategoryLike.MkMor₁</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L438-L450","name":"Mathlib.Tactic.Bicategory.mor₁OfExpr","line":438,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.mor₁OfExpr","doc":"Construct a `Mor₁` expression from a Lean expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.mor₁OfExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">mor₁OfExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">BicategoryLike.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L419-L436","name":"Mathlib.Tactic.Bicategory.comp?","line":419,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.comp?","doc":"Return `(f, g)` if `e` is definitionally equal to `f ≫ g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.comp?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">comp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">BicategoryLike.Mor₁</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">BicategoryLike.Mor₁</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L409-L417","name":"Mathlib.Tactic.Bicategory.id₁?","line":409,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.id₁?","doc":"Check that `e` is definitionally equal to `𝟙 a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.id₁?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">id₁?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Obj\">BicategoryLike.Obj</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L255-L407","name":"Mathlib.Tactic.Bicategory.instMonadMor₂BicategoryM","line":255,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMonadMor₂BicategoryM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMonadMor₂BicategoryM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">instMonadMor₂BicategoryM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂\">BicategoryLike.MonadMor₂</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L137-L251","name":"Mathlib.Tactic.Bicategory.instMonadMor₂IsoBicategoryM","line":137,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMonadMor₂IsoBicategoryM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMonadMor₂IsoBicategoryM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">instMonadMor₂IsoBicategoryM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">BicategoryLike.MonadMor₂Iso</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L128-L131","name":"Mathlib.Tactic.Bicategory.StructuralOfExpr_bicategoricalComp","line":128,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.StructuralOfExpr_bicategoricalComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.StructuralOfExpr_bicategoricalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">StructuralOfExpr_bicategoricalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h </span><span class=\"fn\">i</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoricalComp.html#CategoryTheory.BicategoricalCoherence\">CategoryTheory.BicategoricalCoherence</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ'</span> : <span class=\"fn\">h</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_θ</span> : <span class=\"fn\"><span class=\"fn\">θ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/BicategoricalComp.html#CategoryTheory.bicategoricalIsoComp\">CategoryTheory.bicategoricalIsoComp</a> <span class=\"fn\">η'</span> <span class=\"fn\">θ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoricalComp.html#CategoryTheory.bicategoricalComp\">CategoryTheory.bicategoricalComp</a> <span class=\"fn\">η</span> <span class=\"fn\">θ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L123-L126","name":"Mathlib.Tactic.Bicategory.structuralIsoOfExpr_whiskerRight","line":123,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.structuralIsoOfExpr_whiskerRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.structuralIsoOfExpr_whiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">structuralIsoOfExpr_whiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerRightIso\">CategoryTheory.Bicategory.whiskerRightIso</a> <span class=\"fn\">η'</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerRight\">CategoryTheory.Bicategory.whiskerRight</a> <span class=\"fn\">η</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L118-L121","name":"Mathlib.Tactic.Bicategory.structuralIsoOfExpr_whiskerLeft","line":118,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.structuralIsoOfExpr_whiskerLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.structuralIsoOfExpr_whiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">structuralIsoOfExpr_whiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerLeftIso\">CategoryTheory.Bicategory.whiskerLeftIso</a> <span class=\"fn\">f</span> <span class=\"fn\">η'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerLeft\">CategoryTheory.Bicategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">η</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L112-L116","name":"Mathlib.Tactic.Bicategory.structuralIsoOfExpr_comp","line":112,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.structuralIsoOfExpr_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.structuralIsoOfExpr_comp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">structuralIsoOfExpr_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ'</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_θ</span> : <span class=\"fn\"><span class=\"fn\">θ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">η'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.trans\">≪≫</a> <span class=\"fn\">θ'</span>).<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">θ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L108-L110","name":"Mathlib.Tactic.Bicategory.structuralIso_inv","line":108,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.structuralIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.structuralIso_inv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">structuralIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L87-L101","name":"Mathlib.Tactic.Bicategory.instMonadMor₁BicategoryM","line":87,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMonadMor₁BicategoryM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instMonadMor₁BicategoryM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">instMonadMor₁BicategoryM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">BicategoryLike.MonadMor₁</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\">BicategoryM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L84-L85","name":"Mathlib.Tactic.Bicategory.BicategoryM","line":84,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM","doc":"The monad for the normalization of 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.BicategoryM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">BicategoryM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L81-L82","name":"Mathlib.Tactic.Bicategory.instContextContext","line":81,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instContextContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.instContextContext\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">instContextContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Context\">BicategoryLike.Context</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\">Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L62-L79","name":"Mathlib.Tactic.Bicategory.mkContext?","line":62,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.mkContext?","doc":"Populate a `context` object for evaluating `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.mkContext?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">mkContext?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\">Context</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L60-L60","name":"Mathlib.Tactic.Bicategory.Context.instBicategory","line":60,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.instBicategory","doc":"The bicategory instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.instBicategory\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Context</span>.<span class=\"name\">instBicategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">unknown_1</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L58-L58","name":"Mathlib.Tactic.Bicategory.Context.B","line":58,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.B","doc":"The expression for the underlying category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.B\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Context</span>.<span class=\"name\">B</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> udummy._uniq.3)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L56-L56","name":"Mathlib.Tactic.Bicategory.Context.level₀","line":56,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.level₀","doc":"The level for objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.level₀\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Context</span>.<span class=\"name\">level₀</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L54-L54","name":"Mathlib.Tactic.Bicategory.Context.level₁","line":54,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.level₁","doc":"The level for 1-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.level₁\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Context</span>.<span class=\"name\">level₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L52-L52","name":"Mathlib.Tactic.Bicategory.Context.level₂","line":52,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.level₂","doc":"The level for 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.level₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Context</span>.<span class=\"name\">level₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L50-L50","name":"Mathlib.Tactic.Bicategory.Context.mk","line":50,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">level₂ </span><span class=\"fn\">level₁ </span><span class=\"fn\">level₀</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> level₀)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instBicategory</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">«$B»</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L49-L60","name":"Mathlib.Tactic.Bicategory.Context","line":49,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context","doc":"The context for evaluating expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.Context\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L41-L45","name":"Mathlib.Tactic.Bicategory.tgtExprOfIso","line":41,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.tgtExprOfIso","doc":"The codomain of an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.tgtExprOfIso\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">tgtExprOfIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L35-L39","name":"Mathlib.Tactic.Bicategory.srcExprOfIso","line":35,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.srcExprOfIso","doc":"The domain of an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.srcExprOfIso\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">srcExprOfIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L29-L33","name":"Mathlib.Tactic.Bicategory.tgtExpr","line":29,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.tgtExpr","doc":"The codomain of a morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.tgtExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">tgtExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.lean#L23-L27","name":"Mathlib.Tactic.Bicategory.srcExpr","line":23,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.srcExpr","doc":"The domain of a morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Datatypes.html#Mathlib.Tactic.Bicategory.srcExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">srcExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}