{"name":"Mathlib.Data.Nat.Upto","instances":[{"typeNames":["Nat.Upto"],"name":"Nat.Upto.instLT","className":"LT"}],"imports":["Init","Mathlib.Algebra.Order.Ring.Nat","Mathlib.Algebra.Order.Sub.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Upto.lean#L62-L65","name":"Nat.Upto.succ","line":62,"kind":"def","docLink":"./Mathlib/Data/Nat/Upto.html#Nat.Upto.succ","doc":"The successor of `n` is in `Nat.Upto p` provided that `n` doesn't satisfy `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto.succ\"><span class=\"name\">Nat</span>.<span class=\"name\">Upto</span>.<span class=\"name\">succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto\">Upto</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto\">Upto</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Upto.lean#L58-L60","name":"Nat.Upto.zero","line":58,"kind":"def","docLink":"./Mathlib/Data/Nat/Upto.html#Nat.Upto.zero","doc":"Zero is always a member of `Nat.Upto p` because it has no predecessors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto.zero\"><span class=\"name\">Nat</span>.<span class=\"name\">Upto</span>.<span class=\"name\">zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto\">Upto</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Upto.lean#L47-L56","name":"Nat.Upto.wf","line":47,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Upto.html#Nat.Upto.wf","doc":"The \"greater than\" relation on `Upto p` is well founded if (and only if) there exists a value\nsatisfying `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto.wf\"><span class=\"name\">Nat</span>.<span class=\"name\">Upto</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∃ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> → <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto.GT\">Upto.GT</a> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Upto.lean#L44-L45","name":"Nat.Upto.instLT","line":44,"kind":"instance","docLink":"./Mathlib/Data/Nat/Upto.html#Nat.Upto.instLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto.instLT\"><span class=\"name\">Nat</span>.<span class=\"name\">Upto</span>.<span class=\"name\">instLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto\">Upto</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Upto.lean#L40-L42","name":"Nat.Upto.GT","line":40,"kind":"def","docLink":"./Mathlib/Data/Nat/Upto.html#Nat.Upto.GT","doc":"Lift the \"greater than\" relation on natural numbers to `Nat.Upto`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto.GT\"><span class=\"name\">Nat</span>.<span class=\"name\">Upto</span>.<span class=\"name\">GT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto\">Upto</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Upto.lean#L27-L34","name":"Nat.Upto","line":27,"kind":"def","docLink":"./Mathlib/Data/Nat/Upto.html#Nat.Upto","doc":"The subtype of natural numbers `i` which have the property that\nno `j` less than `i` satisfies `p`. This is an initial segment of the\nnatural numbers, up to and including the first value satisfying `p`.\n\nWe will be particularly interested in the case where there exists a value\nsatisfying `p`, because in this case the `>` relation is well-founded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto\"><span class=\"name\">Nat</span>.<span class=\"name\">Upto</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}