{"name":"Mathlib.Tactic.ENatToNat","instances":[],"imports":["Init","Mathlib.Data.ENat.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L77-L81","name":"Mathlib.Tactic.ENatToNat.tacticEnat_to_nat","line":77,"kind":"def","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.tacticEnat_to_nat","doc":"`enat_to_nat` shifts all `ENat`s in the context to `Nat`, rewriting propositions about them.\nA typical use case is `enat_to_nat; omega`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.tacticEnat_to_nat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">tacticEnat_to_nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L51-L73","name":"Mathlib.Tactic.ENatToNat.tacticCases_first_enat","line":51,"kind":"def","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.tacticCases_first_enat","doc":"Finds the first `ENat` in the context and applies the `cases` tactic to it.\nThen simplifies expressions involving `⊤` using the `enat_to_nat_top` simp set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.tacticCases_first_enat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">tacticCases_first_enat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L46-L46","name":"Mathlib.Tactic.ENatToNat.coe_one","line":46,"kind":"theorem","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_one\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">coe_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L44-L44","name":"Mathlib.Tactic.ENatToNat.coe_zero","line":44,"kind":"theorem","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">coe_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L41-L42","name":"Mathlib.Tactic.ENatToNat.coe_ofNat","line":41,"kind":"theorem","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_ofNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">coe_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Cast/Defs.html#Nat.AtLeastTwo\">AtLeastTwo</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L38-L39","name":"Mathlib.Tactic.ENatToNat.coe_mul","line":38,"kind":"theorem","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_mul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">coe_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L35-L36","name":"Mathlib.Tactic.ENatToNat.coe_sub","line":35,"kind":"theorem","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_sub\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">coe_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L32-L33","name":"Mathlib.Tactic.ENatToNat.coe_add","line":32,"kind":"theorem","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.coe_add\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">coe_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ENatToNat.lean#L29-L30","name":"Mathlib.Tactic.ENatToNat.not_lt_top","line":29,"kind":"theorem","docLink":"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.not_lt_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ENatToNat.html#Mathlib.Tactic.ENatToNat.not_lt_top\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ENatToNat</span>.<span class=\"name\">not_lt_top</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/ENat/Defs.html#ENat\">ℕ∞</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></div></div>"}]}