{"name":"Mathlib.Util.ParseCommand","instances":[],"imports":["Init","Lean.Elab.Command","Mathlib.Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/ParseCommand.lean#L32-L47","name":"Mathlib.GuardExceptions.parseCmd","line":32,"kind":"def","docLink":"./Mathlib/Util/ParseCommand.html#Mathlib.GuardExceptions.parseCmd","doc":"`#parse parserFnId => str` allows to capture parsing exceptions.\n`parserFnId` is the identifier of a `ParserFn` and `str` is the string that\n`parserFnId` should parse.\n\nIf the parse is successful, then the output is logged;\nif the parse is successful, then the output is captured in an exception.\n\nIn either case, `#guard_msgs` can then be used to capture the resulting parsing errors.\n\nFor instance, `#parse` can be used as follows\n```lean\n/-- error: <input>:1:3: Stacks tags must be exactly 4 characters -/\n#guard_msgs in #parse Mathlib.Stacks.stacksTagFn => \"A05\"\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/ParseCommand.html#Mathlib.GuardExceptions.parseCmd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">GuardExceptions</span>.<span class=\"name\">parseCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/ParseCommand.lean#L17-L30","name":"Mathlib.GuardExceptions.captureException","line":17,"kind":"def","docLink":"./Mathlib/Util/ParseCommand.html#Mathlib.GuardExceptions.captureException","doc":"`captureException env s input` uses the given `Environment` `env` to parse the `String` `input`\nusing the `ParserFn` `s`.\n\nThis is a variation of `Lean.Parser.runParserCategory`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/ParseCommand.html#Mathlib.GuardExceptions.captureException\"><span class=\"name\">Mathlib</span>.<span class=\"name\">GuardExceptions</span>.<span class=\"name\">captureException</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Lean.Parser.ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"}]}