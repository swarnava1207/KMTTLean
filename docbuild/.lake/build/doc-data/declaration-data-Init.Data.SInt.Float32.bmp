{"name":"Init.Data.SInt.Float32","instances":[],"imports":["Init.Data.Float32","Init.Data.SInt.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L99-L108","name":"ISize.toFloat32","line":99,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#ISize.toFloat32","doc":"Obtains a `Float32` whose value is near the given `ISize`.\n\nIt will be exactly the value of the given `ISize` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#ISize.toFloat32\"><span class=\"name\">ISize</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L89-L98","name":"Int64.toFloat32","line":89,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Int64.toFloat32","doc":"Obtains a `Float32` whose value is near the given `Int64`.\n\nIt will be exactly the value of the given `Int64` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Int64.toFloat32\"><span class=\"name\">Int64</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L79-L88","name":"Int32.toFloat32","line":79,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Int32.toFloat32","doc":"Obtains a `Float32` whose value is near the given `Int32`.\n\nIt will be exactly the value of the given `Int32` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Int32.toFloat32\"><span class=\"name\">Int32</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L73-L78","name":"Int16.toFloat32","line":73,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Int16.toFloat32","doc":"Obtains the `Float32` whose value is the same as the given `Int16`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Int16.toFloat32\"><span class=\"name\">Int16</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L67-L72","name":"Int8.toFloat32","line":67,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Int8.toFloat32","doc":"Obtains the `Float32` whose value is the same as the given `Int8`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Int8.toFloat32\"><span class=\"name\">Int8</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L55-L65","name":"Float32.toISize","line":55,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Float32.toISize","doc":"Truncates a floating-point number to the nearest word-sized signed integer, rounding towards zero.\n\nIf the `Float` is larger than the maximum value for `ISize` (including `Inf`), returns the maximum\nvalue of `ISize` (i.e. `ISize.maxValue`). If it is smaller than the minimum value for `ISize`\n(including `-Inf`), returns the minimum value of `ISize` (i.e. `ISize.minValue`). If it is `NaN`,\nreturns `0`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Float32.toISize\"><span class=\"name\">Float32</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L44-L54","name":"Float32.toInt64","line":44,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Float32.toInt64","doc":"Truncates a floating-point number to the nearest 64-bit signed integer, rounding towards zero.\n\nIf the `Float` is larger than the maximum value for `Int64` (including `Inf`), returns the maximum\nvalue of `Int64` (i.e. `Int64.maxValue`). If it is smaller than the minimum value for `Int64`\n(including `-Inf`), returns the minimum value of `Int64` (i.e. `Int64.minValue`). If it is `NaN`,\nreturns `0`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Float32.toInt64\"><span class=\"name\">Float32</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L33-L43","name":"Float32.toInt32","line":33,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Float32.toInt32","doc":"Truncates a floating-point number to the nearest 32-bit signed integer, rounding towards zero.\n\nIf the `Float` is larger than the maximum value for `Int32` (including `Inf`), returns the maximum\nvalue of `Int32` (i.e. `Int32.maxValue`). If it is smaller than the minimum value for `Int32`\n(including `-Inf`), returns the minimum value of `Int32` (i.e. `Int32.minValue`). If it is `NaN`,\nreturns `0`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Float32.toInt32\"><span class=\"name\">Float32</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L22-L32","name":"Float32.toInt16","line":22,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Float32.toInt16","doc":"Truncates a floating-point number to the nearest 16-bit signed integer, rounding towards zero.\n\nIf the `Float` is larger than the maximum value for `Int16` (including `Inf`), returns the maximum\nvalue of `Int16` (i.e. `Int16.maxValue`). If it is smaller than the minimum value for `Int16`\n(including `-Inf`), returns the minimum value of `Int16` (i.e. `Int16.minValue`). If it is `NaN`,\nreturns `0`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Float32.toInt16\"><span class=\"name\">Float32</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/SInt/Float32.lean#L12-L21","name":"Float32.toInt8","line":12,"kind":"opaque","docLink":"./Init/Data/SInt/Float32.html#Float32.toInt8","doc":"Truncates a floating-point number to the nearest 8-bit signed integer, rounding towards zero.\n\nIf the `Float` is larger than the maximum value for `Int8` (including `Inf`), returns the maximum value of\n`Int8` (i.e. `Int8.maxValue`). If it is smaller than the minimum value for `Int8` (including `-Inf`),\nreturns the minimum value of `Int8` (i.e. `Int8.minValue`). If it is `NaN`, returns `0`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Float32.html#Float32.toInt8\"><span class=\"name\">Float32</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"}]}