{"name":"Mathlib.Combinatorics.Hindman","instances":[],"imports":["Init","Mathlib.Data.Stream.Init","Mathlib.Topology.Algebra.Semigroup","Mathlib.Topology.StoneCech","Mathlib.Algebra.BigOperators.Group.Finset.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L236-L236","name":"Hindman.FS.finset_sum","line":236,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.finset_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.finset_sum\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS</span>.<span class=\"name\">finset_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">get</a></span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L236-L252","name":"Hindman.FP.finset_prod","line":236,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.finset_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.finset_prod\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP</span>.<span class=\"name\">finset_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommMonoid\">CommMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∏ <span class=\"fn\">i</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">get</a></span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L222-L222","name":"Hindman.FS.add_two","line":222,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.add_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.add_two\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS</span>.<span class=\"name\">add_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">get</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L222-L234","name":"Hindman.FP.mul_two","line":222,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.mul_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.mul_two\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP</span>.<span class=\"name\">mul_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">get</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L216-L216","name":"Hindman.FS.singleton","line":216,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.singleton\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L216-L220","name":"Hindman.FP.singleton","line":216,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.singleton\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L208-L208","name":"Hindman.FS_iter_tail_sub_FS","line":208,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS_iter_tail_sub_FS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS_iter_tail_sub_FS\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS_iter_tail_sub_FS</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L208-L214","name":"Hindman.FP_drop_subset_FP","line":208,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP_drop_subset_FP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP_drop_subset_FP\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP_drop_subset_FP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L198-L200","name":"Hindman.exists_FS_of_finite_cover","line":198,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_FS_of_finite_cover","doc":"The weak form of **Hindman's theorem**: in any finite cover\nof a nonempty additive semigroup, one of the parts contains an FS-set."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_FS_of_finite_cover\"><span class=\"name\">Hindman</span>.<span class=\"name\">exists_FS_of_finite_cover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sfin</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scov</span> : <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">c</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L196-L206","name":"Hindman.exists_FP_of_finite_cover","line":196,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_FP_of_finite_cover","doc":"The weak form of **Hindman's theorem**: in any finite cover of a nonempty semigroup, one of the\nparts contains an FP-set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_FP_of_finite_cover\"><span class=\"name\">Hindman</span>.<span class=\"name\">exists_FP_of_finite_cover</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sfin</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scov</span> : <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">c</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L187-L189","name":"Hindman.FS_partition_regular","line":187,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS_partition_regular","doc":"The strong form of **Hindman's theorem**: in any finite cover of\nan FS-set, one the parts contains an FS-set."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS_partition_regular\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS_partition_regular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sfin</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scov</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">c</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L185-L194","name":"Hindman.FP_partition_regular","line":185,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP_partition_regular","doc":"The strong form of **Hindman's theorem**: in any finite cover of an FP-set, one the parts\ncontains an FP-set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP_partition_regular\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP_partition_regular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sfin</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scov</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">c</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L148-L148","name":"Hindman.exists_FS_of_large","line":148,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_FS_of_large","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_FS_of_large\"><span class=\"name\">Hindman</span>.<span class=\"name\">exists_FS_of_large</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U_idem</span> : <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sU</span> : <span class=\"fn\">s₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s₀</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L148-L183","name":"Hindman.exists_FP_of_large","line":148,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_FP_of_large","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_FP_of_large\"><span class=\"name\">Hindman</span>.<span class=\"name\">exists_FP_of_large</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U_idem</span> : <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sU</span> : <span class=\"fn\">s₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s₀</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L118-L118","name":"Hindman.exists_idempotent_ultrafilter_le_FS","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_idempotent_ultrafilter_le_FS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_idempotent_ultrafilter_le_FS\"><span class=\"name\">Hindman</span>.<span class=\"name\">exists_idempotent_ultrafilter_le_FS</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>), <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">m</span> : <span class=\"fn\">M</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">↑<span class=\"fn\">U</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L118-L146","name":"Hindman.exists_idempotent_ultrafilter_le_FP","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_idempotent_ultrafilter_le_FP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.exists_idempotent_ultrafilter_le_FP\"><span class=\"name\">Hindman</span>.<span class=\"name\">exists_idempotent_ultrafilter_le_FP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>), <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">m</span> : <span class=\"fn\">M</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">↑<span class=\"fn\">U</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L99-L101","name":"Hindman.FS.add","line":99,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.add","doc":"If `m` and `m'` are finite sums in `M`, then so is `m + m'`, provided that `m'`\nis obtained from a subsequence of `M` starting sufficiently late."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.add\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∀ <span class=\"fn\">m'</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span></span>, <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L97-L116","name":"Hindman.FP.mul","line":97,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.mul","doc":"If `m` and `m'` are finite products in `M`, then so is `m * m'`, provided that `m'` is obtained\nfrom a subsequence of `M` starting sufficiently late. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.mul\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∀ <span class=\"fn\">m'</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span></span>, <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L95-L95","name":"Hindman.FP.cons","line":95,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.cons\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">tail</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span> (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">head</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L94-L94","name":"Hindman.FP.tail","line":94,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.tail\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">tail</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L93-L93","name":"Hindman.FP.head","line":93,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP.head\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\">FP</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">head</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L89-L95","name":"Hindman.FP","line":89,"kind":"inductive","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FP","doc":"`FP a` is the set of finite products in `a`, i.e. `m ∈ FP a` if `m` is the product of a nonempty\nsubsequence of `a`. We give a direct inductive definition instead of talking about subsequences. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FP\"><span class=\"name\">Hindman</span>.<span class=\"name\">FP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L87-L87","name":"Hindman.FS.cons","line":87,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.cons\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">tail</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span> (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">head</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L86-L86","name":"Hindman.FS.tail","line":86,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.tail\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">tail</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L85-L85","name":"Hindman.FS.head","line":85,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS.head\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\">FS</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">head</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L82-L87","name":"Hindman.FS","line":82,"kind":"inductive","docLink":"./Mathlib/Combinatorics/Hindman.html#Hindman.FS","doc":"`FS a` is the set of finite sums in `a`, i.e. `m ∈ FS a` if `m` is the sum of a nonempty\nsubsequence of `a`. We give a direct inductive definition instead of talking about subsequences. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Hindman.FS\"><span class=\"name\">Hindman</span>.<span class=\"name\">FS</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">M</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L74-L74","name":"Ultrafilter.continuous_add_left","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.continuous_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.continuous_add_left\"><span class=\"name\">Ultrafilter</span>.<span class=\"name\">continuous_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L74-L78","name":"Ultrafilter.continuous_mul_left","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.continuous_mul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.continuous_mul_left\"><span class=\"name\">Ultrafilter</span>.<span class=\"name\">continuous_mul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L62-L64","name":"Ultrafilter.addSemigroup","line":62,"kind":"def","docLink":"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.addSemigroup","doc":"Additive semigroup structure on `Ultrafilter M` induced by an additive semigroup\nstructure on `M`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.addSemigroup\"><span class=\"name\">Ultrafilter</span>.<span class=\"name\">addSemigroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L61-L69","name":"Ultrafilter.semigroup","line":61,"kind":"def","docLink":"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.semigroup","doc":"Semigroup structure on `Ultrafilter M` induced by a semigroup structure on `M`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.semigroup\"><span class=\"name\">Ultrafilter</span>.<span class=\"name\">semigroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L56-L56","name":"Ultrafilter.eventually_add","line":56,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.eventually_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.eventually_add\"><span class=\"name\">Ultrafilter</span>.<span class=\"name\">eventually_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U </span><span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">m</span> : <span class=\"fn\">M</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">↑(<span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">m</span> : <span class=\"fn\">M</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">↑<span class=\"fn\">U</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">m'</span> : <span class=\"fn\">M</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">↑<span class=\"fn\">V</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L56-L59","name":"Ultrafilter.eventually_mul","line":56,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.eventually_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.eventually_mul\"><span class=\"name\">Ultrafilter</span>.<span class=\"name\">eventually_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U </span><span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">m</span> : <span class=\"fn\">M</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">↑(<span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">V</span>)</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">m</span> : <span class=\"fn\">M</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">↑<span class=\"fn\">U</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">m'</span> : <span class=\"fn\">M</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\">↑<span class=\"fn\">V</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L48-L49","name":"Ultrafilter.add","line":48,"kind":"def","docLink":"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.add","doc":"Addition of ultrafilters given by `∀ᶠ m in U+V, p m ↔ ∀ᶠ m in U, ∀ᶠ m' in V, p (m+m')`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.add\"><span class=\"name\">Ultrafilter</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Hindman.lean#L47-L50","name":"Ultrafilter.mul","line":47,"kind":"def","docLink":"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.mul","doc":"Multiplication of ultrafilters given by `∀ᶠ m in U*V, p m ↔ ∀ᶠ m in U, ∀ᶠ m' in V, p (m*m')`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Hindman.html#Ultrafilter.mul\"><span class=\"name\">Ultrafilter</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Ultrafilter/Defs.html#Ultrafilter\">Ultrafilter</a> <span class=\"fn\">M</span>)</span></span></div></div>"}]}