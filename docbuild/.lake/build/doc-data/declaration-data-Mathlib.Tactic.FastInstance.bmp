{"name":"Mathlib.Tactic.FastInstance","instances":[],"imports":["Init","Lean.Elab.SyntheticMVars","Lean","Mathlib.Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FastInstance.lean#L120-L130","name":"Mathlib.Elab.FastInstance.elabFastInstance","line":120,"kind":"def","docLink":"./Mathlib/Tactic/FastInstance.html#Mathlib.Elab.FastInstance.elabFastInstance","doc":"`fast_instance% inst` takes an expression for a typeclass instance `inst`, and unfolds it into\nconstructor applications that leverage existing instances.\n\nFor instance, when used as\n```lean\ninstance instSemiring : Semiring X := sorry\ninstance instRing : Ring X := fast_instance% Function.Injective.ring ..\n```\nthis will define `instRing` as a nested constructor application that refers to `instSemiring`\nrather than applications of `Function.Injective.ring` or other non-canonical constructors.\nThe advantage is then that `instRing.toSemiring` unifies almost immediately with `instSemiring`,\nrather than having to break it down into smaller pieces.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FastInstance.html#Mathlib.Elab.FastInstance.elabFastInstance\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FastInstance</span>.<span class=\"name\">elabFastInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FastInstance.lean#L104-L118","name":"Mathlib.Elab.FastInstance.fastInstance","line":104,"kind":"def","docLink":"./Mathlib/Tactic/FastInstance.html#Mathlib.Elab.FastInstance.fastInstance","doc":"`fast_instance% inst` takes an expression for a typeclass instance `inst`, and unfolds it into\nconstructor applications that leverage existing instances.\n\nFor instance, when used as\n```lean\ninstance instSemiring : Semiring X := sorry\ninstance instRing : Ring X := fast_instance% Function.Injective.ring ..\n```\nthis will define `instRing` as a nested constructor application that refers to `instSemiring`\nrather than applications of `Function.Injective.ring` or other non-canonical constructors.\nThe advantage is then that `instRing.toSemiring` unifies almost immediately with `instSemiring`,\nrather than having to break it down into smaller pieces.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FastInstance.html#Mathlib.Elab.FastInstance.fastInstance\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FastInstance</span>.<span class=\"name\">fastInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}