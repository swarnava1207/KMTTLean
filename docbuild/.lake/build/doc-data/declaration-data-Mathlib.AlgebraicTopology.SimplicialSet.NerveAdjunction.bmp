{"name":"Mathlib.AlgebraicTopology.SimplicialSet.NerveAdjunction","instances":[{"typeNames":["CategoryTheory.nerve₂.seagull"],"name":"CategoryTheory.instMonoObjOppositeTruncatedOfNatNatCatTruncatedNerveFunctor₂OfOpMkSimplexCategoryLeLenMkProdSeagull","className":"CategoryTheory.Mono"},{"typeNames":["CategoryTheory.Nerve.nerveFunctor₂"],"name":"CategoryTheory.nerveFunctor₂.faithful","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["CategoryTheory.Nerve.nerveFunctor₂"],"name":"CategoryTheory.nerveFunctor₂.full","className":"CategoryTheory.Functor.Full"},{"typeNames":["CategoryTheory.Nerve.nerveFunctor₂"],"name":"CategoryTheory.nerve₂Adj.reflective","className":"CategoryTheory.Reflective"},{"typeNames":["CategoryTheory.nerveFunctor"],"name":"CategoryTheory.nerveFunctor.faithful","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["CategoryTheory.nerveFunctor"],"name":"CategoryTheory.nerveFunctor.full","className":"CategoryTheory.Functor.Full"},{"typeNames":["CategoryTheory.Adjunction.counit"],"name":"CategoryTheory.nerveAdjunction.isIso_counit","className":"CategoryTheory.IsIso"},{"typeNames":["CategoryTheory.nerveFunctor"],"name":"CategoryTheory.instReflectiveSSetCatNerveFunctor","className":"CategoryTheory.Reflective"}],"imports":["Init","Mathlib.AlgebraicTopology.SimplicialSet.HomotopyCat","Mathlib.AlgebraicTopology.SimplexCategory.MorphismProperty","Mathlib.CategoryTheory.MorphismProperty.Composition"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L517-L519","name":"CategoryTheory.instReflectiveSSetCatNerveFunctor","line":517,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.instReflectiveSSetCatNerveFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.instReflectiveSSetCatNerveFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instReflectiveSSetCatNerveFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Adjunction/Reflective.html#CategoryTheory.Reflective\">Reflective</a> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerveFunctor\">nerveFunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L512-L515","name":"CategoryTheory.nerveFunctorCompHoFunctorIso","line":512,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctorCompHoFunctorIso","doc":"The counit map of `nerveAdjunction` is an isomorphism since the nerve functor is fully\nfaithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctorCompHoFunctorIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveFunctorCompHoFunctorIso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerveFunctor\">nerveFunctor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.hoFunctor\">SSet.hoFunctor</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L509-L510","name":"CategoryTheory.nerveAdjunction.isIso_counit","line":509,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveAdjunction.isIso_counit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveAdjunction.isIso_counit\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveAdjunction</span>.<span class=\"name\">isIso_counit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">IsIso</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveAdjunction\">nerveAdjunction</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L505-L507","name":"CategoryTheory.nerveFunctor.fullyfaithful","line":505,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor.fullyfaithful","doc":"The nerve functor is both full and faithful and thus is fully faithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor.fullyfaithful\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveFunctor</span>.<span class=\"name\">fullyfaithful</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerveFunctor\">nerveFunctor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.FullyFaithful\">FullyFaithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L500-L503","name":"CategoryTheory.nerveFunctor.full","line":500,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor.full","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor.full\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveFunctor</span>.<span class=\"name\">full</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerveFunctor\">nerveFunctor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L493-L498","name":"CategoryTheory.nerveFunctor.faithful","line":493,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor.faithful","doc":"Repleteness exists for full and faithful functors but not fully faithful functors, which is\nwhy we do this inefficiently. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor.faithful\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveFunctor</span>.<span class=\"name\">faithful</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerveFunctor\">nerveFunctor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L488-L491","name":"CategoryTheory.nerveAdjunction","line":488,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveAdjunction","doc":"The adjunction between the nerve functor and the homotopy category functor is, up to\nisomorphism, the composite of the adjunctions `SSet.coskAdj 2` and `nerve₂Adj`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveAdjunction\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveAdjunction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.hoFunctor\">SSet.hoFunctor</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerveFunctor\">nerveFunctor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L483-L484","name":"CategoryTheory.nerve₂Adj.reflective","line":483,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.reflective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.reflective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">reflective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Adjunction/Reflective.html#CategoryTheory.Reflective\">Reflective</a> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L479-L481","name":"CategoryTheory.nerveFunctor₂.fullyfaithful","line":479,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor₂.fullyfaithful","doc":"The 2-truncated nerve functor is both full and faithful and thus is fully faithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor₂.fullyfaithful\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveFunctor₂</span>.<span class=\"name\">fullyfaithful</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.FullyFaithful\">FullyFaithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L414-L477","name":"CategoryTheory.nerveFunctor₂.full","line":414,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor₂.full","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor₂.full\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveFunctor₂</span>.<span class=\"name\">full</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L410-L412","name":"CategoryTheory.nerveFunctor₂.faithful","line":410,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor₂.faithful","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerveFunctor₂.faithful\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerveFunctor₂</span>.<span class=\"name\">faithful</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L351-L408","name":"CategoryTheory.nerve₂Adj","line":351,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj","doc":"The adjunction between the 2-truncated nerve functor and the 2-truncated homotopy category\nfunctor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L345-L345","name":"CategoryTheory.nerve₂Adj.unit_app","line":345,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">unit_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit\">unit</a>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.app\">unit.app</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L344-L348","name":"CategoryTheory.nerve₂Adj.unit","line":344,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit","doc":"The 2-truncated nerve adjunction unit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">unit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L333-L333","name":"CategoryTheory.nerve₂Adj.unit.naturality_assoc","line":333,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.naturality_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.naturality_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">naturality_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.app\">app</a> <span class=\"fn\">Y</span>)</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.app\">app</a> <span class=\"fn\">X</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">h</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L333-L342","name":"CategoryTheory.nerve₂Adj.unit.naturality","line":333,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.app\">app</a> <span class=\"fn\">Y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.app\">app</a> <span class=\"fn\">X</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L326-L331","name":"CategoryTheory.nerve₂Adj.unit.map_app_eq","line":326,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.map_app_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.map_app_eq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">map_app_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.app\">app</a> <span class=\"fn\">X</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj\">ReflQuiv.adj</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.unit\">unit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a>       <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.HomotopyCategory.quotientFunctor\">SSet.Truncated.HomotopyCategory.quotientFunctor</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor\">toReflPrefunctor</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L317-L324","name":"CategoryTheory.nerve₂Adj.unit.app","line":317,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.app","doc":"The components of the 2-truncated nerve adjunction unit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.unit.app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">unit</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L294-L315","name":"CategoryTheory.toNerve₂.ext","line":294,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.ext","doc":"An equality between maps into the 2-truncated nerve is detected by an equality between their\nunderlying refl prefunctors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.ext\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L274-L290","name":"CategoryTheory.oneTruncation₂_toNerve₂Mk'","line":274,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.oneTruncation₂_toNerve₂Mk'","doc":"A computation about `toNerve₂.mk'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.oneTruncation₂_toNerve₂Mk'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">oneTruncation₂_toNerve₂Mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev02₂\">SSet.Truncated.ev02₂</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk'\">toNerve₂.mk'</a> <span class=\"fn\">F</span> <span class=\"fn\">hyp</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L271-L271","name":"CategoryTheory.toNerve₂.mk'_app","line":271,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk'_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk'_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk'_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev02₂\">SSet.Truncated.ev02₂</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated\">SimplexCategory.Truncated</a> <span class=\"fn\">2</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk'\">mk'</a> <span class=\"fn\">F</span> <span class=\"fn\">hyp</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">n</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app\">mk.app</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L267-L272","name":"CategoryTheory.toNerve₂.mk'","line":267,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk'","doc":"An alternate version of `toNerve₂.mk`, which constructs a map of 2-truncated simplicial sets\n`X ⟶ nerveFunctor₂.obj (Cat.of C)` from the underlying refl prefunctor under a composition\nhypothesis, where that prefunctor the central hypothesis is conjugated by the isomorphism\n`nerve₂Adj.NatIso.app C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev02₂\">SSet.Truncated.ev02₂</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.Iso.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L251-L251","name":"CategoryTheory.toNerve₂.mk_app","line":251,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev02₂\">SSet.Truncated.ev02₂</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated\">SimplexCategory.Truncated</a> <span class=\"fn\">2</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">hyp</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">n</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app\">mk.app</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L248-L254","name":"CategoryTheory.toNerve₂.mk","line":248,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk","doc":"The morphism `X ⟶ nerveFunctor₂.obj (Cat.of C)` of 2-truncated simplicial sets that is\nconstructed from a refl prefunctor `F : SSet.oneTruncation₂.obj X ⟶ ReflQuiv.of C` assuming\n`∀ (φ : : X _⦋2⦌₂), F.map (ev02₂ φ) = F.map (ev01₂ φ) ≫ F.map (ev12₂ φ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev02₂\">SSet.Truncated.ev02₂</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L238-L246","name":"CategoryTheory.toNerve₂.mk_naturality","line":238,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality","doc":"A proof that the components defined by `toNerve₂.mk.app` are natural. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk_naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev02₂\">SSet.Truncated.ev02₂</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.naturalityProperty\">mk.naturalityProperty</a> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L213-L236","name":"CategoryTheory.toNerve₂.mk_naturality_σ1i","line":213,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality_σ1i","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality_σ1i\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk_naturality_σ1i</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev02₂\">SSet.Truncated.ev02₂</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.naturalityProperty\">mk.naturalityProperty</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.σ₂\">SSet.σ₂</a> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L164-L211","name":"CategoryTheory.toNerve₂.mk_naturality_δ1i","line":164,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality_δ1i","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality_δ1i\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk_naturality_δ1i</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev02₂\">SSet.Truncated.ev02₂</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.naturalityProperty\">mk.naturalityProperty</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.δ₂\">SSet.δ₂</a> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L154-L157","name":"CategoryTheory.toNerve₂.mk_naturality_δ0i","line":154,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality_δ0i","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality_δ0i\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk_naturality_δ0i</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.naturalityProperty\">mk.naturalityProperty</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.δ₂\">SSet.δ₂</a> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L143-L152","name":"CategoryTheory.toNerve₂.mk_naturality_σ00","line":143,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality_σ00","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk_naturality_σ00\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk_naturality_σ00</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.naturalityProperty\">mk.naturalityProperty</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.σ₂\">SSet.σ₂</a> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L135-L141","name":"CategoryTheory.ReflPrefunctor.congr_mk₁_map","line":135,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.ReflPrefunctor.congr_mk₁_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.ReflPrefunctor.congr_mk₁_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">congr_mk₁_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">y₁ </span><span class=\"fn\">x₂ </span><span class=\"fn\">y₂</span> : <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">x₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">x₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">y₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfg</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">f</span> <span class=\"fn\">hx</span> <span class=\"fn\">hy</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">ComposableArrows.mk₁</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">ComposableArrows.mk₁</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L130-L133","name":"CategoryTheory.toNerve₂.mk.naturalityProperty","line":130,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.naturalityProperty","doc":"Naturality of the components defined by `toNerve₂.mk.app` as a morphism property of\nmaps in `SimplexCategory.Truncated 2`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.naturalityProperty\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk</span>.<span class=\"name\">naturalityProperty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">MorphismProperty</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated\">SimplexCategory.Truncated</a> <span class=\"fn\">2</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L111-L128","name":"CategoryTheory.instMonoObjOppositeTruncatedOfNatNatCatTruncatedNerveFunctor₂OfOpMkSimplexCategoryLeLenMkProdSeagull","line":111,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.instMonoObjOppositeTruncatedOfNatNatCatTruncatedNerveFunctor₂OfOpMkSimplexCategoryLeLenMkProdSeagull","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.instMonoObjOppositeTruncatedOfNatNatCatTruncatedNerveFunctor₂OfOpMkSimplexCategoryLeLenMkProdSeagull\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instMonoObjOppositeTruncatedOfNatNatCatTruncatedNerveFunctor₂OfOpMkSimplexCategoryLeLenMkProdSeagull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_1, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">Mono</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂.seagull\">nerve₂.seagull</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L103-L109","name":"CategoryTheory.nerve₂.seagull","line":103,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂.seagull","doc":"This is similar to one of the famous Segal maps, except valued in a product rather than a\npullback. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂.seagull\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂</span>.<span class=\"name\">seagull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_1, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.prod\">⨯</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L100-L101","name":"CategoryTheory.toNerve₂.mk.app_two","line":100,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app_two\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk</span>.<span class=\"name\">app_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app\">app</a> <span class=\"fn\">F</span> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span> <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂\">ComposableArrows.mk₂</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev01₂\">SSet.Truncated.ev01₂</a> <span class=\"fn\">φ</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.ev12₂\">SSet.Truncated.ev12₂</a> <span class=\"fn\">φ</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L97-L98","name":"CategoryTheory.toNerve₂.mk.app_one","line":97,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app_one\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk</span>.<span class=\"name\">app_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app\">app</a> <span class=\"fn\">F</span> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">ComposableArrows.mk₁</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">{ <span class=\"fn\">edge</span> := <span class=\"fn\">f</span>, <span class=\"fn\">src_eq</span> := <span class=\"fn\">⋯</span>, <span class=\"fn\">tgt_eq</span> := <span class=\"fn\">⋯</span> }</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L95-L95","name":"CategoryTheory.toNerve₂.mk.app_zero","line":95,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app_zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk</span>.<span class=\"name\">app_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app\">app</a> <span class=\"fn\">F</span> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀\">ComposableArrows.mk₀</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L84-L93","name":"CategoryTheory.toNerve₂.mk.app","line":84,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app","doc":"Because nerves are 2-coskeletal, the components of a map of 2-truncated simplicial sets valued\nin a nerve can be recovered from the underlying ReflPrefunctor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.toNerve₂.mk.app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">toNerve₂</span>.<span class=\"name\">mk</span>.<span class=\"name\">app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.oneTruncation₂\">SSet.oneTruncation₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.of\">ReflQuiv.of</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated\">SimplexCategory.Truncated</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L74-L74","name":"CategoryTheory.nerve₂Adj.counit_app","line":74,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">counit_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit\">counit</a>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">x✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app\">counit.app</a> <span class=\"fn\">↑<span class=\"fn\">x✝</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L73-L77","name":"CategoryTheory.nerve₂Adj.counit","line":73,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit","doc":"The counit of `nerve₂Adj.` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">counit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L60-L71","name":"CategoryTheory.nerve₂Adj.counit.naturality","line":60,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.naturality","doc":"The naturality of `nerve₂Adj.counit.app`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.hoFunctor₂\">SSet.Truncated.hoFunctor₂</a>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app\">app</a> <span class=\"fn\">D</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app\">app</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L53-L58","name":"CategoryTheory.nerve₂Adj.counit.app_eq","line":53,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app_eq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">app_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.HomotopyCategory.quotientFunctor\">SSet.Truncated.HomotopyCategory.quotientFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app\">app</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Whiskering.html#CategoryTheory.whiskerRight\">whiskerRight</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">Cat.freeRefl</a>)</span> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj\">ReflQuiv.adj</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L41-L41","name":"CategoryTheory.nerve₂Adj.counit.app_obj","line":41,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">app_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.HoRel₂\">SSet.Truncated.HoRel₂</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app\">app</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj\">ReflQuiv.adj</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.freeRefl\">Cat.freeRefl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L41-L41","name":"CategoryTheory.nerve₂Adj.counit.app_map","line":41,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">app_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient\">Quotient</a> <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.HoRel₂\">SSet.Truncated.HoRel₂</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app\">app</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">hf</span>\n    <span class=\"fn\">(fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>) =&gt;\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.ReflQuiv.adj\">ReflQuiv.adj</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span>\n        <span class=\"fn\">(<a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">f</span>\n          <span class=\"fn\">(fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>.<a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.as\">as</a></span>) =&gt;\n            <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ReflQuiv.html#CategoryTheory.Cat.FreeRefl.quotientFunctor\">Cat.FreeRefl.quotientFunctor</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.OneTruncation₂.ofNerve₂.natIso\">SSet.OneTruncation₂.ofNerve₂.natIso</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">mapPath</a></span> <span class=\"fn\">f</span>)</span></span>)</span>\n          <span class=\"fn\">⋯</span>)</span></span>)</span>\n    <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.lean#L40-L51","name":"CategoryTheory.nerve₂Adj.counit.app","line":40,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app","doc":"The components of the counit of `nerve₂Adj`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/NerveAdjunction.html#CategoryTheory.nerve₂Adj.counit.app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">nerve₂Adj</span>.<span class=\"name\">counit</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">Nerve.nerveFunctor₂</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/HomotopyCat.html#SSet.Truncated.HomotopyCategory\">HomotopyCategory</a></span> <span class=\"fn\">C</span></span></div></div>"}]}