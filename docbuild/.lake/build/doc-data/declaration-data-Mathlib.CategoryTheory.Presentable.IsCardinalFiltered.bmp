{"name":"Mathlib.CategoryTheory.Presentable.IsCardinalFiltered","instances":[{"typeNames":["Ordinal.toType"],"name":"CategoryTheory.instIsCardinalFilteredToTypeOrd","className":"CategoryTheory.IsCardinalFiltered"},{"typeNames":["CategoryTheory.Under"],"name":"CategoryTheory.isCardinalFiltered_under","className":"CategoryTheory.IsCardinalFiltered"}],"imports":["Init","Mathlib.CategoryTheory.Filtered.Basic","Mathlib.CategoryTheory.Limits.Shapes.WideEqualizers","Mathlib.CategoryTheory.Comma.CardinalArrow","Mathlib.SetTheory.Cardinal.Cofinality","Mathlib.SetTheory.Cardinal.HasCardinalLT","Mathlib.SetTheory.Cardinal.Arithmetic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L179-L197","name":"CategoryTheory.isCardinalFiltered_under","line":179,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.isCardinalFiltered_under","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.isCardinalFiltered_under\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">isCardinalFiltered_under</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j₀</span> : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">Under</a> <span class=\"fn\">j₀</span>)</span> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L167-L175","name":"CategoryTheory.instIsCardinalFilteredToTypeOrd","line":167,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.instIsCardinalFilteredToTypeOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.instIsCardinalFilteredToTypeOrd\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instIsCardinalFilteredToTypeOrd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Cardinal.ord\">ord</a></span>.<a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.toType\">toType</a></span> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L155-L165","name":"CategoryTheory.isCardinalFiltered_preorder","line":155,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.isCardinalFiltered_preorder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.isCardinalFiltered_preorder\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">isCardinalFiltered_preorder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> w⦄ (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">K</span> → <span class=\"fn\">J</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">κ</span> → <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\">J</span>), <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">K</span>), <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L143-L153","name":"CategoryTheory.isCardinalFiltered_aleph0_iff","line":143,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.isCardinalFiltered_aleph0_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.isCardinalFiltered_aleph0_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">isCardinalFiltered_aleph0_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFiltered\">IsFiltered</a> <span class=\"fn\">J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L130-L139","name":"CategoryTheory.isFiltered_of_isCardinalDirected","line":130,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.isFiltered_of_isCardinalDirected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.isFiltered_of_isCardinalDirected\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">isFiltered_of_isCardinalDirected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFiltered\">IsFiltered</a> <span class=\"fn\">J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L119-L119","name":"CategoryTheory.IsCardinalFiltered.coeq_condition_assoc","line":119,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq_condition_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq_condition_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">coeq_condition_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j </span><span class=\"fn\">j'</span> : <span class=\"fn\">J</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">K</span> → (<span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j'</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">K</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">J</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq\">coeq</a> <span class=\"fn\">f</span> <span class=\"fn\">hK</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeqHom\">coeqHom</a> <span class=\"fn\">f</span> <span class=\"fn\">hK</span>)</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.toCoeq\">toCoeq</a> <span class=\"fn\">f</span> <span class=\"fn\">hK</span>)</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L119-L123","name":"CategoryTheory.IsCardinalFiltered.coeq_condition","line":119,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq_condition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq_condition\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">coeq_condition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j </span><span class=\"fn\">j'</span> : <span class=\"fn\">J</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">K</span> → (<span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j'</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">K</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeqHom\">coeqHom</a> <span class=\"fn\">f</span> <span class=\"fn\">hK</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.toCoeq\">toCoeq</a> <span class=\"fn\">f</span> <span class=\"fn\">hK</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L112-L117","name":"CategoryTheory.IsCardinalFiltered.toCoeq","line":112,"kind":"def","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.toCoeq","doc":"Given a family of maps `f : K → (j ⟶ j')` in a `κ`-filtered category `J`,\nwith `HasCardinalLT K κ`, this is a morphism `j ⟶ coeq f hK` which is equal\nto all compositions `f k ≫ coeqHom f hK` for `k : K`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.toCoeq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">toCoeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j </span><span class=\"fn\">j'</span> : <span class=\"fn\">J</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">K</span> → (<span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j'</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">K</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq\">coeq</a> <span class=\"fn\">f</span> <span class=\"fn\">hK</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L106-L110","name":"CategoryTheory.IsCardinalFiltered.coeqHom","line":106,"kind":"def","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeqHom","doc":"Given a family of maps `f : K → (j ⟶ j')` in a `κ`-filtered category `J`,\nwith `HasCardinalLT K κ`, and `k : K`, this is a choice of morphism `j' ⟶ coeq f hK`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeqHom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">coeqHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j </span><span class=\"fn\">j'</span> : <span class=\"fn\">J</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">K</span> → (<span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j'</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">K</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">j'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq\">coeq</a> <span class=\"fn\">f</span> <span class=\"fn\">hK</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L99-L104","name":"CategoryTheory.IsCardinalFiltered.coeq","line":99,"kind":"def","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq","doc":"Given a family of maps `f : K → (j ⟶ j')` in a `κ`-filtered category `J`,\nwith `HasCardinalLT K κ`, this is an object of `J` where these morphisms\nshall be equalized. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.coeq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">coeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j </span><span class=\"fn\">j'</span> : <span class=\"fn\">J</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">K</span> → (<span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j'</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">K</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">J</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L87-L91","name":"CategoryTheory.IsCardinalFiltered.toMax","line":87,"kind":"def","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.toMax","doc":"If `S : K → J` is a family of objects of cardinality `< κ` in a `κ`-filtered category,\nthis is a choice of map `S k ⟶ max S hS` for any `k : K`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.toMax\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">toMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><span class=\"fn\">K</span> → <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">K</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">k</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.max\">max</a> <span class=\"fn\">S</span> <span class=\"fn\">hS</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L81-L85","name":"CategoryTheory.IsCardinalFiltered.max","line":81,"kind":"def","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.max","doc":"If `S : K → J` is a family of objects of cardinality `< κ` in a `κ`-filtered category,\nthis is a  choice of objects in `J` which is the target of a map from any of\nthe objects `S k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.max\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><span class=\"fn\">K</span> → <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">K</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">J</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L73-L75","name":"CategoryTheory.IsCardinalFiltered.of_equivalence","line":73,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.of_equivalence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.of_equivalence\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">of_equivalence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v', u'}</a> <span class=\"fn\">J'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">J</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\">J'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J'</span> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L68-L70","name":"CategoryTheory.IsCardinalFiltered.of_le","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.of_le\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ'</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ'</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">κ'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L55-L65","name":"CategoryTheory.IsCardinalFiltered.cocone","line":55,"kind":"def","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.cocone","doc":"A choice of cocone for a functor `F : A ⥤ J` such that `HasCardinatLT (Arrow A) κ`\nwhen `J` is a `κ`-filtered category, and `Arrow A` has cardinality `< κ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.cocone\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">cocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hκ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u', v'}</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">A</span> <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">Arrow</a> <span class=\"fn\">A</span>)</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cocone\">Limits.Cocone</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L44-L48","name":"CategoryTheory.hasCardinalLT_arrow_walkingParallelFamily","line":44,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.hasCardinalLT_arrow_walkingParallelFamily","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.hasCardinalLT_arrow_walkingParallelFamily\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">hasCardinalLT_arrow_walkingParallelFamily</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hT</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">T</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hκ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">Arrow</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/WideEqualizers.html#CategoryTheory.Limits.WalkingParallelFamily\">Limits.WalkingParallelFamily</a> <span class=\"fn\">T</span>)</span>)</span> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L41-L41","name":"CategoryTheory.IsCardinalFiltered.nonempty_cocone","line":41,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.nonempty_cocone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.nonempty_cocone\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">nonempty_cocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">A</span> <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">Arrow</a> <span class=\"fn\">A</span>)</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cocone\">Limits.Cocone</a> <span class=\"fn\">F</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L39-L39","name":"CategoryTheory.IsCardinalFiltered.mk","line":39,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nonempty_cocone</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">SmallCategory</a> <span class=\"fn\">A</span></span>] (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">A</span> <span class=\"fn\">J</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow\">Arrow</a> <span class=\"fn\">A</span>)</span> <span class=\"fn\">κ</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cocone\">Limits.Cocone</a> <span class=\"fn\">F</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\">IsCardinalFiltered</a> <span class=\"fn\">J</span> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.lean#L36-L42","name":"CategoryTheory.IsCardinalFiltered","line":36,"kind":"class","docLink":"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered","doc":"A category `J` is `κ`-filtered (for a regular cardinal `κ`) if\nany functor `F : A ⥤ J` from a category `A` such that `HasCardinalLT (Arrow A) κ`\nadmits a cocone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Presentable/IsCardinalFiltered.html#CategoryTheory.IsCardinalFiltered\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCardinalFiltered</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">κ</span> : <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal\">Cardinal.{w}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\"><span class=\"fn\">κ</span>.<a href=\"./Mathlib/SetTheory/Cardinal/Regular.html#Cardinal.IsRegular\">IsRegular</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}