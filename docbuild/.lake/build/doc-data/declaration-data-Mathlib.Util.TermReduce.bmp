{"name":"Mathlib.Util.TermReduce","instances":[],"imports":["Init","Lean.Meta.Tactic.Delta","Mathlib.Lean.Expr.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/TermReduce.lean#L77-L88","name":"Mathlib.Util.TermReduce.elabReduceProj","line":77,"kind":"def","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabReduceProj","doc":"`reduceProj% t` apply `Expr.reduceProjStruct?` to all subexpressions of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabReduceProj\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">elabReduceProj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/TermReduce.lean#L74-L75","name":"Mathlib.Util.TermReduce.reduceProjStx","line":74,"kind":"def","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.reduceProjStx","doc":"`reduceProj% t` apply `Expr.reduceProjStruct?` to all subexpressions of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.reduceProjStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">reduceProjStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/TermReduce.lean#L62-L72","name":"Mathlib.Util.TermReduce.elabZeta","line":62,"kind":"def","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabZeta","doc":"`zeta% t` elaborates to a zeta and zeta-delta reduced version of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabZeta\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">elabZeta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/TermReduce.lean#L59-L60","name":"Mathlib.Util.TermReduce.zetaStx","line":59,"kind":"def","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.zetaStx","doc":"`zeta% t` elaborates to a zeta and zeta-delta reduced version of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.zetaStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">zetaStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/TermReduce.lean#L47-L57","name":"Mathlib.Util.TermReduce.elabDelta","line":47,"kind":"def","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabDelta","doc":"`delta% t` elaborates to a head-delta reduced version of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabDelta\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">elabDelta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/TermReduce.lean#L44-L45","name":"Mathlib.Util.TermReduce.deltaStx","line":44,"kind":"def","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.deltaStx","doc":"`delta% t` elaborates to a head-delta reduced version of `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.deltaStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">deltaStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/TermReduce.lean#L36-L42","name":"Mathlib.Util.TermReduce.elabBeta","line":36,"kind":"def","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabBeta","doc":"`beta% t` elaborates `t` and then if the result is in the form\n`f x1 ... xn` where `f` is a (nested) lambda expression,\nit will substitute all of its arguments by beta reduction.\nThis does not recursively do beta reduction, nor will it do\nbeta reduction of subexpressions.\n\nIn particular, `t` is elaborated, its metavariables are instantiated,\nand then `Lean.Expr.headBeta` is applied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabBeta\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">elabBeta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/TermReduce.lean#L26-L34","name":"Mathlib.Util.TermReduce.betaStx","line":26,"kind":"def","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.betaStx","doc":"`beta% t` elaborates `t` and then if the result is in the form\n`f x1 ... xn` where `f` is a (nested) lambda expression,\nit will substitute all of its arguments by beta reduction.\nThis does not recursively do beta reduction, nor will it do\nbeta reduction of subexpressions.\n\nIn particular, `t` is elaborated, its metavariables are instantiated,\nand then `Lean.Expr.headBeta` is applied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.betaStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">betaStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}