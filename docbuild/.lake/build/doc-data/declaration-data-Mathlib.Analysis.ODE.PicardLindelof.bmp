{"name":"Mathlib.Analysis.ODE.PicardLindelof","instances":[{"typeNames":["PicardLindelof"],"name":"PicardLindelof.instCoeFunForallRealForall","className":"CoeFun"},{"typeNames":["PicardLindelof"],"name":"PicardLindelof.instInhabited","className":"Inhabited"},{"typeNames":["PicardLindelof.FunSpace"],"name":"PicardLindelof.FunSpace.instCoeFunForallElemRealIccTMinTMax","className":"CoeFun"},{"typeNames":["PicardLindelof.FunSpace"],"name":"PicardLindelof.FunSpace.instInhabited","className":"Inhabited"},{"typeNames":["PicardLindelof.FunSpace"],"name":"PicardLindelof.FunSpace.instMetricSpace","className":"MetricSpace"},{"typeNames":["PicardLindelof.FunSpace"],"name":"PicardLindelof.FunSpace.instCompleteSpace","className":"CompleteSpace"}],"imports":["Init","Mathlib.Analysis.SpecialFunctions.Integrals","Mathlib.Topology.Algebra.Order.Floor","Mathlib.Topology.MetricSpace.Contracting"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L403-L409","name":"exists_forall_hasDerivAt_Ioo_eq_of_contDiff","line":403,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#exists_forall_hasDerivAt_Ioo_eq_of_contDiff","doc":"A time-independent, continuously differentiable ODE admits a solution in some open interval. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#exists_forall_hasDerivAt_Ioo_eq_of_contDiff\"><span class=\"name\">exists_forall_hasDerivAt_Ioo_eq_of_contDiff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₀</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/ContDiff/Defs.html#ContDiff\">ContDiff</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">1</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\">E</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">t₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x₀</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∃ <span class=\"fn\">ε</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ <span class=\"fn\">t</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> (<span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ε</span>) (<span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ε</span>)</span>, <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/Deriv/Basic.html#HasDerivAt\">HasDerivAt</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>)</span> <span class=\"fn\">t</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L394-L401","name":"exists_forall_hasDerivAt_Ioo_eq_of_contDiffAt","line":394,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#exists_forall_hasDerivAt_Ioo_eq_of_contDiffAt","doc":"A time-independent, continuously differentiable ODE admits a solution in some open interval. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#exists_forall_hasDerivAt_Ioo_eq_of_contDiffAt\"><span class=\"name\">exists_forall_hasDerivAt_Ioo_eq_of_contDiffAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₀</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/ContDiff/Defs.html#ContDiffAt\">ContDiffAt</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">1</span> <span class=\"fn\">v</span> <span class=\"fn\">x₀</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\">E</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">t₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x₀</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∃ <span class=\"fn\">ε</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∀ <span class=\"fn\">t</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> (<span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ε</span>) (<span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ε</span>)</span>, <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/Deriv/Basic.html#HasDerivAt\">HasDerivAt</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>)</span> <span class=\"fn\">t</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L365-L390","name":"exists_isPicardLindelof_const_of_contDiffAt","line":365,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#exists_isPicardLindelof_const_of_contDiffAt","doc":"A time-independent, continuously differentiable ODE satisfies the hypotheses of the\nPicard-Lindelöf theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#exists_isPicardLindelof_const_of_contDiffAt\"><span class=\"name\">exists_isPicardLindelof_const_of_contDiffAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₀</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/ContDiff/Defs.html#ContDiffAt\">ContDiffAt</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">1</span> <span class=\"fn\">v</span> <span class=\"fn\">x₀</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">ε</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∃ (<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>) (<span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) (<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>), <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">v</span>)</span> (<span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ε</span>) <span class=\"fn\">t₀</span> (<span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ε</span>) <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L352-L361","name":"IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq","line":352,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq","doc":"Picard-Lindelöf (Cauchy-Lipschitz) theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">exists_forall_hasDerivWithinAt_Icc_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpl</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\">E</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">t₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x₀</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">t</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/Deriv/Basic.html#HasDerivWithinAt\">HasDerivWithinAt</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span>)</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L347-L350","name":"IsPicardLindelof.norm_le₀","line":347,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.norm_le₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.norm_le₀\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">norm_le₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpl</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">t₀</span> <span class=\"fn\">x₀</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L333-L343","name":"PicardLindelof.exists_solution","line":333,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.exists_solution","doc":"Picard-Lindelöf (Cauchy-Lipschitz) theorem. Use\n`IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq` instead for the public API. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.exists_solution\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">exists_solution</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\">E</span></span>),\n  <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">t</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span></span>, <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/Deriv/Basic.html#HasDerivWithinAt\">HasDerivWithinAt</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun\">toFun</a></span> <span class=\"fn\">t</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L327-L329","name":"PicardLindelof.exists_fixed","line":327,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.exists_fixed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.exists_fixed\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">exists_fixed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>), <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L318-L325","name":"PicardLindelof.exists_contracting_iterate","line":318,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.exists_contracting_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.exists_contracting_iterate\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">exists_contracting_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Contracting.html#ContractingWith\">ContractingWith</a> <span class=\"fn\">K</span> <a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">FunSpace.next</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">N</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L300-L312","name":"PicardLindelof.FunSpace.hasDerivWithinAt_next","line":300,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.hasDerivWithinAt_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.hasDerivWithinAt_next\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">hasDerivWithinAt_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/Deriv/Basic.html#HasDerivWithinAt\">HasDerivWithinAt</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a></span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj\">proj</a></span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun\">toFun</a></span> <span class=\"fn\">(↑<span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span> <span class=\"fn\">↑<span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L292-L296","name":"PicardLindelof.FunSpace.dist_iterate_next_le","line":292,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_iterate_next_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_iterate_next_le\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">dist_iterate_next_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">n</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a> <span class=\"fn\">f₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">n</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a> <span class=\"fn\">f₂</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.L\">L</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tDist\">tDist</a></span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Factorial/Basic.html#Nat.factorial\">factorial</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">f₁</span> <span class=\"fn\">f₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L282-L290","name":"PicardLindelof.FunSpace.dist_iterate_next_apply_le","line":282,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_iterate_next_apply_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_iterate_next_apply_le\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">dist_iterate_next_apply_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">n</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a> <span class=\"fn\">f₁</span>)</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">n</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a> <span class=\"fn\">f₂</span>)</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.L\">L</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a><span class=\"fn\">↑<span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Factorial/Basic.html#Nat.factorial\">factorial</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">f₁</span> <span class=\"fn\">f₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L261-L280","name":"PicardLindelof.FunSpace.dist_next_apply_le_of_le","line":261,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_next_apply_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_next_apply_le_of_le\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">dist_next_apply_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.L\">L</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a><span class=\"fn\">↑<span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Factorial/Basic.html#Nat.factorial\">factorial</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f₁</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a></span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f₂</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a></span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.L\">L</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a><span class=\"fn\">↑<span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>).<a href=\"./Mathlib/Data/Nat/Factorial/Basic.html#Nat.factorial\">factorial</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L258-L259","name":"PicardLindelof.FunSpace.next_apply","line":258,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next_apply\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">next_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\">next</a></span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/IntervalIntegral.html#intervalIntegral\">∫</a> (<span class=\"fn\">τ</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/MeasureTheory/Integral/IntervalIntegral.html#intervalIntegral\">in</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span><a href=\"./Mathlib/MeasureTheory/Integral/IntervalIntegral.html#intervalIntegral\">..</a><span class=\"fn\">↑<span class=\"fn\">t</span></span><a href=\"./Mathlib/MeasureTheory/Integral/IntervalIntegral.html#intervalIntegral\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp\">vComp</a></span> <span class=\"fn\">τ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L246-L256","name":"PicardLindelof.FunSpace.next","line":246,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next","doc":"The Picard-Lindelöf operator. This is a contracting map on `PicardLindelof.FunSpace v` such\nthat the fixed point of this map is the solution of the corresponding ODE.\n\nMore precisely, some iteration of this map is a contracting map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.next\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L243-L244","name":"PicardLindelof.FunSpace.intervalIntegrable_vComp","line":243,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.intervalIntegrable_vComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.intervalIntegrable_vComp\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">intervalIntegrable_vComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/IntervalIntegral.html#IntervalIntegrable\">IntervalIntegrable</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp\">vComp</a></span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">MeasureTheory.volume</a> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L234-L241","name":"PicardLindelof.FunSpace.instCompleteSpace","line":234,"kind":"instance","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.instCompleteSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.instCompleteSpace\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">instCompleteSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L229-L232","name":"PicardLindelof.FunSpace.dist_le_of_forall","line":229,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_le_of_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_le_of_forall\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">dist_le_of_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">f₁</span> <span class=\"fn\">f₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">d</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L225-L227","name":"PicardLindelof.FunSpace.dist_apply_le_dist","line":225,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_apply_le_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.dist_apply_le_dist\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">dist_apply_le_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₂</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">f₁</span> <span class=\"fn\">f₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L222-L223","name":"PicardLindelof.FunSpace.norm_vComp_le","line":222,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.norm_vComp_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.norm_vComp_le\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">norm_vComp_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp\">vComp</a></span> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C\">C</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L217-L220","name":"PicardLindelof.FunSpace.continuous_vComp","line":217,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.continuous_vComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.continuous_vComp\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">continuous_vComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp\">vComp</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L214-L215","name":"PicardLindelof.FunSpace.vComp_apply_coe","line":214,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp_apply_coe\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">vComp_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp\">vComp</a></span> <span class=\"fn\">↑<span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun\">toFun</a></span> <span class=\"fn\">(↑<span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L208-L212","name":"PicardLindelof.FunSpace.vComp","line":208,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp","doc":"Given a curve $γ \\colon [t_{\\min}, t_{\\max}] → E$, `PicardLindelof.vComp` is the function\n$F(t)=v(π t, γ(π t))$, where `π` is the projection $ℝ → [t_{\\min}, t_{\\max}]$. The integral of this\nfunction is the image of `γ` under the contracting map we are going to define below. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.vComp\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">vComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">E</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L201-L206","name":"PicardLindelof.FunSpace.mem_closedBall","line":201,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.mem_closedBall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.mem_closedBall\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">mem_closedBall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.R\">R</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L198-L199","name":"PicardLindelof.FunSpace.map_t₀","line":198,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.map_t₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.map_t₀\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">map_t₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L191-L196","name":"PicardLindelof.FunSpace.range_toContinuousMap","line":191,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.range_toContinuousMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.range_toContinuousMap\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">range_toContinuousMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toContinuousMap\">toContinuousMap</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">C(</a><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">,</a> <span class=\"fn\">E</span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">)</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C\">C</a></span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L188-L189","name":"PicardLindelof.FunSpace.uniformInducing_toContinuousMap","line":188,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.uniformInducing_toContinuousMap","doc":"**Alias** of `PicardLindelof.FunSpace.isUniformInducing_toContinuousMap`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.uniformInducing_toContinuousMap\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">uniformInducing_toContinuousMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toContinuousMap\">toContinuousMap</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L185-L186","name":"PicardLindelof.FunSpace.isUniformInducing_toContinuousMap","line":185,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.isUniformInducing_toContinuousMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.isUniformInducing_toContinuousMap\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">isUniformInducing_toContinuousMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#IsUniformInducing\">IsUniformInducing</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toContinuousMap\">toContinuousMap</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L182-L183","name":"PicardLindelof.FunSpace.instMetricSpace","line":182,"kind":"instance","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.instMetricSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.instMetricSpace\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">instMetricSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L178-L180","name":"PicardLindelof.FunSpace.toContinuousMap","line":178,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toContinuousMap","doc":"Each curve in `PicardLindelof.FunSpace` is continuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toContinuousMap\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">toContinuousMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">C(</a><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">,</a> <span class=\"fn\">E</span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L175-L176","name":"PicardLindelof.FunSpace.continuous","line":175,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.continuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.continuous\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L172-L173","name":"PicardLindelof.FunSpace.lipschitz","line":172,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.lipschitz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.lipschitz\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">lipschitz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C\">C</a></span> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L169-L170","name":"PicardLindelof.FunSpace.instInhabited","line":169,"kind":"instance","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.instInhabited\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L166-L167","name":"PicardLindelof.FunSpace.instCoeFunForallElemRealIccTMinTMax","line":166,"kind":"instance","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.instCoeFunForallElemRealIccTMinTMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.instCoeFunForallElemRealIccTMinTMax\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">instCoeFunForallElemRealIccTMinTMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span> → <span class=\"fn\">E</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L159-L159","name":"PicardLindelof.FunSpace.lipschitz'","line":159,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.lipschitz'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.lipschitz'\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">lipschitz'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C\">C</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L158-L158","name":"PicardLindelof.FunSpace.map_t₀'","line":158,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.map_t₀'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.map_t₀'\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">map_t₀'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\">toFun</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L157-L157","name":"PicardLindelof.FunSpace.toFun","line":157,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun","doc":"The particular curve represented by this object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.toFun\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span> → <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L155-L155","name":"PicardLindelof.FunSpace.mk","line":155,"kind":"ctor","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace.mk\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toFun</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_t₀'</span> : <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lipschitz'</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C\">C</a></span> <span class=\"fn\">toFun</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\">FunSpace</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L151-L159","name":"PicardLindelof.FunSpace","line":151,"kind":"structure","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace","doc":"The space of curves $γ \\colon [t_{\\min}, t_{\\max}] \\to E$ such that $γ(t₀) = x₀$ and $γ$ is\nLipschitz continuous with constant $C$. The map sending $γ$ to\n$\\mathbf Pγ(t)=x₀ + ∫_{t₀}^{t} v(τ, γ(τ))\\,dτ$ is a contracting map on this space, and its fixed\npoint is a solution of the ODE $\\dot x=v(t, x)$. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.FunSpace\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">FunSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L147-L149","name":"PicardLindelof.continuous_proj","line":147,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.continuous_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.continuous_proj\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">continuous_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj\">proj</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L144-L145","name":"PicardLindelof.proj_of_mem","line":144,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj_of_mem\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">proj_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj\">proj</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L141-L142","name":"PicardLindelof.proj_coe","line":141,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj_coe\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">proj_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj\">proj</a></span> <span class=\"fn\">↑<span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L136-L139","name":"PicardLindelof.proj","line":136,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj","doc":"Projection $ℝ → [t_{\\min}, t_{\\max}]$ sending $(-∞, t_{\\min}]$ to $t_{\\min}$ and $[t_{\\max}, ∞)$\nto $t_{\\max}$. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.proj\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L128-L134","name":"PicardLindelof.dist_t₀_le","line":128,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.dist_t₀_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.dist_t₀_le\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">dist_t₀_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">t</span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tDist\">tDist</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L125-L126","name":"PicardLindelof.tDist_nonneg","line":125,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tDist_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tDist_nonneg\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">tDist_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tDist\">tDist</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L121-L123","name":"PicardLindelof.tDist","line":121,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tDist","doc":"The maximum of distances from `t₀` to the endpoints of `[tMin, tMax]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tDist\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">tDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L117-L119","name":"PicardLindelof.norm_le","line":117,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.norm_le\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.R\">R</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun\">toFun</a></span> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C\">C</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L110-L115","name":"PicardLindelof.continuousOn","line":110,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.continuousOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.continuousOn\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">continuousOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">(<a href=\"./Init/Data/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun\">toFun</a></span>)</span> (<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span></span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.R\">R</a></span></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L106-L108","name":"PicardLindelof.lipschitzOnWith","line":106,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.lipschitzOnWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.lipschitzOnWith\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">lipschitzOnWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.L\">L</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun\">toFun</a></span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.R\">R</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L103-L104","name":"PicardLindelof.nonempty_Icc","line":103,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.nonempty_Icc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.nonempty_Icc\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">nonempty_Icc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L100-L101","name":"PicardLindelof.tMin_le_tMax","line":100,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin_le_tMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin_le_tMax\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">tMin_le_tMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L91-L98","name":"PicardLindelof.instInhabited","line":91,"kind":"instance","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.instInhabited\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L88-L89","name":"PicardLindelof.instCoeFunForallRealForall","line":88,"kind":"instance","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.instCoeFunForallRealForall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.instCoeFunForallRealForall\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">instCoeFunForallRealForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L82-L82","name":"PicardLindelof.isPicardLindelof","line":82,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.isPicardLindelof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.isPicardLindelof\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">isPicardLindelof</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun\">toFun</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\">t₀</a></span>)</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\">x₀</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.L\">L</a></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.R\">R</a></span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C\">C</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L81-L81","name":"PicardLindelof.L","line":81,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.L","doc":"Lipschitz constant of the function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.L\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L79-L79","name":"PicardLindelof.R","line":79,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.R","doc":"Radius of closed ball in `x` over which the bound `C` holds "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.R\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L77-L77","name":"PicardLindelof.C","line":77,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C","doc":"Bound of the function over the region of interest "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.C\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">C</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L75-L75","name":"PicardLindelof.x₀","line":75,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀","doc":"Initial value of `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.x₀\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">x₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">E</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L73-L73","name":"PicardLindelof.t₀","line":73,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀","doc":"Initial value of `t` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.t₀\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">t₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\">tMin</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\">tMax</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L71-L71","name":"PicardLindelof.tMax","line":71,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax","doc":"Upper limit of `t` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMax\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">tMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L69-L69","name":"PicardLindelof.tMin","line":69,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin","doc":"Lower limit of `t` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.tMin\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">tMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L67-L67","name":"PicardLindelof.toFun","line":67,"kind":"def","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun","doc":"Function of the initial value problem "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.toFun\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L65-L65","name":"PicardLindelof.mk","line":65,"kind":"ctor","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof.mk\"><span class=\"name\">PicardLindelof</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toFun</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tMin </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₀</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C </span><span class=\"fn\">R </span><span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isPicardLindelof</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">toFun</span> <span class=\"fn\">tMin</span> <span class=\"fn\">(↑<span class=\"fn\">t₀</span>)</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\">PicardLindelof</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L57-L82","name":"PicardLindelof","line":57,"kind":"structure","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof","doc":"This structure holds arguments of the Picard-Lipschitz (Cauchy-Lipschitz) theorem. It is part of\nthe internal API for convenience, so as not to constantly invoke choice. Unless you want to use one\nof the auxiliary lemmas, use `IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq` instead\nof using this structure.\n\nThe similarly named `IsPicardLindelof` is a bundled `Prop` holding the long hypotheses of the\nPicard-Lindelöf theorem as named arguments. It is used as part of the public API.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#PicardLindelof\"><span class=\"name\">PicardLindelof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L55-L55","name":"IsPicardLindelof.C_mul_le_R","line":55,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.C_mul_le_R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.C_mul_le_R\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">C_mul_le_R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> ((<span class=\"fn\">tMax</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">t₀</span>) <a href=\"./Init/Prelude.html#Max.max\">⊔</a> (<span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">tMin</span>)) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">R</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L54-L54","name":"IsPicardLindelof.norm_le","line":54,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.norm_le\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span></span> → <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x₀</span> <span class=\"fn\">R</span></span>, <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L53-L53","name":"IsPicardLindelof.cont","line":53,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.cont","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.cont\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">cont</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x₀</span> <span class=\"fn\">R</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">(fun (<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L52-L52","name":"IsPicardLindelof.lipschitz","line":52,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.lipschitz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.lipschitz\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">lipschitz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x₀</span> <span class=\"fn\">R</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L51-L51","name":"IsPicardLindelof.hR","line":51,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.hR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.hR\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">hR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">R</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L50-L50","name":"IsPicardLindelof.ht₀","line":50,"kind":"theorem","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.ht₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.ht₀\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">ht₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L48-L48","name":"IsPicardLindelof.mk","line":48,"kind":"ctor","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof.mk\"><span class=\"name\">IsPicardLindelof</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht₀</span> : <span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hR</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lipschitz</span> : <span class=\"fn\">∀ <span class=\"fn\">t</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x₀</span> <span class=\"fn\">R</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x₀</span> <span class=\"fn\">R</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">(fun (<span class=\"fn\">t</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">norm_le</span> : <span class=\"fn\">∀ <span class=\"fn\">t</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">tMin</span> <span class=\"fn\">tMax</span></span>, <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x₀</span> <span class=\"fn\">R</span></span>, <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C_mul_le_R</span> : <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> ((<span class=\"fn\">tMax</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">t₀</span>) <a href=\"./Init/Prelude.html#Max.max\">⊔</a> (<span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">tMin</span>)) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\">IsPicardLindelof</a> <span class=\"fn\">v</span> <span class=\"fn\">tMin</span> <span class=\"fn\">t₀</span> <span class=\"fn\">tMax</span> <span class=\"fn\">x₀</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/ODE/PicardLindelof.lean#L44-L55","name":"IsPicardLindelof","line":44,"kind":"structure","docLink":"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof","doc":"`Prop` structure holding the hypotheses of the Picard-Lindelöf theorem.\n\nThe similarly named `PicardLindelof` structure is part of the internal API for convenience, so as\nnot to constantly invoke choice, but is not intended for public use. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/ODE/PicardLindelof.html#IsPicardLindelof\"><span class=\"name\">IsPicardLindelof</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">E</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tMin </span><span class=\"fn\">t₀ </span><span class=\"fn\">tMax</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₀</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R </span><span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}