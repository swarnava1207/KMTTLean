{"name":"Mathlib.Tactic.Linter.Lint","instances":[],"imports":["Init","Batteries.Tactic.Lint","Mathlib.Tactic.DeclarationNames"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Lint.lean#L82-L95","name":"Mathlib.Linter.DupNamespaceLinter.dupNamespace","line":82,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.DupNamespaceLinter.dupNamespace","doc":"The `dupNamespace` linter is set on by default.  Lean emits a warning on any declaration that\ncontains the same namespace at least twice consecutively.\n\nFor instance, `Nat.Nat.foo` and `One.two.two` trigger a warning, while `Nat.One.Nat` does not.\n\n*Note.*\nThis linter will not detect duplication in namespaces of autogenerated declarations\n(other than the one whose `declId` is present in the source declaration).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.DupNamespaceLinter.dupNamespace\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DupNamespaceLinter</span>.<span class=\"name\">dupNamespace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Lint.lean#L63-L76","name":"Mathlib.Linter.linter.dupNamespace","line":63,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.dupNamespace","doc":"The `dupNamespace` linter is set on by default.  Lean emits a warning on any declaration that\ncontains the same namespace at least twice consecutively.\n\nFor instance, `Nat.Nat.foo` and `One.two.two` trigger a warning, while `Nat.One.Nat` does not.\n\n*Note.*\nThis linter will not detect duplication in namespaces of autogenerated declarations\n(other than the one whose `declId` is present in the source declaration).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Mathlib.Linter.linter.dupNamespace\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">dupNamespace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Lint.lean#L40-L48","name":"Batteries.Tactic.Lint.deprecatedNoSince","line":40,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Batteries.Tactic.Lint.deprecatedNoSince","doc":"Linter that check that all `deprecated` tags come with `since` dates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Batteries.Tactic.Lint.deprecatedNoSince\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">deprecatedNoSince</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Lint.lean#L21-L38","name":"Batteries.Tactic.Lint.structureInType","line":21,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Lint.html#Batteries.Tactic.Lint.structureInType","doc":"Linter that checks whether a structure should be in Prop.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Lint.html#Batteries.Tactic.Lint.structureInType\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">structureInType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>"}]}