{"name":"Mathlib.Data.QPF.Multivariate.Constructions.Cofix","instances":[{"typeNames":["MvQPF.Cofix"],"name":"MvQPF.instInhabitedCofixOfAP","className":"Inhabited"},{"typeNames":["MvQPF.Cofix"],"name":"MvQPF.Cofix.mvfunctor","className":"MvFunctor"},{"typeNames":["MvQPF.Cofix"],"name":"MvQPF.mvqpfCofix","className":"MvQPF"}],"imports":["Init","Mathlib.Control.Functor.Multivariate","Mathlib.Data.PFunctor.Multivariate.Basic","Mathlib.Data.PFunctor.Multivariate.M","Mathlib.Data.QPF.Multivariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L515-L520","name":"MvQPF.mvqpfCofix","line":515,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.mvqpfCofix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.mvqpfCofix\"><span class=\"name\">MvQPF</span>.<span class=\"name\">mvqpfCofix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L508-L513","name":"MvQPF.Cofix.dest_corec₁","line":508,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec₁\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_corec₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">X</span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">β</span> → <span class=\"fn\">X</span>)</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">X</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">X</span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">X</span></span>) (<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span>),\n    <span class=\"fn\"><span class=\"fn\">g</span> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f'</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">k</span>) <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">f</span> <span class=\"fn\">f'</span> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec₁\">corec₁</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec₁\">corec₁</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L490-L506","name":"MvQPF.Cofix.dest_corec'","line":490,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec'\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_corec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'\">corec'</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'\">corec'</a> <span class=\"fn\">g</span>)</span></span>) <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L482-L488","name":"MvQPF.corec_roll","line":482,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corec_roll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corec_roll\"><span class=\"name\">MvQPF</span>.<span class=\"name\">corec_roll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₀</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Y</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">X</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\">Cofix.corec</a> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">x₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\">Cofix.corec</a> (<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x₀</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L419-L420","name":"Mathlib.Tactic.MvBisim.tacticMv_bisim___With___","line":419,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#Mathlib.Tactic.MvBisim.tacticMv_bisim___With___","doc":"tactic for proof by bisimulation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#Mathlib.Tactic.MvBisim.tacticMv_bisim___With___\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MvBisim</span>.<span class=\"name\">tacticMv_bisim___With___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L398-L411","name":"MvQPF.Cofix.abs_repr","line":398,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.abs_repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.abs_repr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">abs_repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Mcongr\">Mcongr</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.repr\">repr</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L389-L392","name":"MvQPF.liftR_map_last'","line":389,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map_last'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map_last'\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftR_map_last'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#LawfulMvFunctor\">LawfulMvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">ι</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hh</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR'\">MvFunctor.LiftR'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.RelLast'\">RelLast'</a></span> <span class=\"fn\">R</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">f</span>) <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L358-L387","name":"MvQPF.liftR_map_last","line":358,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map_last\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftR_map_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">lawful</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#LawfulMvFunctor\">LawfulMvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι </span><span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">ι</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hh</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR'\">MvFunctor.LiftR'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.RelLast'\">RelLast'</a></span> <span class=\"fn\">R</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">f</span>) <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">g</span>) <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L347-L354","name":"MvQPF.liftR_map","line":347,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftR_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#LawfulMvFunctor\">LawfulMvFunctor</a> <span class=\"fn\">F'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.prod\">prod</a></span> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.repeat\">TypeVec.repeat</a> <span class=\"fn\">n</span> <a href=\"./foundational_types.html\">Prop</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Subtype_\">TypeVec.Subtype_</a> <span class=\"fn\">R</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hh</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.subtypeVal\">TypeVec.subtypeVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.prod.map\">TypeVec.prod.map</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.prod.diag\">TypeVec.prod.diag</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR'\">MvFunctor.LiftR'</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L336-L337","name":"MvQPF.Cofix.ext_mk","line":336,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.ext_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.ext_mk\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">ext_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\">mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\">mk</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L333-L334","name":"MvQPF.Cofix.ext","line":333,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.ext\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L327-L331","name":"MvQPF.Cofix.dest_mk","line":327,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_mk\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\">mk</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L308-L325","name":"MvQPF.Cofix.mk_dest","line":308,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk_dest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk_dest\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">mk_dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\">mk</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L285-L306","name":"MvQPF.Cofix.bisim'","line":285,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim'","doc":"Bisimulation principle the values `⟨a,f⟩` of the polynomial functor representing\n`Cofix F α` as well as an invariant `Q : β → Prop` and a state `β` generating the\nleft-hand side and right-hand side of the equality through functions `u v : β → Cofix F α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim'\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> →\n      <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">f₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>) (<span class=\"fn\">f₁</span> :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>),\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">u</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.appendContents\">appendContents</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">f₀</span></span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.appendContents\">appendContents</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">f₁</span></span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>             <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\">∃ (<span class=\"fn\">x'</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f₀</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x'</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L279-L283","name":"MvQPF.Cofix.bisim₂","line":279,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim₂","doc":"Bisimulation principle using `LiftR'` to match and relate children of two trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim₂\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR'\">MvFunctor.LiftR'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.RelLast'\">RelLast'</a></span> <span class=\"fn\">r</span>)</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L259-L275","name":"MvQPF.Cofix.bisim","line":259,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim","doc":"Bisimulation principle using `LiftR` to match and relate children of two trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR\">MvFunctor.LiftR</a> <span class=\"fn\">(fun {<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.RelLast\">RelLast</a></span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L234-L257","name":"MvQPF.Cofix.bisim_rel","line":234,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim_rel","doc":"Bisimulation principle using `map` and `Quot.mk` to match and relate children of two trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim_rel\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">r</span></span>) <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">r</span></span>) <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L171-L173","name":"MvQPF.Cofix.mk","line":171,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk","doc":"constructor for `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L163-L169","name":"MvQPF.Cofix.dest_corec","line":163,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\">corec</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\">corec</a> <span class=\"fn\">g</span></span>) <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L157-L161","name":"MvQPF.Cofix.corec₁","line":157,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec₁","doc":"Corecursor for `Cofix F`. The shape allows recursive calls to\nlook like recursive calls. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec₁\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">X</span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">β</span> → <span class=\"fn\">X</span>)</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">X</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L150-L155","name":"MvQPF.Cofix.corec'","line":150,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'","doc":"More flexible corecursor for `Cofix F`. Allows the return of a fully formed\nvalue instead of making a recursive call "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L145-L148","name":"MvQPF.Cofix.corec'₁","line":145,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'₁","doc":"Corecursor for `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'₁\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec'₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">β</span> → <span class=\"fn\">X</span>)</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">X</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L141-L143","name":"MvQPF.Cofix.repr","line":141,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.repr","doc":"Representation function for `Cofix F α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.repr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L137-L139","name":"MvQPF.Cofix.abs","line":137,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.abs","doc":"Abstraction function for `cofix F α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.abs\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L122-L135","name":"MvQPF.Cofix.dest","line":122,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest","doc":"Destructor for `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L118-L120","name":"MvQPF.Cofix.corec","line":118,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec","doc":"Corecursor for `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L116-L116","name":"MvQPF.Cofix.mvfunctor","line":116,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mvfunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mvfunctor\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">mvfunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L93-L114","name":"MvQPF.Cofix.map","line":93,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.map","doc":"the map function for the functor `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L89-L91","name":"MvQPF.mRepr","line":89,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.mRepr","doc":"maps every element of the W type to a canonical representative "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.mRepr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">mRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L85-L87","name":"MvQPF.instInhabitedCofixOfAP","line":85,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.instInhabitedCofixOfAP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.instInhabitedCofixOfAP\"><span class=\"name\">MvQPF</span>.<span class=\"name\">instInhabitedCofixOfAP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L75-L83","name":"MvQPF.Cofix","line":75,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix","doc":"Greatest fixed point of functor F. The result is a functor with one fewer parameters\nthan the input. For `F a b c` a ternary functor, fix F is a binary functor such that\n\n```lean\nCofix F a b = F a b (Cofix F a b)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L71-L73","name":"MvQPF.Mcongr","line":71,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Mcongr","doc":"Equivalence relation on M-types representing a value of type `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Mcongr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Mcongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L64-L69","name":"MvQPF.IsPrecongr","line":64,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.IsPrecongr","doc":"Characterization of desirable equivalence relations on M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.IsPrecongr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">IsPrecongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L60-L62","name":"MvQPF.corecF_eq","line":60,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF_eq\"><span class=\"name\">MvQPF</span>.<span class=\"name\">corecF_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">MvPFunctor.M.dest</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF\">corecF</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF\">corecF</a> <span class=\"fn\">g</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.repr\">repr</a> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L54-L58","name":"MvQPF.corecF","line":54,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF","doc":"`corecF` is used as a basis for defining the corecursor of `Cofix F α`. `corecF`\nuses corecursion to construct the M-type generated by `q.P` and uses function on `F`\nas a corecursive step "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF\"><span class=\"name\">MvQPF</span>.<span class=\"name\">corecF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span></span></div></div>"}]}