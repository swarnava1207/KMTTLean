{"name":"Mathlib.SetTheory.ZFC.Class","instances":[{"typeNames":["Class"],"name":"instClassHasSubset","className":"HasSubset"},{"typeNames":["Class"],"name":"instClassEmptyCollection","className":"EmptyCollection"},{"typeNames":["Class"],"name":"instClassNonempty","className":"Nonempty"},{"typeNames":["Class"],"name":"instClassUnion","className":"Union"},{"typeNames":["Class"],"name":"instClassInter","className":"Inter"},{"typeNames":["Class"],"name":"instClassHasCompl","className":"HasCompl"},{"typeNames":["Class"],"name":"instClassSDiff","className":"SDiff"},{"typeNames":["ZFSet","Class"],"name":"instInsertZFSetClass","className":"Insert"},{"typeNames":["ZFSet","Class"],"name":"Class.instCoeZFSet","className":"Coe"},{"typeNames":["Class","Class"],"name":"Class.instMembership","className":"Membership"},{"typeNames":["Class"],"name":"Class.instIsWellFoundedMem","className":"IsWellFounded"},{"typeNames":["Class"],"name":"Class.instWellFoundedRelation","className":"WellFoundedRelation"}],"imports":["Init","Mathlib.SetTheory.ZFC.Ordinal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L361-L368","name":"ZFSet.isOrdinal_not_mem_univ","line":361,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.isOrdinal_not_mem_univ","doc":"The **Burali-Forti paradox**: ordinals form a proper class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.isOrdinal_not_mem_univ\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isOrdinal_not_mem_univ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a> ∉ <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L353-L353","name":"ZFSet.toSet_equiv_apply_coe","line":353,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.toSet_equiv_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.toSet_equiv_apply_coe\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_equiv_apply_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.toSet_equiv\">toSet_equiv</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L352-L359","name":"ZFSet.toSet_equiv","line":352,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.toSet_equiv","doc":"`ZFSet.toSet` as an equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.toSet_equiv\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L336-L340","name":"ZFSet.choice_mem","line":336,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">yx</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice\">choice</a></span></span> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.fval\">′</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L332-L334","name":"ZFSet.choice_isFunc","line":332,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice_isFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice_isFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_isFunc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\">IsFunc</a></span> (<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span>) <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice\">choice</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L327-L330","name":"ZFSet.choice_mem_aux","line":327,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice_mem_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice_mem_aux\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_mem_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">yx</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Classical.html#Classical.epsilon\">Classical.epsilon</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L323-L325","name":"ZFSet.choice","line":323,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice","doc":"A choice function on the class of nonempty ZFC sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.choice\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L309-L319","name":"ZFSet.map_fval","line":309,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.map_fval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#ZFSet.map_fval\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_fval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.fval\">′</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L302-L303","name":"Class.fval_ex","line":302,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.fval_ex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.fval_ex\"><span class=\"name\">Class</span>.<span class=\"name\">fval_ex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.fval\">′</a> <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L299-L300","name":"Class.«term_′_»","line":299,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.«term_′_»","doc":"Function value "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.«term_′_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term_′_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L295-L297","name":"Class.fval","line":295,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.fval","doc":"Function value "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.fval\"><span class=\"name\">Class</span>.<span class=\"name\">fval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L286-L293","name":"Class.iota_ex","line":286,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.iota_ex","doc":"Unlike the other set constructors, the `iota` definite descriptor\nis a set for any set input, but not constructively so, so there is no\nassociated `Class → Set` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.iota_ex\"><span class=\"name\">Class</span>.<span class=\"name\">iota_ex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.iota\">iota</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L281-L284","name":"Class.iota_val","line":281,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.iota_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.iota_val\"><span class=\"name\">Class</span>.<span class=\"name\">iota_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.iota\">iota</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L277-L279","name":"Class.iota","line":277,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.iota","doc":"The definite description operator, which is `{x}` if `{y | A y} = {x}` and `∅` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.iota\"><span class=\"name\">Class</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L265-L275","name":"Class.eq_univ_of_powerset_subset","line":265,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.eq_univ_of_powerset_subset","doc":"An induction principle for sets. If every subset of a class is a member, then the class is\nuniversal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.eq_univ_of_powerset_subset\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_of_powerset_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.powerset\">powerset</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L261-L263","name":"Class.sInter_empty","line":261,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter_empty\"><span class=\"name\">Class</span>.<span class=\"name\">sInter_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter\">⋂₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L256-L259","name":"Class.sUnion_empty","line":256,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion_empty\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion\">⋃₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L248-L254","name":"Class.mem_sInter","line":248,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L244-L246","name":"Class.mem_of_mem_sInter","line":244,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_of_mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_of_mem_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">mem_of_mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L240-L242","name":"Class.coe_sInter","line":240,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter\">⋂₀</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L235-L238","name":"Class.sInter_apply","line":235,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter_apply\"><span class=\"name\">Class</span>.<span class=\"name\">sInter_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span>) <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> → <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L227-L233","name":"Class.mem_sUnion","line":227,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L222-L225","name":"Class.coe_sUnion","line":222,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L215-L220","name":"Class.sUnion_apply","line":215,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion_apply\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">x</span>) <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>), <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L211-L213","name":"Class.powerset_apply","line":211,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.powerset_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.powerset_apply\"><span class=\"name\">Class</span>.<span class=\"name\">powerset_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.powerset\">powerset</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">A</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L207-L209","name":"Class.coe_powerset","line":207,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_powerset\"><span class=\"name\">Class</span>.<span class=\"name\">coe_powerset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\">powerset</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.powerset\">powerset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L203-L205","name":"Class.coe_diff","line":203,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_diff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_diff\"><span class=\"name\">Class</span>.<span class=\"name\">coe_diff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">x</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L199-L201","name":"Class.coe_inter","line":199,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_inter\"><span class=\"name\">Class</span>.<span class=\"name\">coe_inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L195-L197","name":"Class.coe_union","line":195,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_union\"><span class=\"name\">Class</span>.<span class=\"name\">coe_union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L191-L193","name":"Class.coe_insert","line":191,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_insert\"><span class=\"name\">Class</span>.<span class=\"name\">coe_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L187-L189","name":"Class.coe_empty","line":187,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_empty\"><span class=\"name\">Class</span>.<span class=\"name\">coe_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L182-L185","name":"Class.coe_sep","line":182,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_sep\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">y</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L178-L180","name":"Class.coe_subset","line":178,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_subset\"><span class=\"name\">Class</span>.<span class=\"name\">coe_subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L174-L176","name":"Class.coe_apply","line":174,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_apply\"><span class=\"name\">Class</span>.<span class=\"name\">coe_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">y</span></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L170-L172","name":"Class.coe_mem","line":170,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.coe_mem\"><span class=\"name\">Class</span>.<span class=\"name\">coe_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L166-L168","name":"Class.toSet_of_ZFSet","line":166,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.toSet_of_ZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.toSet_of_ZFSet\"><span class=\"name\">Class</span>.<span class=\"name\">toSet_of_ZFSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.ToSet\">ToSet</a></span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L161-L164","name":"Class.ofSet.inj","line":161,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.ofSet.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.ofSet.inj\"><span class=\"name\">Class</span>.<span class=\"name\">ofSet</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L158-L159","name":"Class.«term⋂₀_»","line":158,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.«term⋂₀_»","doc":"The intersection of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.«term⋂₀_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term⋂₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L154-L156","name":"Class.sInter","line":154,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter","doc":"The intersection of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sInter\"><span class=\"name\">Class</span>.<span class=\"name\">sInter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L151-L152","name":"Class.«term⋃₀_»","line":151,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.«term⋃₀_»","doc":"The union of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.«term⋃₀_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term⋃₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L147-L149","name":"Class.sUnion","line":147,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion","doc":"The union of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L143-L145","name":"Class.powerset","line":143,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.powerset","doc":"The power class of a class is the class of all subclasses that are ZFC sets "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.powerset\"><span class=\"name\">Class</span>.<span class=\"name\">powerset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L138-L141","name":"Class.classToCong_empty","line":138,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.classToCong_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.classToCong_empty\"><span class=\"name\">Class</span>.<span class=\"name\">classToCong_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.classToCong\">classToCong</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L134-L136","name":"Class.classToCong","line":134,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.classToCong","doc":"Convert a class into a conglomerate (a collection of classes) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.classToCong\"><span class=\"name\">Class</span>.<span class=\"name\">classToCong</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L128-L132","name":"Class.congToClass_empty","line":128,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.congToClass_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.congToClass_empty\"><span class=\"name\">Class</span>.<span class=\"name\">congToClass_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.congToClass\">congToClass</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L124-L126","name":"Class.congToClass","line":124,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.congToClass","doc":"Convert a conglomerate (a collection of classes) into a class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.congToClass\"><span class=\"name\">Class</span>.<span class=\"name\">congToClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L118-L122","name":"Class.univ_not_mem_univ","line":118,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.univ_not_mem_univ","doc":"**There is no universal set.**\nThis is stated as `univ ∉ univ`, meaning that `univ` (the class of all sets) is proper (does not\nbelong to the class of all sets). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ_not_mem_univ\"><span class=\"name\">Class</span>.<span class=\"name\">univ_not_mem_univ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a> ∉ <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L115-L116","name":"Class.mem_irrefl","line":115,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_irrefl\"><span class=\"name\">Class</span>.<span class=\"name\">mem_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L112-L113","name":"Class.mem_asymm","line":112,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_asymm\"><span class=\"name\">Class</span>.<span class=\"name\">mem_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L109-L110","name":"Class.instWellFoundedRelation","line":109,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.instWellFoundedRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.instWellFoundedRelation\"><span class=\"name\">Class</span>.<span class=\"name\">instWellFoundedRelation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L106-L107","name":"Class.instIsWellFoundedMem","line":106,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.instIsWellFoundedMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.instIsWellFoundedMem\"><span class=\"name\">Class</span>.<span class=\"name\">instIsWellFoundedMem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellFounded\">IsWellFounded</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L96-L104","name":"Class.mem_wf","line":96,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_wf\"><span class=\"name\">Class</span>.<span class=\"name\">mem_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L93-L94","name":"Class.eq_univ_of_forall","line":93,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.eq_univ_of_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.eq_univ_of_forall\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_of_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span>)</span> → <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L90-L91","name":"Class.eq_univ_iff_forall","line":90,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.eq_univ_iff_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.eq_univ_iff_forall\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_iff_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L86-L88","name":"Class.mem_univ_hom","line":86,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_univ_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_univ_hom\"><span class=\"name\">Class</span>.<span class=\"name\">mem_univ_hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L82-L84","name":"Class.mem_univ","line":82,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_univ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_univ\"><span class=\"name\">Class</span>.<span class=\"name\">mem_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\">univ</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L78-L80","name":"Class.not_empty_hom","line":78,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.not_empty_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.not_empty_hom\"><span class=\"name\">Class</span>.<span class=\"name\">not_empty_hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L75-L76","name":"Class.not_mem_empty","line":75,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.not_mem_empty\"><span class=\"name\">Class</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L72-L73","name":"Class.mem_def","line":72,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.mem_def\"><span class=\"name\">Class</span>.<span class=\"name\">mem_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L69-L70","name":"Class.instMembership","line":69,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.instMembership\"><span class=\"name\">Class</span>.<span class=\"name\">instMembership</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L65-L67","name":"Class.Mem","line":65,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.Mem","doc":"`A ∈ B` if `A` is a ZFC set which satisfies `B` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.Mem\"><span class=\"name\">Class</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B </span><span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L61-L63","name":"Class.ToSet","line":61,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.ToSet","doc":"Assert that `A` is a ZFC set satisfying `B` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.ToSet\"><span class=\"name\">Class</span>.<span class=\"name\">ToSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B </span><span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L57-L59","name":"Class.univ","line":57,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.univ","doc":"The universal class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.univ\"><span class=\"name\">Class</span>.<span class=\"name\">univ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L54-L55","name":"Class.instCoeZFSet","line":54,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.instCoeZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.instCoeZFSet\"><span class=\"name\">Class</span>.<span class=\"name\">instCoeZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L49-L52","name":"Class.ofSet","line":49,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.ofSet","doc":"Coerce a ZFC set into a class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.ofSet\"><span class=\"name\">Class</span>.<span class=\"name\">ofSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L45-L45","name":"Class.ext_iff","line":45,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.ext_iff\"><span class=\"name\">Class</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L45-L47","name":"Class.ext","line":45,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.ext\"><span class=\"name\">Class</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">z</span></span>)</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L41-L43","name":"Class.sep","line":41,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class.sep","doc":"`{x ∈ A | p x}` is the class of elements in `A` satisfying `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class.sep\"><span class=\"name\">Class</span>.<span class=\"name\">sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L34-L35","name":"instInsertZFSetClass","line":34,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#instInsertZFSetClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#instInsertZFSetClass\"><span class=\"name\">instInsertZFSetClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L32-L32","name":"instClassSDiff","line":32,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#instClassSDiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#instClassSDiff\"><span class=\"name\">instClassSDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#SDiff\">SDiff</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L32-L32","name":"instClassHasCompl","line":32,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#instClassHasCompl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#instClassHasCompl\"><span class=\"name\">instClassHasCompl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#HasCompl\">HasCompl</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L32-L32","name":"instClassInter","line":32,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#instClassInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#instClassInter\"><span class=\"name\">instClassInter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Inter\">Inter</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L32-L32","name":"instClassUnion","line":32,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#instClassUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#instClassUnion\"><span class=\"name\">instClassUnion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Union\">Union</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L32-L32","name":"instClassNonempty","line":32,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#instClassNonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#instClassNonempty\"><span class=\"name\">instClassNonempty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L32-L32","name":"instClassEmptyCollection","line":32,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#instClassEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#instClassEmptyCollection\"><span class=\"name\">instClassEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L32-L32","name":"instClassHasSubset","line":32,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Class.html#instClassHasSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#instClassHasSubset\"><span class=\"name\">instClassHasSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#HasSubset\">HasSubset</a> <a href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\">Class.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Class.lean#L26-L32","name":"Class","line":26,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Class.html#Class","doc":"The collection of all classes.\nWe define `Class` as `Set ZFSet`, as this allows us to get many instances automatically. However, in\npractice, we treat it as (the definitionally equal) `ZFSet → Prop`. This means, the preferred way to\nstate that `x : ZFSet` belongs to `A : Class` is to write `A x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Class.html#Class\"><span class=\"name\">Class</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}