{"name":"Lean.Meta.Tactic.Grind.ForallProp","instances":[],"imports":["Init.Grind.Lemmas","Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.Internalize","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Grind.EqResolution"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L83-L107","name":"Lean.Meta.Grind.propagateForallPropDown","line":83,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropDown","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateForallPropDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L38-L48","name":"Lean.Meta.Grind.propagateForallPropUp.propagateImpliesUp","line":38,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropUp.propagateImpliesUp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropUp.propagateImpliesUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateForallPropUp</span>.<span class=\"name\">propagateImpliesUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L14-L48","name":"Lean.Meta.Grind.propagateForallPropUp","line":14,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropUp","doc":"If `parent` is a projection-application `proj_i c`,\ncheck whether the root of the equivalence class containing `c` is a constructor-application `ctor ... a_i ...`.\nIf so, internalize the term `proj_i (ctor ... a_i ...)` and add the equality `proj_i (ctor ... a_i ...) = a_i`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateForallPropUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}