{"name":"Init.MetaTypes","instances":[{"typeNames":["Lean.NameGenerator"],"name":"Lean.instInhabitedNameGenerator","className":"Inhabited"},{"typeNames":["Lean.Meta.TransparencyMode"],"name":"Lean.Meta.instInhabitedTransparencyMode","className":"Inhabited"},{"typeNames":["Lean.Meta.TransparencyMode"],"name":"Lean.Meta.instBEqTransparencyMode","className":"BEq"},{"typeNames":["Lean.Meta.EtaStructMode"],"name":"Lean.Meta.instInhabitedEtaStructMode","className":"Inhabited"},{"typeNames":["Lean.Meta.EtaStructMode"],"name":"Lean.Meta.instBEqEtaStructMode","className":"BEq"},{"typeNames":["Lean.Meta.DSimp.Config"],"name":"Lean.Meta.DSimp.instInhabitedConfig","className":"Inhabited"},{"typeNames":["Lean.Meta.DSimp.Config"],"name":"Lean.Meta.DSimp.instBEqConfig","className":"BEq"},{"typeNames":["Lean.Meta.Simp.Config"],"name":"Lean.Meta.Simp.instInhabitedConfig","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Config"],"name":"Lean.Meta.Simp.instBEqConfig","className":"BEq"},{"typeNames":["Lean.Meta.Occurrences"],"name":"Lean.Meta.instInhabitedOccurrences","className":"Inhabited"},{"typeNames":["Lean.Meta.Occurrences"],"name":"Lean.Meta.instBEqOccurrences","className":"BEq"},{"typeNames":["List","Lean.Meta.Occurrences"],"name":"Lean.Meta.instCoeListNatOccurrences","className":"Coe"}],"imports":["Init.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L287-L287","name":"Lean.Meta.instCoeListNatOccurrences","line":287,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instCoeListNatOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instCoeListNatOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instCoeListNatOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L285-L285","name":"Lean.Meta.instBEqOccurrences","line":285,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L285-L285","name":"Lean.Meta.instInhabitedOccurrences","line":285,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L283-L284","name":"Lean.Meta.Occurrences.neg","line":283,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.neg","doc":"A list of indices for which occurrences should not be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L281-L282","name":"Lean.Meta.Occurrences.pos","line":281,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.pos","doc":"A list of indices for which occurrences should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L279-L280","name":"Lean.Meta.Occurrences.all","line":279,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.all","doc":"All occurrences should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L277-L285","name":"Lean.Meta.Occurrences","line":277,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences","doc":"Configuration for which occurrences that match an expression should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L268-L268","name":"Lean.Meta.Simp.NormCastConfig.mk","line":268,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">NormCastConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L268-L273","name":"Lean.Meta.Simp.NormCastConfig.toConfig","line":268,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.toConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.toConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">NormCastConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L268-L273","name":"Lean.Meta.Simp.NormCastConfig","line":268,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L251-L266","name":"Lean.Meta.Simp.neutralConfig","line":251,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.neutralConfig","doc":"A neutral configuration for `simp`, turning off all reductions and other built-in simplifications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.neutralConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">neutralConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L248-L248","name":"Lean.Meta.Simp.ConfigCtx.mk","line":248,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">ConfigCtx</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L248-L249","name":"Lean.Meta.Simp.ConfigCtx.toConfig","line":248,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.toConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.toConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">ConfigCtx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L248-L249","name":"Lean.Meta.Simp.ConfigCtx","line":248,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L245-L245","name":"Lean.Meta.Simp.instBEqConfig","line":245,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L245-L245","name":"Lean.Meta.Simp.instInhabitedConfig","line":245,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L244-L244","name":"Lean.Meta.Simp.Config.zetaUnused","line":244,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaUnused","doc":"When `true` (default : `true`), then simps will remove unused let-declarations:\n`let x := v; e` simplifies to `e` when `x` does not occur in `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaUnused\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaUnused</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L239-L239","name":"Lean.Meta.Simp.Config.implicitDefEqProofs","line":239,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.implicitDefEqProofs","doc":"If `implicitDefEqProofs := true`, `simp` does not create proof terms when the\ninput and output terms are definitionally equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.implicitDefEqProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">implicitDefEqProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L234-L234","name":"Lean.Meta.Simp.Config.index","line":234,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.index","doc":"When `index` (default : `true`) is `false`, `simp` will only use the root symbol\nto find candidate `simp` theorems. It approximates Lean 3 `simp` behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.index\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L229-L229","name":"Lean.Meta.Simp.Config.zetaDelta","line":229,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaDelta","doc":"When `true` (default: `false`), local definitions are unfolded.\nThat is, given a local context containing entry `x : t := e`, the free variable `x` reduces to `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L224-L224","name":"Lean.Meta.Simp.Config.unfoldPartialApp","line":224,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.unfoldPartialApp","doc":"If `unfoldPartialApp` is `true` (default: `false`), then calls to `simp`, `dsimp`, or `simp_all`\nwill unfold even partial applications of `f` when we request `f` to be unfolded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.unfoldPartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldPartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L219-L219","name":"Lean.Meta.Simp.Config.ground","line":219,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.ground","doc":"If `ground` is `true` (default: `false`), then ground terms are reduced.\nA term is ground when it does not contain free or meta variables.\nReduction is interrupted at a function application `f ...` if `f` is marked to not be unfolded.\nGround term reduction applies `@[seval]` lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.ground\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">ground</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L212-L212","name":"Lean.Meta.Simp.Config.failIfUnchanged","line":212,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.failIfUnchanged","doc":"If `failIfUnchanged` is `true` (default: `true`), then calls to `simp`, `dsimp`, or `simp_all`\nwill fail if they do not make progress.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.failIfUnchanged\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">failIfUnchanged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L207-L207","name":"Lean.Meta.Simp.Config.dsimp","line":207,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.dsimp","doc":"When `true` (default: `true`) then switches to `dsimp` on dependent arguments\nif there is no congruence theorem that would allow `simp` to visit them.\nWhen `dsimp` is `false`, then the argument is not visited.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.dsimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">dsimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L201-L201","name":"Lean.Meta.Simp.Config.autoUnfold","line":201,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.autoUnfold","doc":"When `true` (default: `false`), unfolds definitions.\nThis can be enabled using the `simp!` syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.autoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">autoUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L196-L196","name":"Lean.Meta.Simp.Config.arith","line":196,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.arith","doc":"When `true` (default: `false`), simplifies simple arithmetic expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.arith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">arith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L194-L194","name":"Lean.Meta.Simp.Config.decide","line":194,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.decide","doc":"When `true` (default: `false`), rewrites a proposition `p` to `True` or `False` by inferring\na `Decidable p` instance and reducing it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.decide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">decide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L189-L189","name":"Lean.Meta.Simp.Config.proj","line":189,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.proj","doc":"When `true` (default: `true`), reduces projections of structure constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L185-L185","name":"Lean.Meta.Simp.Config.iota","line":185,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.iota","doc":"When `true` (default: `true`), reduces `match` expressions applied to constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L181-L181","name":"Lean.Meta.Simp.Config.etaStruct","line":181,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.etaStruct","doc":"Configures how to determine definitional equality between two structure instances.\nSee documentation for `Lean.Meta.EtaStructMode`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L176-L176","name":"Lean.Meta.Simp.Config.eta","line":176,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.eta","doc":"TODO (currently unimplemented). When `true` (default: `true`), performs eta reduction for `fun` expressions.\nThat is, `(fun x => f x)` reduces to `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L171-L171","name":"Lean.Meta.Simp.Config.beta","line":171,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.beta","doc":"When `true` (default: `true`), performs beta reduction of applications of `fun` expressions.\nThat is, `(fun x => e[x]) v` reduces to `e[v]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L166-L166","name":"Lean.Meta.Simp.Config.zeta","line":166,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zeta","doc":"When `true` (default: `true`), performs zeta reduction of let expressions.\nThat is, `let x := v; e[x]` reduces to `e[v]`.\nSee also `zetaDelta`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L160-L160","name":"Lean.Meta.Simp.Config.singlePass","line":160,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.singlePass","doc":"When `singlePass` is `true` (default: `false`), the simplifier runs through a single round of simplification,\nwhich consists of running pre-methods, recursing using congruence lemmas, and then running post-methods.\nOtherwise, when it is `false`, it iteratively applies this simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.singlePass\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">singlePass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L154-L154","name":"Lean.Meta.Simp.Config.memoize","line":154,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.memoize","doc":"When true (default: `true`) then the simplifier caches the result of simplifying each subexpression, if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.memoize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">memoize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L150-L150","name":"Lean.Meta.Simp.Config.contextual","line":150,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.contextual","doc":"When `contextual` is true (default: `false`) and simplification encounters an implication `p → q`\nit includes `p` as an additional simp lemma when simplifying `q`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.contextual\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">contextual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L145-L145","name":"Lean.Meta.Simp.Config.maxDischargeDepth","line":145,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxDischargeDepth","doc":"When simp discharges side conditions for conditional lemmas, it can recursively apply simplification.\nThe `maxDischargeDepth` (default: 2) is the maximum recursion depth when recursively applying simplification to side conditions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxDischargeDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxDischargeDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L140-L140","name":"Lean.Meta.Simp.Config.maxSteps","line":140,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxSteps","doc":"The maximum number of subexpressions to visit when performing simplification.\nThe default is 100000.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L135-L135","name":"Lean.Meta.Simp.Config.mk","line":135,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxSteps </span><span class=\"fn\">maxDischargeDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contextual </span><span class=\"fn\">memoize </span><span class=\"fn\">singlePass </span><span class=\"fn\">zeta </span><span class=\"fn\">beta </span><span class=\"fn\">eta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaStruct</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iota </span><span class=\"fn\">proj </span><span class=\"fn\">decide </span><span class=\"fn\">arith </span><span class=\"fn\">autoUnfold </span><span class=\"fn\">dsimp </span><span class=\"fn\">failIfUnchanged </span><span class=\"fn\">ground </span><span class=\"fn\">unfoldPartialApp </span><span class=\"fn\">zetaDelta </span><span class=\"fn\">index </span><span class=\"fn\">implicitDefEqProofs\n  </span><span class=\"fn\">zetaUnused</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L129-L245","name":"Lean.Meta.Simp.Config","line":129,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config","doc":"The configuration for `simp`.\nPassed to `simp` using, for example, the `simp (config := {contextual := true})` syntax.\n\nSee also `Lean.Meta.Simp.neutralConfig` and `Lean.Meta.DSimp.Config`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L127-L127","name":"Lean.Meta.Simp.defaultMaxSteps","line":127,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">defaultMaxSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L121-L121","name":"Lean.Meta.DSimp.instBEqConfig","line":121,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L121-L121","name":"Lean.Meta.DSimp.instInhabitedConfig","line":121,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L120-L120","name":"Lean.Meta.DSimp.Config.zetaUnused","line":120,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaUnused","doc":"When `true` (default : `true`), then simps will remove unused let-declarations:\n`let x := v; e` simplifies to `e` when `x` does not occur in `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaUnused\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaUnused</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L115-L115","name":"Lean.Meta.DSimp.Config.index","line":115,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.index","doc":"When `index` (default : `true`) is `false`, `simp` will only use the root symbol\nto find candidate `simp` theorems. It approximates Lean 3 `simp` behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.index\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L110-L110","name":"Lean.Meta.DSimp.Config.zetaDelta","line":110,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaDelta","doc":"When `true` (default: `false`), local definitions are unfolded.\nThat is, given a local context containing entry `x : t := e`, the free variable `x` reduces to `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L105-L105","name":"Lean.Meta.DSimp.Config.unfoldPartialApp","line":105,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.unfoldPartialApp","doc":"If `unfoldPartialApp` is `true` (default: `false`), then calls to `simp`, `dsimp`, or `simp_all`\nwill unfold even partial applications of `f` when we request `f` to be unfolded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.unfoldPartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldPartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L100-L100","name":"Lean.Meta.DSimp.Config.failIfUnchanged","line":100,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.failIfUnchanged","doc":"If `failIfUnchanged` is `true` (default: `true`), then calls to `simp`, `dsimp`, or `simp_all`\nwill fail if they do not make progress.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.failIfUnchanged\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">failIfUnchanged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L95-L95","name":"Lean.Meta.DSimp.Config.autoUnfold","line":95,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.autoUnfold","doc":"When `true` (default: `false`), unfolds definitions.\nThis can be enabled using the `simp!` syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.autoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">autoUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L90-L90","name":"Lean.Meta.DSimp.Config.decide","line":90,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.decide","doc":"When `true` (default: `false`), rewrites a proposition `p` to `True` or `False` by inferring\na `Decidable p` instance and reducing it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.decide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">decide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L85-L85","name":"Lean.Meta.DSimp.Config.proj","line":85,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.proj","doc":"When `true` (default: `true`), reduces projections of structure constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L81-L81","name":"Lean.Meta.DSimp.Config.iota","line":81,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.iota","doc":"When `true` (default: `true`), reduces `match` expressions applied to constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L77-L77","name":"Lean.Meta.DSimp.Config.etaStruct","line":77,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.etaStruct","doc":"Configures how to determine definitional equality between two structure instances.\nSee documentation for `Lean.Meta.EtaStructMode`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L72-L72","name":"Lean.Meta.DSimp.Config.eta","line":72,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.eta","doc":"TODO (currently unimplemented). When `true` (default: `true`), performs eta reduction for `fun` expressions.\nThat is, `(fun x => f x)` reduces to `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L67-L67","name":"Lean.Meta.DSimp.Config.beta","line":67,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.beta","doc":"When `true` (default: `true`), performs beta reduction of applications of `fun` expressions.\nThat is, `(fun x => e[x]) v` reduces to `e[v]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L62-L62","name":"Lean.Meta.DSimp.Config.zeta","line":62,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zeta","doc":"When `true` (default: `true`), performs zeta reduction of let expressions.\nThat is, `let x := v; e[x]` reduces to `e[v]`.\nSee also `zetaDelta`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L56-L56","name":"Lean.Meta.DSimp.Config.mk","line":56,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zeta </span><span class=\"fn\">beta </span><span class=\"fn\">eta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaStruct</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iota </span><span class=\"fn\">proj </span><span class=\"fn\">decide </span><span class=\"fn\">autoUnfold </span><span class=\"fn\">failIfUnchanged </span><span class=\"fn\">unfoldPartialApp </span><span class=\"fn\">zetaDelta </span><span class=\"fn\">index </span><span class=\"fn\">zetaUnused</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L49-L121","name":"Lean.Meta.DSimp.Config","line":49,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config","doc":"The configuration for `dsimp`.\nPassed to `dsimp` using, for example, the `dsimp (config := {zeta := false})` syntax.\n\nImplementation note: this structure is only used for processing the `(config := ...)` syntax, and it is not used internally.\nIt is immediately converted to `Lean.Meta.Simp.Config` by `Lean.Elab.Tactic.elabSimpConfig`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L45-L45","name":"Lean.Meta.instBEqEtaStructMode","line":45,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L45-L45","name":"Lean.Meta.instInhabitedEtaStructMode","line":45,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L43-L44","name":"Lean.Meta.EtaStructMode.none","line":43,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.none","doc":"Disable eta for structures and classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L41-L42","name":"Lean.Meta.EtaStructMode.notClasses","line":41,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.notClasses","doc":"Enable eta only for structures that are not classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.notClasses\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">notClasses</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L39-L40","name":"Lean.Meta.EtaStructMode.all","line":39,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all","doc":"Enable eta for structure and classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L37-L45","name":"Lean.Meta.EtaStructMode","line":37,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode","doc":"Which structure types should eta be used with? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L35-L35","name":"Lean.Meta.instBEqTransparencyMode","line":35,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L35-L35","name":"Lean.Meta.instInhabitedTransparencyMode","line":35,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L33-L34","name":"Lean.Meta.TransparencyMode.instances","line":33,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances","doc":"Unfolds reducible constants and constants tagged with the `@[instance]` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">instances</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L31-L32","name":"Lean.Meta.TransparencyMode.reducible","line":31,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible","doc":"Unfolds only constants tagged with the `@[reducible]` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">reducible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L29-L30","name":"Lean.Meta.TransparencyMode.default","line":29,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default","doc":"Unfolds all constants except those tagged as `@[irreducible]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L27-L28","name":"Lean.Meta.TransparencyMode.all","line":27,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.all","doc":"Unfolds all constants, even those tagged as `@[irreducible]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L23-L35","name":"Lean.Meta.TransparencyMode","line":23,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode","doc":"Which constants should be unfolded?\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L19-L19","name":"Lean.Module.commands","line":19,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Module.commands","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.commands\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">commands</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L18-L18","name":"Lean.Module.header","line":18,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Module.header","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L17-L17","name":"Lean.Module.mk","line":17,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Module.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commands</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L16-L19","name":"Lean.Module","line":16,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Module","doc":"Syntax objects for a Lean module. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L14-L14","name":"Lean.instInhabitedNameGenerator","line":14,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedNameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L13-L13","name":"Lean.NameGenerator.idx","line":13,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L12-L12","name":"Lean.NameGenerator.namePrefix","line":12,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.namePrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.namePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">namePrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L11-L11","name":"Lean.NameGenerator.mk","line":11,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namePrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/MetaTypes.lean#L11-L14","name":"Lean.NameGenerator","line":11,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.NameGenerator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}