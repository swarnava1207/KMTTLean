{"name":"Mathlib.Analysis.InnerProductSpace.OfNorm","instances":[{"typeNames":[],"name":"InnerProductSpace.toInnerProductSpaceable_ofReal","className":"InnerProductSpaceable"},{"typeNames":[],"name":"InnerProductSpaceable.to_uniformConvexSpace","className":"UniformConvexSpace"}],"imports":["Init","Mathlib.Topology.Algebra.Algebra","Mathlib.Analysis.InnerProductSpace.Convex","Mathlib.Algebra.Module.LinearMap.Rat","Mathlib.Tactic.Module"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L256-L257","name":"InnerProductSpaceable.to_uniformConvexSpace","line":256,"kind":"instance","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.to_uniformConvexSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.to_uniformConvexSpace\"><span class=\"name\">InnerProductSpaceable</span>.<span class=\"name\">to_uniformConvexSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\">InnerProductSpaceable</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Convex/Uniform.html#UniformConvexSpace\">UniformConvexSpace</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L240-L249","name":"nonempty_innerProductSpace","line":240,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#nonempty_innerProductSpace","doc":"**Fr√©chet‚Äìvon Neumann‚ÄìJordan Theorem**. A normed space `E` whose norm satisfies the\nparallelogram identity can be given a compatible inner product. Do\n`casesI nonempty_innerProductSpace ùïú E` to locally upgrade `InnerProductSpaceable E` to\n`InnerProductSpace ùïú E`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#nonempty_innerProductSpace\"><span class=\"name\">nonempty_innerProductSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\">InnerProductSpaceable</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/InnerProductSpace/Defs.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L225-L235","name":"InnerProductSpace.ofNorm","line":225,"kind":"def","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpace.ofNorm","doc":"**Fr√©chet‚Äìvon Neumann‚ÄìJordan Theorem**. A normed space `E` whose norm satisfies the\nparallelogram identity can be given a compatible inner product. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpace.ofNorm\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">ofNorm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Defs.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L215-L219","name":"InnerProductSpaceable.innerProp","line":215,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.innerProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.innerProp\"><span class=\"name\">InnerProductSpaceable</span>.<span class=\"name\">innerProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\">InnerProductSpaceable</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">ùïú</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#_private.Mathlib.Analysis.InnerProductSpace.OfNorm.0.InnerProductSpaceable.innerProp'\">InnerProductSpaceable.innerProp'‚úù</a> <span class=\"fn\">E</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L178-L185","name":"InnerProductSpaceable.add_left","line":178,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.add_left\"><span class=\"name\">InnerProductSpaceable</span>.<span class=\"name\">add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\">InnerProductSpaceable</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#_private.Mathlib.Analysis.InnerProductSpace.OfNorm.0.inner_\">inner_‚úù</a> <span class=\"fn\">ùïú</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#_private.Mathlib.Analysis.InnerProductSpace.OfNorm.0.inner_\">inner_‚úù</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#_private.Mathlib.Analysis.InnerProductSpace.OfNorm.0.inner_\">inner_‚úù</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L115-L129","name":"InnerProductSpaceable.inner_.conj_symm","line":115,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.inner_.conj_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.inner_.conj_symm\"><span class=\"name\">InnerProductSpaceable</span>.<span class=\"name\">inner_</span>.<span class=\"name\">conj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Star/Basic.html#starRingEnd\">starRingEnd</a> <span class=\"fn\">ùïú</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#_private.Mathlib.Analysis.InnerProductSpace.OfNorm.0.inner_\">inner_‚úù</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#_private.Mathlib.Analysis.InnerProductSpace.OfNorm.0.inner_\">inner_‚úù</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L107-L113","name":"InnerProductSpaceable.inner_.norm_sq","line":107,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.inner_.norm_sq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.inner_.norm_sq\"><span class=\"name\">InnerProductSpaceable</span>.<span class=\"name\">inner_</span>.<span class=\"name\">norm_sq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike.re\">RCLike.re</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#_private.Mathlib.Analysis.InnerProductSpace.OfNorm.0.inner_\">inner_‚úù</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L102-L105","name":"Continuous.inner_","line":102,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#Continuous.inner_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#Continuous.inner_\"><span class=\"name\">Continuous</span>.<span class=\"name\">inner_</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#_private.Mathlib.Analysis.InnerProductSpace.OfNorm.0.inner_\">inner_‚úù</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L77-L79","name":"InnerProductSpace.toInnerProductSpaceable_ofReal","line":77,"kind":"instance","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpace.toInnerProductSpaceable_ofReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpace.toInnerProductSpaceable_ofReal\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">toInnerProductSpaceable_ofReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Defs.html#InnerProductSpace\">InnerProductSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\">InnerProductSpaceable</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L72-L74","name":"InnerProductSpace.toInnerProductSpaceable","line":72,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpace.toInnerProductSpaceable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpace.toInnerProductSpaceable\"><span class=\"name\">InnerProductSpace</span>.<span class=\"name\">toInnerProductSpaceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Defs.html#InnerProductSpace\">InnerProductSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\">InnerProductSpaceable</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L67-L67","name":"InnerProductSpaceable.parallelogram_identity","line":67,"kind":"theorem","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.parallelogram_identity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.parallelogram_identity\"><span class=\"name\">InnerProductSpaceable</span>.<span class=\"name\">parallelogram_identity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\">InnerProductSpaceable</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L66-L66","name":"InnerProductSpaceable.mk","line":66,"kind":"ctor","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable.mk\"><span class=\"name\">InnerProductSpaceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parallelogram_identity</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a><span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‚Äñ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\">InnerProductSpaceable</a> <span class=\"fn\">E</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/InnerProductSpace/OfNorm.lean#L62-L68","name":"InnerProductSpaceable","line":62,"kind":"class","docLink":"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable","doc":"Predicate for the parallelogram identity to hold in a normed group. This is a scalar-less\nversion of `InnerProductSpace`. If you have an `InnerProductSpaceable` assumption, you can\nlocally upgrade that to `InnerProductSpace ùïú E` using `casesI nonempty_innerProductSpace ùïú E`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/InnerProductSpace/OfNorm.html#InnerProductSpaceable\"><span class=\"name\">InnerProductSpaceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}