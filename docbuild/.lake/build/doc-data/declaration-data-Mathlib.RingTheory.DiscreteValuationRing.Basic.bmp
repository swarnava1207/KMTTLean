{"name":"Mathlib.RingTheory.DiscreteValuationRing.Basic","instances":[{"typeNames":["IsLocalRing.maximalIdeal"],"name":"IsDiscreteValuationRing.instIsHausdorffMaximalIdeal","className":"IsHausdorff"},{"typeNames":[],"name":"of_isDiscreteValuationRing","className":"ValuationRing"}],"imports":["Init","Mathlib.RingTheory.AdicCompletion.Basic","Mathlib.RingTheory.LocalRing.MaximalIdeal.Basic","Mathlib.RingTheory.LocalRing.RingHom.Basic","Mathlib.RingTheory.UniqueFactorizationDomain.Basic","Mathlib.RingTheory.Valuation.PrimeMultiplicity","Mathlib.RingTheory.Valuation.ValuationRing"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L486-L487","name":"of_isDiscreteValuationRing","line":486,"kind":"instance","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#of_isDiscreteValuationRing","doc":"A DVR is a valuation ring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#of_isDiscreteValuationRing\"><span class=\"name\">of_isDiscreteValuationRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Valuation/ValuationRing.html#ValuationRing\">ValuationRing</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L471-L477","name":"IsDiscreteValuationRing.instIsHausdorffMaximalIdeal","line":471,"kind":"instance","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.instIsHausdorffMaximalIdeal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.instIsHausdorffMaximalIdeal\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">instIsHausdorffMaximalIdeal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/AdicCompletion/Basic.html#IsHausdorff\">IsHausdorff</a> <span class=\"fn\">(<a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#IsLocalRing.maximalIdeal\">IsLocalRing.maximalIdeal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L461-L467","name":"IsDiscreteValuationRing.addVal_eq_zero_iff","line":461,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_eq_zero_iff\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#IsUnit\">IsUnit</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L454-L459","name":"IsDiscreteValuationRing.addVal_eq_zero_of_unit","line":454,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_eq_zero_of_unit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_eq_zero_of_unit\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_eq_zero_of_unit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">↑<span class=\"fn\">u</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L451-L452","name":"IsDiscreteValuationRing.addVal_add","line":451,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_add\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L436-L449","name":"IsDiscreteValuationRing.addVal_le_iff_dvd","line":436,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_le_iff_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_le_iff_dvd\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_le_iff_dvd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L424-L434","name":"IsDiscreteValuationRing.addVal_eq_top_iff","line":424,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_eq_top_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_eq_top_iff\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_eq_top_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L420-L422","name":"Irreducible.addVal_pow","line":420,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#Irreducible.addVal_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#Irreducible.addVal_pow\"><span class=\"name\">Irreducible</span>.<span class=\"name\">addVal_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">IsDiscreteValuationRing.addVal</a> <span class=\"fn\">R</span>)</span> (<span class=\"fn\">ϖ</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L417-L418","name":"IsDiscreteValuationRing.addVal_pow","line":417,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_pow\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L413-L415","name":"IsDiscreteValuationRing.addVal_mul","line":413,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_mul\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L408-L411","name":"IsDiscreteValuationRing.addVal_uniformizer","line":408,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_uniformizer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_uniformizer\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_uniformizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hϖ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">ϖ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L405-L406","name":"IsDiscreteValuationRing.addVal_one","line":405,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_one\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L402-L403","name":"IsDiscreteValuationRing.addVal_zero","line":402,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_zero\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L397-L400","name":"IsDiscreteValuationRing.addVal_def'","line":397,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_def'","doc":"An alternative definition of the additive valuation, taking units into account "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_def'\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_def'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hϖ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> (<span class=\"fn\">↑<span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ϖ</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L389-L395","name":"IsDiscreteValuationRing.addVal_def","line":389,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal_def\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hϖ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ϖ</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\">addVal</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L384-L387","name":"IsDiscreteValuationRing.addVal","line":384,"kind":"def","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal","doc":"The `ℕ∞`-valued additive valuation on a DVR. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.addVal\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">addVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Valuation/Basic.html#AddValuation\">AddValuation</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/ENat/Defs.html#ENat\">ℕ∞</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L369-L377","name":"IsDiscreteValuationRing.unit_mul_pow_congr_unit","line":369,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.unit_mul_pow_congr_unit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.unit_mul_pow_congr_unit\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">unit_mul_pow_congr_unit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hirr</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ϖ</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ϖ</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L354-L367","name":"IsDiscreteValuationRing.unit_mul_pow_congr_pow","line":354,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.unit_mul_pow_congr_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.unit_mul_pow_congr_pow\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">unit_mul_pow_congr_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L343-L352","name":"IsDiscreteValuationRing.ideal_eq_span_pow_irreducible","line":343,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.ideal_eq_span_pow_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.ideal_eq_span_pow_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">ideal_eq_span_pow_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Defs.html#Ideal\">Ideal</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hirr</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#Ideal.span\">Ideal.span</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">ϖ</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L334-L339","name":"IsDiscreteValuationRing.eq_unit_mul_pow_irreducible","line":334,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.eq_unit_mul_pow_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.eq_unit_mul_pow_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">eq_unit_mul_pow_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hirr</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">u</span> : <span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ϖ</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L317-L332","name":"IsDiscreteValuationRing.associated_pow_irreducible","line":317,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.associated_pow_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.associated_pow_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">associated_pow_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hirr</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Associated.html#Associated\">Associated</a> <span class=\"fn\">x</span> (<span class=\"fn\">ϖ</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L297-L310","name":"IsDiscreteValuationRing.RingEquivClass.isDiscreteValuationRing","line":297,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.RingEquivClass.isDiscreteValuationRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.RingEquivClass.isDiscreteValuationRing\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">RingEquivClass</span>.<span class=\"name\">isDiscreteValuationRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Equiv.html#EquivLike\">EquivLike</a> <span class=\"fn\">E</span> <span class=\"fn\">A</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Equiv.html#RingEquivClass\">RingEquivClass</a> <span class=\"fn\">E</span> <span class=\"fn\">A</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">B</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L285-L294","name":"IsDiscreteValuationRing.ofHasUnitMulPowIrreducibleFactorization","line":285,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.ofHasUnitMulPowIrreducibleFactorization","doc":"An integral domain in which there is an irreducible element `p`\nsuch that every nonzero element is associated to a power of `p`\nis a discrete valuation ring.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.ofHasUnitMulPowIrreducibleFactorization\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">ofHasUnitMulPowIrreducibleFactorization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hR</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization\">HasUnitMulPowIrreducibleFactorization</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L262-L283","name":"IsDiscreteValuationRing.of_ufd_of_unique_irreducible","line":262,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.of_ufd_of_unique_irreducible","doc":"A unique factorization domain with at least one irreducible element\nin which all irreducible elements are associated\nis a discrete valuation ring.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.of_ufd_of_unique_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">of_ufd_of_unique_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/UniqueFactorizationDomain/Defs.html#UniqueFactorizationMonoid\">UniqueFactorizationMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\">R</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">R</span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Associated.html#Associated\">Associated</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L230-L260","name":"IsDiscreteValuationRing.aux_pid_of_ufd_of_unique_irreducible","line":230,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.aux_pid_of_ufd_of_unique_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.aux_pid_of_ufd_of_unique_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">aux_pid_of_ufd_of_unique_irreducible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/UniqueFactorizationDomain/Defs.html#UniqueFactorizationMonoid\">UniqueFactorizationMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\">R</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">R</span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Associated.html#Associated\">Associated</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#IsPrincipalIdealRing\">IsPrincipalIdealRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L209-L226","name":"IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.of_ufd_of_unique_irreducible","line":209,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.of_ufd_of_unique_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.of_ufd_of_unique_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">HasUnitMulPowIrreducibleFactorization</span>.<span class=\"name\">of_ufd_of_unique_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/UniqueFactorizationDomain/Defs.html#UniqueFactorizationMonoid\">UniqueFactorizationMonoid</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\">R</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">R</span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Associated.html#Associated\">Associated</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization\">HasUnitMulPowIrreducibleFactorization</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L177-L207","name":"IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.toUniqueFactorizationMonoid","line":177,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.toUniqueFactorizationMonoid","doc":"An integral domain in which there is an irreducible element `p`\nsuch that every nonzero element is associated to a power of `p` is a unique factorization domain.\nSee `IsDiscreteValuationRing.ofHasUnitMulPowIrreducibleFactorization`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.toUniqueFactorizationMonoid\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">HasUnitMulPowIrreducibleFactorization</span>.<span class=\"name\">toUniqueFactorizationMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hR</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization\">HasUnitMulPowIrreducibleFactorization</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/UniqueFactorizationDomain/Defs.html#UniqueFactorizationMonoid\">UniqueFactorizationMonoid</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L151-L173","name":"IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.unique_irreducible","line":151,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.unique_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization.unique_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">HasUnitMulPowIrreducibleFactorization</span>.<span class=\"name\">unique_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hR</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization\">HasUnitMulPowIrreducibleFactorization</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">R</span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Associated.html#Associated\">Associated</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L143-L145","name":"IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization","line":143,"kind":"def","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization","doc":"Alternative characterisation of discrete valuation rings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.HasUnitMulPowIrreducibleFactorization\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">HasUnitMulPowIrreducibleFactorization</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L136-L139","name":"IsDiscreteValuationRing.associated_of_irreducible","line":136,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.associated_of_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.associated_of_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">associated_of_irreducible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Associated.html#Associated\">Associated</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L106-L134","name":"IsDiscreteValuationRing.iff_pid_with_one_nonzero_prime","line":106,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.iff_pid_with_one_nonzero_prime","doc":"An integral domain is a DVR iff it's a PID with a unique non-zero prime ideal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.iff_pid_with_one_nonzero_prime\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">iff_pid_with_one_nonzero_prime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#IsPrincipalIdealRing\">IsPrincipalIdealRing</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">P</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Defs.html#Ideal\">Ideal</a> <span class=\"fn\">R</span></span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">P</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/RingTheory/Ideal/Prime.html#Ideal.IsPrime\">IsPrime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L102-L104","name":"IsDiscreteValuationRing.exists_prime","line":102,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.exists_prime","doc":"Uniformizers exist in a DVR. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.exists_prime\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">exists_prime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Prime\">Prime</a> <span class=\"fn\">ϖ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L97-L100","name":"IsDiscreteValuationRing.exists_irreducible","line":97,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.exists_irreducible","doc":"Uniformizers exist in a DVR. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.exists_irreducible\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">exists_irreducible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L91-L93","name":"Irreducible.maximalIdeal_eq","line":91,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#Irreducible.maximalIdeal_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#Irreducible.maximalIdeal_eq\"><span class=\"name\">Irreducible</span>.<span class=\"name\">maximalIdeal_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#IsLocalRing.maximalIdeal\">IsLocalRing.maximalIdeal</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#Ideal.span\">Ideal.span</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">ϖ</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L84-L89","name":"IsDiscreteValuationRing.irreducible_iff_uniformizer","line":84,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.irreducible_iff_uniformizer","doc":"An element of a DVR is irreducible iff it is a uniformizer, that is, generates the\nmaximal ideal of `R`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.irreducible_iff_uniformizer\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">irreducible_iff_uniformizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#IsLocalRing.maximalIdeal\">IsLocalRing.maximalIdeal</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#Ideal.span\">Ideal.span</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">ϖ</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L69-L82","name":"IsDiscreteValuationRing.irreducible_of_span_eq_maximalIdeal","line":69,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.irreducible_of_span_eq_maximalIdeal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.irreducible_of_span_eq_maximalIdeal\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">irreducible_of_span_eq_maximalIdeal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/Defs.html#IsLocalRing\">IsLocalRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ϖ</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hϖ</span> : <span class=\"fn\">ϖ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#IsLocalRing.maximalIdeal\">IsLocalRing.maximalIdeal</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#Ideal.span\">Ideal.span</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">ϖ</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Prime/Defs.html#Irreducible\">Irreducible</a> <span class=\"fn\">ϖ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L61-L63","name":"IsDiscreteValuationRing.not_isField","line":61,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.not_isField","doc":"A discrete valuation ring `R` is not a field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.not_isField\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">not_isField</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/IsField.html#IsField\">IsField</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L58-L59","name":"IsDiscreteValuationRing.not_a_field","line":58,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.not_a_field","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.not_a_field\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">not_a_field</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#IsLocalRing.maximalIdeal\">IsLocalRing.maximalIdeal</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L52-L52","name":"IsDiscreteValuationRing.not_a_field'","line":52,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.not_a_field'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.not_a_field'\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">not_a_field'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#IsLocalRing.maximalIdeal\">IsLocalRing.maximalIdeal</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L50-L50","name":"IsDiscreteValuationRing.mk","line":50,"kind":"ctor","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.mk\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toIsPrincipalIdealRing</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#IsPrincipalIdealRing\">IsPrincipalIdealRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toIsLocalRing</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/Defs.html#IsLocalRing\">IsLocalRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_a_field'</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/MaximalIdeal/Defs.html#IsLocalRing.maximalIdeal\">IsLocalRing.maximalIdeal</a> <span class=\"fn\">R</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L50-L52","name":"IsDiscreteValuationRing.toIsLocalRing","line":50,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.toIsLocalRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.toIsLocalRing\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">toIsLocalRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/Defs.html#IsLocalRing\">IsLocalRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L50-L52","name":"IsDiscreteValuationRing.toIsPrincipalIdealRing","line":50,"kind":"theorem","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.toIsPrincipalIdealRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing.toIsPrincipalIdealRing\"><span class=\"name\">IsDiscreteValuationRing</span>.<span class=\"name\">toIsPrincipalIdealRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\">IsDiscreteValuationRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#IsPrincipalIdealRing\">IsPrincipalIdealRing</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/DiscreteValuationRing/Basic.lean#L48-L52","name":"IsDiscreteValuationRing","line":48,"kind":"class","docLink":"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing","doc":"An integral domain is a *discrete valuation ring* (DVR) if it's a local PID which\nis not a field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/DiscreteValuationRing/Basic.html#IsDiscreteValuationRing\"><span class=\"name\">IsDiscreteValuationRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#IsPrincipalIdealRing\">IsPrincipalIdealRing</a> <span class=\"fn\">R</span></span>, <span class=\"fn\"><a href=\"./Mathlib/RingTheory/LocalRing/Defs.html#IsLocalRing\">IsLocalRing</a> <span class=\"fn\">R</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}