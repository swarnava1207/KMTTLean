{"name":"Mathlib.Tactic.ComputeDegree","instances":[],"imports":["Init","Mathlib.Algebra.Polynomial.Degree.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L501-L502","name":"Mathlib.Tactic.ComputeDegree.tacticMonicity!","line":501,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.tacticMonicity!","doc":"`monicity` tries to solve a goal of the form `Monic f`.\nIt converts the goal into a goal of the form `natDegree f ≤ n` and one of the form `f.coeff n = 1`\nand calls `compute_degree` on those two goals.\n\nThe variant `monicity!` starts like `monicity`, but calls `compute_degree!` on the two side-goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.tacticMonicity!\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">tacticMonicity!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L497-L498","name":"Mathlib.Tactic.ComputeDegree.monicityMacro","line":497,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.monicityMacro","doc":"`monicity` tries to solve a goal of the form `Monic f`.\nIt converts the goal into a goal of the form `natDegree f ≤ n` and one of the form `f.coeff n = 1`\nand calls `compute_degree` on those two goals.\n\nThe variant `monicity!` starts like `monicity`, but calls `compute_degree!` on the two side-goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.monicityMacro\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">monicityMacro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L448-L448","name":"Mathlib.Tactic.ComputeDegree.tacticCompute_degree!","line":448,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.tacticCompute_degree!","doc":"`compute_degree` is a tactic to solve goals of the form\n*  `natDegree f = d`,\n*  `degree f = d`,\n*  `natDegree f ≤ d`,\n*  `degree f ≤ d`,\n*  `coeff f d = r`, if `d` is the degree of `f`.\n\nThe tactic may leave goals of the form `d' = d`, `d' ≤ d`, or `r ≠ 0`, where `d'` in `ℕ` or\n`WithBot ℕ` is the tactic's guess of the degree, and `r` is the coefficient's guess of the\nleading coefficient of `f`.\n\n`compute_degree` applies `norm_num` to the left-hand side of all side goals, trying to close them.\n\nThe variant `compute_degree!` first applies `compute_degree`.\nThen it uses `norm_num` on all the remaining goals and tries `assumption`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.tacticCompute_degree!\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">tacticCompute_degree!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L426-L443","name":"Mathlib.Tactic.ComputeDegree.computeDegree","line":426,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.computeDegree","doc":"`compute_degree` is a tactic to solve goals of the form\n*  `natDegree f = d`,\n*  `degree f = d`,\n*  `natDegree f ≤ d`,\n*  `degree f ≤ d`,\n*  `coeff f d = r`, if `d` is the degree of `f`.\n\nThe tactic may leave goals of the form `d' = d`, `d' ≤ d`, or `r ≠ 0`, where `d'` in `ℕ` or\n`WithBot ℕ` is the tactic's guess of the degree, and `r` is the coefficient's guess of the\nleading coefficient of `f`.\n\n`compute_degree` applies `norm_num` to the left-hand side of all side goals, trying to close them.\n\nThe variant `compute_degree!` first applies `compute_degree`.\nThen it uses `norm_num` on all the remaining goals and tries `assumption`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.computeDegree\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">computeDegree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L393-L424","name":"Mathlib.Tactic.ComputeDegree.miscomputedDegree?","line":393,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.miscomputedDegree?","doc":"`miscomputedDegree? deg false_goals` takes as input\n*  an `Expr`ession `deg`, representing the degree of a polynomial\n   (i.e. an `Expr`ession of inferred type either `ℕ` or `WithBot ℕ`);\n*  a list of `MVarId`s `false_goals`.\n\nAlthough inconsequential for this function, the list of goals `false_goals` reduces to `False`\nif `norm_num`med.\n`miscomputedDegree?` extracts error information from goals of the form\n*  `a ≠ b`, assuming it comes from `⊢ coeff_of_given_degree ≠ 0`\n   -- reducing to `False` means that the coefficient that was supposed to vanish, does not;\n*  `a ≤ b`, assuming it comes from `⊢ degree_of_subterm ≤ degree_of_polynomial`\n   -- reducing to `False` means that there is a term of degree that is apparently too large;\n*  `a = b`, assuming it comes from `⊢ computed_degree ≤ given_degree`\n   -- reducing to `False` means that there is a term of degree that is apparently too large.\n\nThe cases `a ≠ b` and `a = b` are not a perfect match with the top coefficient:\nreducing to `False` is not exactly correlated with a coefficient being non-zero.\nIt does mean that `compute_degree` reduced the initial goal to an unprovable state\n(unless there was already a contradiction in the initial hypotheses!), but it is indicative that\nthere may be some problem.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.miscomputedDegree?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">miscomputedDegree?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">deg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L375-L391","name":"Mathlib.Tactic.ComputeDegree.splitApply","line":375,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.splitApply","doc":"`splitApply mvs static` takes two lists of `MVarId`s.  The first list, `mvs`,\ncorresponds to goals that are potentially within the scope of `compute_degree`:\nnamely, goals of the form\n`natDegree f ≤ d`, `degree f ≤ d`, `natDegree f = d`, `degree f = d`, `coeff f d = r`.\n\n`splitApply` determines which of these goals are actually within the scope, it applies the relevant\nlemma and returns two lists: the left-over goals of all the applications, followed by the\nconcatenation of the previous `static` list, followed by the newly discovered goals outside of the\nscope of `compute_degree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.splitApply\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">splitApply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvs </span><span class=\"fn\">static</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L347-L373","name":"Mathlib.Tactic.ComputeDegree.try_rfl","line":347,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.try_rfl","doc":"`try_rfl mvs` takes as input a list of `MVarId`s, scans them partitioning them into two\nlists: the goals containing some metavariables and the goals not containing any metavariable.\n\nIf a goal containing a metavariable has the form `?_ = x`, `x = ?_`, where `?_` is a metavariable\nand `x` is an expression that does not involve metavariables, then it closes this goal using `rfl`,\neffectively assigning the metavariable to `x`.\n\nIf a goal does not contain metavariables, it tries `rfl` on it.\n\nIt returns the list of `MVarId`s, beginning with the ones that initially involved (`Expr`)\nmetavariables followed by the rest.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.try_rfl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">try_rfl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L284-L345","name":"Mathlib.Tactic.ComputeDegree.dispatchLemma","line":284,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.dispatchLemma","doc":"`dispatchLemma twoH` takes its input `twoH` from the output of `twoHeadsArgs`.\n\nUsing the information contained in `twoH`, it decides which lemma is the most appropriate.\n\n`dispatchLemma` is essentially the main dictionary for `compute_degree`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.dispatchLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">dispatchLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">twoH</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>) <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">debug</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L242-L282","name":"Mathlib.Tactic.ComputeDegree.getCongrLemma","line":242,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.getCongrLemma","doc":"`getCongrLemma (lhs_name, rel_name, Mvars?)` returns the name of a lemma that preprocesses\none of the five target\n*  `natDegree f ≤ d`;\n*  `natDegree f = d`.\n*  `degree f ≤ d`;\n*  `degree f = d`.\n*  `coeff f d = r`.\n\nThe end goals are of the form\n* `natDegree f ≤ ?_`, `degree f ≤ ?_`, `coeff f ?_ = ?_`, with fresh metavariables;\n* `coeff f m ≠ s` with `m, s` not necessarily metavariables;\n* several equalities/inequalities between expressions and assignments for metavariables.\n\n`getCongrLemma` gets called at the very beginning of `compute_degree` and whenever an intermediate\ngoal does not have the right metavariables.\nNote that the side-goals of the congruence lemma are neither of the form `natDegree f = d` nor\nof the form `degree f = d`.\n\n`getCongrLemma` admits an optional \"debug\" flag: `getCongrLemma data true` prints the name of\nthe congruence lemma that it returns.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.getCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">getCongrLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">twoH</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">debug</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L195-L240","name":"Mathlib.Tactic.ComputeDegree.twoHeadsArgs","line":195,"kind":"def","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.twoHeadsArgs","doc":"`twoHeadsArgs e` takes an `Expr`ession `e` as input and recurses into `e` to make sure\nthe `e` looks like `lhs ≤ rhs` or `lhs = rhs` and that `lhs` is one of\n`natDegree f, degree f, coeff f d`.\nIt returns\n* the function being applied on the LHS (`natDegree`, `degree`, or `coeff`),\n  or else `.anonymous` if it's none of these.\n* the name of the relation (`Eq` or `LE.le`), or else `.anonymous` if it's none of these.\n* either\n  * `.inl zero`, `.inl one`, or `.inl many` if the polynomial in a numeral\n  * or `.inr` of the head symbol of `f`\n  * or `.inl .anonymous` if inapplicable\n* if it exists, whether the `rhs` is a metavariable\n* if the LHS is `coeff f d`, whether `d` is a metavariable\n\nThis is all the data needed to figure out whether `compute_degree` can make progress on `e`\nand, if so, which lemma it should apply.\n\nSample outputs:\n* `natDegree (f + g) ≤ d => (natDegree, LE.le, HAdd.hAdd, d.isMVar, none)` (similarly for `=`);\n* `degree (f * g) = d => (degree, Eq, HMul.hMul, d.isMVar, none)` (similarly for `≤`);\n* `coeff (1 : ℕ[X]) c = x => (coeff, Eq, one, x.isMVar, c.isMVar)` (no `≤` option!).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.twoHeadsArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">twoHeadsArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>) <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L184-L185","name":"Mathlib.Tactic.ComputeDegree.coeff_intCast_ite","line":184,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_intCast_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_intCast_ite\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">coeff_intCast_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L181-L182","name":"Mathlib.Tactic.ComputeDegree.coeff_sub_of_eq","line":181,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_sub_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_sub_of_eq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">coeff_sub_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span>).<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L179-L179","name":"Mathlib.Tactic.ComputeDegree.natDegree_intCast_le","line":179,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_intCast_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_intCast_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">natDegree_intCast_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L168-L170","name":"Mathlib.Tactic.ComputeDegree.coeff_congr","line":168,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_congr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">coeff_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">natDeg_eq_coeff</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L166-L167","name":"Mathlib.Tactic.ComputeDegree.coeff_congr_lhs","line":166,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_congr_lhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_congr_lhs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">coeff_congr_lhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">natDeg_eq_coeff</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L154-L162","name":"Mathlib.Tactic.ComputeDegree.degree_eq_of_le_of_coeff_ne_zero'","line":154,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.degree_eq_of_le_of_coeff_ne_zero'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.degree_eq_of_le_of_coeff_ne_zero'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">degree_eq_of_le_of_coeff_ne_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">deg </span><span class=\"fn\">m </span><span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_deg_le</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.degree\">degree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff_eq</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Order/WithBot.html#WithBot.unbotD\">WithBot.unbotD</a> <span class=\"fn\">0</span> <span class=\"fn\">deg</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff_ne_zero</span> : <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">deg_eq_deg</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">deg</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff_eq_deg</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">deg</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.degree\">degree</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">deg</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L137-L152","name":"Mathlib.Tactic.ComputeDegree.natDegree_eq_of_le_of_coeff_ne_zero'","line":137,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_eq_of_le_of_coeff_ne_zero'","doc":"The following two lemmas should be viewed as a hand-made \"congr\"-lemmas.\nThey achieve the following goals.\n* They introduce *two* fresh metavariables replacing the given one `deg`,\n  one for the `natDegree ≤` computation and one for the `coeff =` computation.\n  This helps `compute_degree`, since it does not \"pre-estimate\" the degree,\n  but it \"picks it up along the way\".\n* They split checking the inequality `coeff p n ≠ 0` into the task of\n  finding a value `c` for the `coeff` and then\n  proving that this value is non-zero by `coeff_ne_zero`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_eq_of_le_of_coeff_ne_zero'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">natDegree_eq_of_le_of_coeff_ne_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">deg </span><span class=\"fn\">m </span><span class=\"fn\">o</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_natDeg_le</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff_eq</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff_ne_zero</span> : <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">deg_eq_deg</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">deg</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff_eq_deg</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">deg</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">deg</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L133-L133","name":"Mathlib.Tactic.ComputeDegree.coeff_smul","line":133,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_smul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">coeff_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>).<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L129-L131","name":"Mathlib.Tactic.ComputeDegree.degree_smul_le_of_le","line":129,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.degree_smul_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.degree_smul_le_of_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">degree_smul_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.degree\">degree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>).<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.degree\">degree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L125-L127","name":"Mathlib.Tactic.ComputeDegree.natDegree_smul_le_of_le","line":125,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_smul_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_smul_le_of_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">natDegree_smul_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>).<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L114-L123","name":"Mathlib.Tactic.ComputeDegree.coeff_pow_of_natDegree_le_of_eq_ite'","line":114,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_pow_of_natDegree_le_of_eq_ite'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_pow_of_natDegree_le_of_eq_ite'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">coeff_pow_of_natDegree_le_of_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n </span><span class=\"fn\">o</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_pow</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_exp</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_pow_bas</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span>).<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L102-L112","name":"Mathlib.Tactic.ComputeDegree.coeff_mul_add_of_le_natDegree_of_eq_ite","line":102,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_mul_add_of_le_natDegree_of_eq_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_mul_add_of_le_natDegree_of_eq_ite\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">coeff_mul_add_of_le_natDegree_of_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d </span><span class=\"fn\">df </span><span class=\"fn\">dg</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_mul_left</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">df</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_mul_right</span> : <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">dg</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">df</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">dg</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> → <span class=\"fn\">∀ (<span class=\"fn\">ddf</span> : <span class=\"fn\">df</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">dg</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">d</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">g</span>).<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">df</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">dg</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L98-L100","name":"Mathlib.Tactic.ComputeDegree.coeff_add_of_eq","line":98,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_add_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.coeff_add_of_eq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">coeff_add_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_add_left</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_add_right</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span>).<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L96-L96","name":"Mathlib.Tactic.ComputeDegree.natDegree_one_le","line":96,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_one_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_one_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">natDegree_one_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">Polynomial.natDegree</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L95-L95","name":"Mathlib.Tactic.ComputeDegree.natDegree_zero_le","line":95,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_zero_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_zero_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">natDegree_zero_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">Polynomial.natDegree</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L94-L94","name":"Mathlib.Tactic.ComputeDegree.natDegree_natCast_le","line":94,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_natCast_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_natCast_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">natDegree_natCast_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ComputeDegree.lean#L92-L92","name":"Mathlib.Tactic.ComputeDegree.natDegree_C_le","line":92,"kind":"theorem","docLink":"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_C_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ComputeDegree.html#Mathlib.Tactic.ComputeDegree.natDegree_C_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ComputeDegree</span>.<span class=\"name\">natDegree_C_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.C\">Polynomial.C</a> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"}]}