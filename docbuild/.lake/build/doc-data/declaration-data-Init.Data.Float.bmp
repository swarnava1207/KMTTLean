{"name":"Init.Data.Float","instances":[{"typeNames":["Float"],"name":"instNonemptyFloat","className":"Nonempty"},{"typeNames":["Float"],"name":"instAddFloat","className":"Add"},{"typeNames":["Float"],"name":"instSubFloat","className":"Sub"},{"typeNames":["Float"],"name":"instMulFloat","className":"Mul"},{"typeNames":["Float"],"name":"instDivFloat","className":"Div"},{"typeNames":["Float"],"name":"instNegFloat","className":"Neg"},{"typeNames":["Float"],"name":"instLTFloat","className":"LT"},{"typeNames":["Float"],"name":"instLEFloat","className":"LE"},{"typeNames":["Float"],"name":"instBEqFloat","className":"BEq"},{"typeNames":["LT.lt"],"name":"floatDecLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"floatDecLe","className":"Decidable"},{"typeNames":["Float"],"name":"instToStringFloat","className":"ToString"},{"typeNames":["Float"],"name":"instInhabitedFloat","className":"Inhabited"},{"typeNames":["Float"],"name":"instReprFloat","className":"Repr"},{"typeNames":["Float"],"name":"instReprAtomFloat","className":"ReprAtom"},{"typeNames":["Float"],"name":"instHomogeneousPowFloat","className":"HomogeneousPow"},{"typeNames":["Float"],"name":"instMinFloat","className":"Min"},{"typeNames":["Float"],"name":"instMaxFloat","className":"Max"}],"imports":["Init.Core","Init.Data.Int.Basic","Init.Data.ToString.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L490-L496","name":"Float.scaleB","line":490,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.scaleB","doc":"Efficiently computes `x * 2^i`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.scaleB\"><span class=\"name\">Float</span>.<span class=\"name\">scaleB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L488-L488","name":"instMaxFloat","line":488,"kind":"instance","docLink":"./Init/Data/Float.html#instMaxFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instMaxFloat\"><span class=\"name\">instMaxFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L486-L486","name":"instMinFloat","line":486,"kind":"instance","docLink":"./Init/Data/Float.html#instMinFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instMinFloat\"><span class=\"name\">instMinFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L484-L484","name":"instHomogeneousPowFloat","line":484,"kind":"instance","docLink":"./Init/Data/Float.html#instHomogeneousPowFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instHomogeneousPowFloat\"><span class=\"name\">instHomogeneousPowFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HomogeneousPow\">HomogeneousPow</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L476-L482","name":"Float.abs","line":476,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.abs","doc":"Computes the absolute value of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`fabs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.abs\"><span class=\"name\">Float</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L469-L475","name":"Float.round","line":469,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.round","doc":"Rounds to the nearest integer, rounding away from zero at half-way points.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`round`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.round\"><span class=\"name\">Float</span>.<span class=\"name\">round</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L457-L468","name":"Float.floor","line":457,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.floor","doc":"Computes the floor of a floating-point number, which is the largest integer that's no larger\nthan the given number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`floor`.\n\nExamples:\n * `Float.floor 1.5 = 1`\n * `Float.floor (-1.5) = (-2)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.floor\"><span class=\"name\">Float</span>.<span class=\"name\">floor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L445-L456","name":"Float.ceil","line":445,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.ceil","doc":"Computes the ceiling of a floating-point number, which is the smallest integer that's no smaller\nthan the given number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`ceil`.\n\nExamples:\n * `Float.ceil 1.5 = 2`\n * `Float.ceil (-1.5) = (-1)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.ceil\"><span class=\"name\">Float</span>.<span class=\"name\">ceil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L438-L444","name":"Float.cbrt","line":438,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.cbrt","doc":"Computes the cube root of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cbrt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.cbrt\"><span class=\"name\">Float</span>.<span class=\"name\">cbrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L431-L437","name":"Float.sqrt","line":431,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.sqrt","doc":"Computes the square root of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sqrt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.sqrt\"><span class=\"name\">Float</span>.<span class=\"name\">sqrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L424-L430","name":"Float.pow","line":424,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.pow","doc":"Raises one floating-point number to the power of another. Typically used via the `^` operator.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`pow`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.pow\"><span class=\"name\">Float</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L417-L423","name":"Float.log10","line":417,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.log10","doc":"Computes the base-10 logarithm of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log10`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.log10\"><span class=\"name\">Float</span>.<span class=\"name\">log10</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L410-L416","name":"Float.log2","line":410,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.log2","doc":"Computes the base-2 logarithm of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log2`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.log2\"><span class=\"name\">Float</span>.<span class=\"name\">log2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L403-L409","name":"Float.log","line":403,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.log","doc":"Computes the natural logarithm `ln x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.log\"><span class=\"name\">Float</span>.<span class=\"name\">log</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L396-L402","name":"Float.exp2","line":396,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.exp2","doc":"Computes the base-2 exponential `2^x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`exp2`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.exp2\"><span class=\"name\">Float</span>.<span class=\"name\">exp2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L389-L395","name":"Float.exp","line":389,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.exp","doc":"Computes the exponential `e^x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`exp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.exp\"><span class=\"name\">Float</span>.<span class=\"name\">exp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L382-L388","name":"Float.atanh","line":382,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.atanh","doc":"Computes the hyperbolic arc tangent (inverse tangent) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atanh`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.atanh\"><span class=\"name\">Float</span>.<span class=\"name\">atanh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L375-L381","name":"Float.acosh","line":375,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.acosh","doc":"Computes the hyperbolic arc cosine (inverse cosine) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`acosh`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.acosh\"><span class=\"name\">Float</span>.<span class=\"name\">acosh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L368-L374","name":"Float.asinh","line":368,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.asinh","doc":"Computes the hyperbolic arc sine (inverse sine) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`asinh`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.asinh\"><span class=\"name\">Float</span>.<span class=\"name\">asinh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L361-L367","name":"Float.tanh","line":361,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.tanh","doc":"Computes the hyperbolic tangent of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`tanh`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.tanh\"><span class=\"name\">Float</span>.<span class=\"name\">tanh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L354-L360","name":"Float.cosh","line":354,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.cosh","doc":"Computes the hyperbolic cosine of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cosh`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.cosh\"><span class=\"name\">Float</span>.<span class=\"name\">cosh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L347-L353","name":"Float.sinh","line":347,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.sinh","doc":"Computes the hyperbolic sine of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sinh`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.sinh\"><span class=\"name\">Float</span>.<span class=\"name\">sinh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L339-L346","name":"Float.atan2","line":339,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.atan2","doc":"Computes the arc tangent (inverse tangent) of `y / x` in radians, in the range `-π`–`π`. The signs\nof the arguments determine the quadrant of the result.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atan2`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.atan2\"><span class=\"name\">Float</span>.<span class=\"name\">atan2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L332-L338","name":"Float.atan","line":332,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.atan","doc":"Computes the arc tangent (inverse tangent) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atan`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.atan\"><span class=\"name\">Float</span>.<span class=\"name\">atan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L325-L331","name":"Float.acos","line":325,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.acos","doc":"Computes the arc cosine (inverse cosine) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`acos`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.acos\"><span class=\"name\">Float</span>.<span class=\"name\">acos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L318-L324","name":"Float.asin","line":318,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.asin","doc":"Computes the arc sine (inverse sine) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`asin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.asin\"><span class=\"name\">Float</span>.<span class=\"name\">asin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L311-L317","name":"Float.tan","line":311,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.tan","doc":"Computes the tangent of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`tan`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.tan\"><span class=\"name\">Float</span>.<span class=\"name\">tan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L304-L310","name":"Float.cos","line":304,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.cos","doc":"Computes the cosine of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cos`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.cos\"><span class=\"name\">Float</span>.<span class=\"name\">cos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L297-L303","name":"Float.sin","line":297,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.sin","doc":"Computes the sine of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.sin\"><span class=\"name\">Float</span>.<span class=\"name\">sin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L295-L295","name":"instReprAtomFloat","line":295,"kind":"instance","docLink":"./Init/Data/Float.html#instReprAtomFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instReprAtomFloat\"><span class=\"name\">instReprAtomFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L292-L293","name":"instReprFloat","line":292,"kind":"instance","docLink":"./Init/Data/Float.html#instReprFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instReprFloat\"><span class=\"name\">instReprFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L289-L290","name":"instInhabitedFloat","line":289,"kind":"instance","docLink":"./Init/Data/Float.html#instInhabitedFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instInhabitedFloat\"><span class=\"name\">instInhabitedFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L277-L287","name":"USize.toFloat","line":277,"kind":"opaque","docLink":"./Init/Data/Float.html#USize.toFloat","doc":"Obtains a `Float` whose value is near the given `USize`.\n\nIt will be exactly the value of the given `USize` if such a `Float` exists. If no such `Float`\nexists, the returned value will either be the smallest `Float` that is larger than the given value,\nor the largest `Float` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#USize.toFloat\"><span class=\"name\">USize</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L266-L276","name":"UInt64.toFloat","line":266,"kind":"opaque","docLink":"./Init/Data/Float.html#UInt64.toFloat","doc":"Obtains a `Float` whose value is near the given `UInt64`.\n\nIt will be exactly the value of the given `UInt64` if such a `Float` exists. If no such `Float`\nexists, the returned value will either be the smallest `Float` that is larger than the given value,\nor the largest `Float` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#UInt64.toFloat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L264-L265","name":"UInt32.toFloat","line":264,"kind":"opaque","docLink":"./Init/Data/Float.html#UInt32.toFloat","doc":"Obtains the `Float` whose value is the same as the given `UInt32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#UInt32.toFloat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L262-L263","name":"UInt16.toFloat","line":262,"kind":"opaque","docLink":"./Init/Data/Float.html#UInt16.toFloat","doc":"Obtains the `Float` whose value is the same as the given `UInt16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#UInt16.toFloat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L260-L261","name":"UInt8.toFloat","line":260,"kind":"opaque","docLink":"./Init/Data/Float.html#UInt8.toFloat","doc":"Obtains the `Float` whose value is the same as the given `UInt8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#UInt8.toFloat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L257-L258","name":"instToStringFloat","line":257,"kind":"instance","docLink":"./Init/Data/Float.html#instToStringFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instToStringFloat\"><span class=\"name\">instToStringFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L248-L255","name":"Float.frExp","line":248,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.frExp","doc":"Splits the given float `x` into a significand/exponent pair `(s, i)` such that `x = s * 2^i` where\n`s ∈ (-1;-0.5] ∪ [0.5; 1)`. Returns an undefined value if `x` is not finite.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`frexp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.frExp\"><span class=\"name\">Float</span>.<span class=\"name\">frExp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L240-L246","name":"Float.isInf","line":240,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.isInf","doc":"Checks whether a floating-point number is a positive or negative infinite number, but not a finite\nnumber or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isinf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.isInf\"><span class=\"name\">Float</span>.<span class=\"name\">isInf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L232-L238","name":"Float.isFinite","line":232,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.isFinite","doc":"Checks whether a floating-point number is finite, that is, whether it is normal, subnormal, or zero,\nbut not infinite or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isfinite`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.isFinite\"><span class=\"name\">Float</span>.<span class=\"name\">isFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L223-L230","name":"Float.isNaN","line":223,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.isNaN","doc":"Checks whether a floating point number is `NaN` (“not a number”) value.\n\n`NaN` values result from operations that might otherwise be errors, such as dividing zero by zero.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isnan`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.isNaN\"><span class=\"name\">Float</span>.<span class=\"name\">isNaN</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L212-L221","name":"Float.toUSize","line":212,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.toUSize","doc":"Converts a floating-point number to a word-sized unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `USize`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `USize` value (i.e. `USize.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUSize\"><span class=\"name\">Float</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L202-L211","name":"Float.toUInt64","line":202,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.toUInt64","doc":"Converts a floating-point number to a 64-bit unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt64`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `UInt64` value (i.e. `UInt64.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUInt64\"><span class=\"name\">Float</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L192-L201","name":"Float.toUInt32","line":192,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.toUInt32","doc":"Converts a floating-point number to a 32-bit unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt32`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `UInt32` value (i.e. `UInt32.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUInt32\"><span class=\"name\">Float</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L182-L191","name":"Float.toUInt16","line":182,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.toUInt16","doc":"Converts a floating-point number to a 16-bit unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt16`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `UInt16` value (i.e. `UInt16.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUInt16\"><span class=\"name\">Float</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L172-L181","name":"Float.toUInt8","line":172,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.toUInt8","doc":"Converts a floating-point number to an 8-bit unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt8`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `UInt8` value (i.e. `UInt8.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUInt8\"><span class=\"name\">Float</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L165-L170","name":"Float.toString","line":165,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.toString","doc":"Converts a floating-point number to a string.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toString\"><span class=\"name\">Float</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L163-L163","name":"floatDecLe","line":163,"kind":"instance","docLink":"./Init/Data/Float.html#floatDecLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#floatDecLe\"><span class=\"name\">floatDecLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L162-L162","name":"floatDecLt","line":162,"kind":"instance","docLink":"./Init/Data/Float.html#floatDecLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#floatDecLt\"><span class=\"name\">floatDecLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L153-L160","name":"Float.decLe","line":153,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.decLe","doc":"Compares two floating point numbers for non-strict inequality.\n\nThis function does not reduce in the kernel. It is compiled to the C inequality operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.decLe\"><span class=\"name\">Float</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L144-L151","name":"Float.decLt","line":144,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.decLt","doc":"Compares two floating point numbers for strict inequality.\n\nThis function does not reduce in the kernel. It is compiled to the C inequality operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.decLt\"><span class=\"name\">Float</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L142-L142","name":"instBEqFloat","line":142,"kind":"instance","docLink":"./Init/Data/Float.html#instBEqFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instBEqFloat\"><span class=\"name\">instBEqFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L131-L140","name":"Float.beq","line":131,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.beq","doc":"Checks whether two floating-point numbers are equal according to IEEE 754.\n\nFloating-point equality does not correspond with propositional equality. In particular, it is not\nreflexive since `NaN != NaN`, and it is not a congruence because `0.0 == -0.0`, but\n`1.0 / 0.0 != 1.0 / -0.0`.\n\nThis function does not reduce in the kernel. It is compiled to the C equality operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.beq\"><span class=\"name\">Float</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L129-L129","name":"instLEFloat","line":129,"kind":"instance","docLink":"./Init/Data/Float.html#instLEFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instLEFloat\"><span class=\"name\">instLEFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L128-L128","name":"instLTFloat","line":128,"kind":"instance","docLink":"./Init/Data/Float.html#instLTFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instLTFloat\"><span class=\"name\">instLTFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L127-L127","name":"instNegFloat","line":127,"kind":"instance","docLink":"./Init/Data/Float.html#instNegFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instNegFloat\"><span class=\"name\">instNegFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L126-L126","name":"instDivFloat","line":126,"kind":"instance","docLink":"./Init/Data/Float.html#instDivFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instDivFloat\"><span class=\"name\">instDivFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L125-L125","name":"instMulFloat","line":125,"kind":"instance","docLink":"./Init/Data/Float.html#instMulFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instMulFloat\"><span class=\"name\">instMulFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L124-L124","name":"instSubFloat","line":124,"kind":"instance","docLink":"./Init/Data/Float.html#instSubFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instSubFloat\"><span class=\"name\">instSubFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L123-L123","name":"instAddFloat","line":123,"kind":"instance","docLink":"./Init/Data/Float.html#instAddFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instAddFloat\"><span class=\"name\">instAddFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L111-L121","name":"Float.toBits","line":111,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.toBits","doc":"Bit-for-bit conversion to `UInt64`. Interprets a `Float` as a `UInt64`, ignoring the numeric value\nand treating the `Float`'s bit pattern as a `UInt64`.\n\n`Float`s and `UInt64`s have the same endianness on all supported platforms. IEEE 754 very precisely\nspecifies the bit layout of floats.\n\nThis function is distinct from `Float.toUInt64`, which attempts to preserve the numeric value rather\nthan reinterpreting the bit pattern.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toBits\"><span class=\"name\">Float</span>.<span class=\"name\">toBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L100-L109","name":"Float.ofBits","line":100,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.ofBits","doc":"Bit-for-bit conversion from `UInt64`. Interprets a `UInt64` as a `Float`, ignoring the numeric value\nand treating the `UInt64`'s bit pattern as a `Float`.\n\n`Float`s and `UInt64`s have the same endianness on all supported platforms. IEEE 754 very precisely\nspecifies the bit layout of floats.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.ofBits\"><span class=\"name\">Float</span>.<span class=\"name\">ofBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L94-L98","name":"Float.le","line":94,"kind":"def","docLink":"./Init/Data/Float.html#Float.le","doc":"Non-strict inequality of floating-point numbers. Typically used via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.le\"><span class=\"name\">Float</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L87-L92","name":"Float.lt","line":87,"kind":"def","docLink":"./Init/Data/Float.html#Float.lt","doc":"Strict inequality of floating-point numbers. Typically used via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.lt\"><span class=\"name\">Float</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L78-L84","name":"Float.neg","line":78,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.neg","doc":"Negates 64-bit floating-point numbers according to IEEE 754. Typically used via the `-` prefix\noperator.\n\nThis function does not reduce in the kernel. It is compiled to the C negation operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.neg\"><span class=\"name\">Float</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L69-L77","name":"Float.div","line":69,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.div","doc":"Divides 64-bit floating-point numbers according to IEEE 754. Typically used via the `/` operator.\n\nIn Lean, division by zero typically yields zero. For `Float`, it instead yields either `Inf`,\n`-Inf`, or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C division operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.div\"><span class=\"name\">Float</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L63-L68","name":"Float.mul","line":63,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.mul","doc":"Multiplies 64-bit floating-point numbers according to IEEE 754. Typically used via the `*` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C multiplication operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.mul\"><span class=\"name\">Float</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L57-L62","name":"Float.sub","line":57,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.sub","doc":"Subtracts 64-bit floating-point numbers according to IEEE 754. Typically used via the `-` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C subtraction operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.sub\"><span class=\"name\">Float</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L51-L56","name":"Float.add","line":51,"kind":"opaque","docLink":"./Init/Data/Float.html#Float.add","doc":"Adds two 64-bit floating-point numbers according to IEEE 754. Typically used via the `+` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C addition operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.add\"><span class=\"name\">Float</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L49-L49","name":"instNonemptyFloat","line":49,"kind":"instance","docLink":"./Init/Data/Float.html#instNonemptyFloat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instNonemptyFloat\"><span class=\"name\">instNonemptyFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L47-L47","name":"Float.val","line":47,"kind":"def","docLink":"./Init/Data/Float.html#Float.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.val\"><span class=\"name\">Float</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#floatSpec\">floatSpec</a>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L46-L46","name":"Float.mk","line":46,"kind":"ctor","docLink":"./Init/Data/Float.html#Float.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.mk\"><span class=\"name\">Float</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\"><a href=\"./Init/Data/Float.html#floatSpec\">floatSpec</a>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L29-L47","name":"Float","line":29,"kind":"structure","docLink":"./Init/Data/Float.html#Float","doc":"64-bit floating-point numbers.\n\n`Float` corresponds to the IEEE 754 *binary64* format (`double` in C or `f64` in Rust).\nFloating-point numbers are a finite representation of a subset of the real numbers, extended with\nextra “sentinel” values that represent undefined and infinite results as well as separate positive\nand negative zeroes. Arithmetic on floating-point numbers approximates the corresponding operations\non the real numbers by rounding the results to numbers that are representable, propagating error and\ninfinite values.\n\nFloating-point numbers include [subnormal numbers](https://en.wikipedia.org/wiki/Subnormal_number).\nTheir special values are:\n * `NaN`, which denotes a class of “not a number” values that result from operations such as\n   dividing zero by zero, and\n * `Inf` and `-Inf`, which represent positive and infinities that result from dividing non-zero\n   values by zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float\"><span class=\"name\">Float</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L20-L27","name":"floatSpec","line":20,"kind":"opaque","docLink":"./Init/Data/Float.html#floatSpec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#floatSpec\"><span class=\"name\">floatSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L17-L17","name":"FloatSpec.decLe","line":17,"kind":"def","docLink":"./Init/Data/Float.html#FloatSpec.decLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.decLe\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.le\">le</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L16-L16","name":"FloatSpec.decLt","line":16,"kind":"def","docLink":"./Init/Data/Float.html#FloatSpec.decLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.decLt\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.lt\">lt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L15-L15","name":"FloatSpec.le","line":15,"kind":"def","docLink":"./Init/Data/Float.html#FloatSpec.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.le\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span> → <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L14-L14","name":"FloatSpec.lt","line":14,"kind":"def","docLink":"./Init/Data/Float.html#FloatSpec.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.lt\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span> → <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L13-L13","name":"FloatSpec.val","line":13,"kind":"def","docLink":"./Init/Data/Float.html#FloatSpec.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.val\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L12-L12","name":"FloatSpec.float","line":12,"kind":"def","docLink":"./Init/Data/Float.html#FloatSpec.float","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.float\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">float</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L11-L11","name":"FloatSpec.mk","line":11,"kind":"ctor","docLink":"./Init/Data/Float.html#FloatSpec.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.mk\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">float</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">float</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt </span><span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">float</span> → <span class=\"fn\">float</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decLt</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decLe</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Float.lean#L11-L17","name":"FloatSpec","line":11,"kind":"structure","docLink":"./Init/Data/Float.html#FloatSpec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec\"><span class=\"name\">FloatSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>"}]}