{"name":"Lean.Elab.Tactic.LibrarySearch","instances":[],"imports":["Lean.Meta.Tactic.LibrarySearch","Lean.Meta.Tactic.TryThis","Lean.Elab.Tactic.ElabTerm"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Elab/Tactic/LibrarySearch.lean#L105-L118","name":"Lean.Elab.LibrarySearch.elabExact?Term","line":105,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.elabExact?Term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.elabExact?Term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">elabExact?Term</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Elab/Tactic/LibrarySearch.lean#L99-L103","name":"Lean.Elab.LibrarySearch.evalApply","line":99,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.evalApply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.evalApply\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">evalApply</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Elab/Tactic/LibrarySearch.lean#L92-L96","name":"Lean.Elab.LibrarySearch.evalExact","line":92,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.evalExact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.evalExact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">evalExact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Elab/Tactic/LibrarySearch.lean#L71-L90","name":"Lean.Elab.LibrarySearch.exact?.addSuggestionIfValid","line":71,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.exact?.addSuggestionIfValid","doc":"Suggests using the value of `goal` as a proof term if the corresponding tactic is valid at\n`origGoal`, or else informs the user that a proof exists but is not syntactically valid.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.exact?.addSuggestionIfValid\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">exact?</span>.<span class=\"name\">addSuggestionIfValid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initialState</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">Tactic.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addSubgoalsMsg</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorOnInvalid</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Elab/Tactic/LibrarySearch.lean#L59-L65","name":"Lean.Elab.LibrarySearch.exact?.evalTacticWithState","line":59,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.exact?.evalTacticWithState","doc":"Executes `tac` in `savedState` (then restores the current state). Used to ensure that a suggested\ntactic is valid.\n\nRemark: we don't merely elaborate the proof term's syntax because it may successfully round-trip\n(d)elaboration but still produce an invalid tactic (see the example in #5407).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.exact?.evalTacticWithState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">exact?</span>.<span class=\"name\">evalTacticWithState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedState</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">Tactic.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Elab/Tactic/LibrarySearch.lean#L16-L90","name":"Lean.Elab.LibrarySearch.exact?","line":16,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.exact?","doc":"Implementation of the `exact?` tactic.\n\n* `ref` contains the input syntax and is used for locations in error reporting.\n* `required` contains an optional list of terms that should be used in closing the goal.\n* `requireClose` indicates if the goal must be closed.\n  It is `true` for `exact?` and `false` for `apply?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.exact?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">exact?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">required</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`term</span>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">requireClose</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}