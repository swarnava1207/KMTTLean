{"name":"Mathlib.Tactic.CongrM","instances":[],"imports":["Init","Mathlib.Tactic.TermCongr","Mathlib.Tactic.WithoutCDot"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrM.lean#L23-L58","name":"Mathlib.Tactic.congrM","line":23,"kind":"def","docLink":"./Mathlib/Tactic/CongrM.html#Mathlib.Tactic.congrM","doc":"`congrm e` is a tactic for proving goals of the form `lhs = rhs`, `lhs ↔ rhs`, `HEq lhs rhs`,\nor `R lhs rhs` when `R` is a reflexive relation.\nThe expression `e` is a pattern containing placeholders `?_`,\nand this pattern is matched against `lhs` and `rhs` simultaneously.\nThese placeholders generate new goals that state that corresponding subexpressions\nin `lhs` and `rhs` are equal.\nIf the placeholders have names, such as `?m`, then the new goals are given tags with those names.\n\nExamples:\n```lean\nexample {a b c d : ℕ} :\n    Nat.pred a.succ * (d + (c + a.pred)) = Nat.pred b.succ * (b + (c + d.pred)) := by\n  congrm Nat.pred (Nat.succ ?h1) * (?h2 + ?h3)\n  /-  Goals left:\n  case h1 ⊢ a = b\n  case h2 ⊢ d = b\n  case h3 ⊢ c + a.pred = c + d.pred\n  -/\n  sorry\n  sorry\n  sorry\n\nexample {a b : ℕ} (h : a = b) : (fun y : ℕ => ∀ z, a + a = z) = (fun x => ∀ z, b + a = z) := by\n  congrm fun x => ∀ w, ?_ + a = w\n  -- ⊢ a = b\n  exact h\n```\n\nThe `congrm` command is a convenient frontend to `congr(...)` congruence quotations.\nIf the goal is an equality, `congrm e` is equivalent to `refine congr(e')` where `e'` is\nbuilt from `e` by replacing each placeholder `?m` by `$(?m)`.\nThe pattern `e` is allowed to contain `$(...)` expressions to immediately substitute\nequality proofs into the congruence, just like for congruence quotations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrM.html#Mathlib.Tactic.congrM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">congrM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}