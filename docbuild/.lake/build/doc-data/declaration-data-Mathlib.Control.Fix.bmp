{"name":"Mathlib.Control.Fix","instances":[{"typeNames":["Part"],"name":"Part.hasFix","className":"Fix"},{"typeNames":[],"name":"Pi.Part.hasFix","className":"Fix"}],"imports":["Init","Mathlib.Data.Part","Mathlib.Data.Nat.Find","Mathlib.Data.Nat.Upto","Mathlib.Data.Stream.Defs","Mathlib.Tactic.Common"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L123-L124","name":"Pi.Part.hasFix","line":123,"kind":"instance","docLink":"./Mathlib/Control/Fix.html#Pi.Part.hasFix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Pi.Part.hasFix\"><span class=\"name\">Pi</span>.<span class=\"name\">Part</span>.<span class=\"name\">hasFix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix\">Fix</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L114-L115","name":"Part.hasFix","line":114,"kind":"instance","docLink":"./Mathlib/Control/Fix.html#Part.hasFix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Part.hasFix\"><span class=\"name\">Part</span>.<span class=\"name\">hasFix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix\">Fix</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L104-L106","name":"Part.fix_def'","line":104,"kind":"theorem","docLink":"./Mathlib/Control/Fix.html#Part.fix_def'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Part.fix_def'\"><span class=\"name\">Part</span>.<span class=\"name\">fix_def'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>)</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">∃ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Fix.approx</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/Part.html#Part.Dom\">Dom</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Part.html#Part.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L68-L102","name":"Part.fix_def","line":68,"kind":"theorem","docLink":"./Mathlib/Control/Fix.html#Part.fix_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Part.fix_def\"><span class=\"name\">Part</span>.<span class=\"name\">fix_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>)</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Fix.approx</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/Part.html#Part.Dom\">Dom</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.fix\">Part.fix</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\">Fix.approx</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Find.html#Nat.find\">Nat.find</a> <span class=\"fn\">h'</span>)</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L55-L65","name":"Part.fix","line":55,"kind":"def","docLink":"./Mathlib/Control/Fix.html#Part.fix","doc":"The least fixed point of `f`.\n\nIf `f` is a continuous function (according to complete partial orders),\nit satisfies the equations:\n\n  1. `fix f = f (fix f)`          (is a fixed point)\n  2. `∀ X, f X ≤ X → fix f ≤ X`   (least fixed point)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Part.fix\"><span class=\"name\">Part</span>.<span class=\"name\">fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>)</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L50-L53","name":"Part.fixAux","line":50,"kind":"def","docLink":"./Mathlib/Control/Fix.html#Part.fixAux","doc":"loop body for finding the fixed point of `f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Part.fixAux\"><span class=\"name\">Part</span>.<span class=\"name\">fixAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>)</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto\">Nat.Upto</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Upto.html#Nat.Upto\">Nat.Upto</a> <span class=\"fn\">p</span></span>) → <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L44-L48","name":"Part.Fix.approx","line":44,"kind":"def","docLink":"./Mathlib/Control/Fix.html#Part.Fix.approx","doc":"A series of successive, finite approximation of the fixed point of `f`, defined by\n`approx f n = f^[n] ⊥`. The limit of this chain is the fixed point of `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Part.Fix.approx\"><span class=\"name\">Part</span>.<span class=\"name\">Fix</span>.<span class=\"name\">approx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>)</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L34-L34","name":"Fix.fix","line":34,"kind":"def","docLink":"./Mathlib/Control/Fix.html#Fix.fix","doc":"`fix f` represents the computation of a fixed point for `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Fix.fix\"><span class=\"name\">Fix</span>.<span class=\"name\">fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix\">Fix</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">α</span>)</span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L32-L32","name":"Fix.mk","line":32,"kind":"ctor","docLink":"./Mathlib/Control/Fix.html#Fix.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Fix.mk\"><span class=\"name\">Fix</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fix</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">α</span>)</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Fix.html#Fix\">Fix</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Fix.lean#L30-L34","name":"Fix","line":30,"kind":"class","docLink":"./Mathlib/Control/Fix.html#Fix","doc":"`Fix α` provides a `fix` operator to define recursive computation\nvia the fixed point of function of type `α → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Fix.html#Fix\"><span class=\"name\">Fix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_3</div></div>"}]}