{"name":"Mathlib.Tactic.Linarith.Datatypes","instances":[{"typeNames":["Linarith.Comp"],"name":"Linarith.instInhabitedComp","className":"Inhabited"},{"typeNames":["Linarith.Comp"],"name":"Linarith.instReprComp","className":"Repr"},{"typeNames":["Linarith.Comp"],"name":"Linarith.Comp.ToFormat","className":"Std.ToFormat"},{"typeNames":["Linarith.Preprocessor","Linarith.GlobalBranchingPreprocessor"],"name":"Linarith.PreprocessorToGlobalBranchingPreprocessor","className":"Coe"},{"typeNames":["Linarith.GlobalPreprocessor","Linarith.GlobalBranchingPreprocessor"],"name":"Linarith.GlobalPreprocessorToGlobalBranchingPreprocessor","className":"Coe"}],"imports":["Init","Mathlib.Tactic.Linarith.Lemmas","Mathlib.Tactic.NormNum.Basic","Mathlib.Util.SynthesizeUsing"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L288-L306","name":"Linarith.mkSingleCompZeroOf","line":288,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.mkSingleCompZeroOf","doc":"`mkSingleCompZeroOf c h` assumes that `h` is a proof of `t R 0`.\nIt produces a pair `(R', h')`, where `h'` is a proof of `c*t R' 0`.\nTypically `R` and `R'` will be the same, except when `c = 0`, in which case `R'` is `=`.\nIf `c = 1`, `h'` is the same as `h` -- specifically, it does *not* change the type to `1*t R 0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.mkSingleCompZeroOf\"><span class=\"name\">Linarith</span>.<span class=\"name\">mkSingleCompZeroOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Mathlib.Ineq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L280-L286","name":"Linarith.parseCompAndExpr","line":280,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.parseCompAndExpr","doc":"`parseCompAndExpr e` checks if `e` is of the form `t < 0`, `t ≤ 0`, or `t = 0`.\nIf it is, it returns the comparison along with `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.parseCompAndExpr\"><span class=\"name\">Linarith</span>.<span class=\"name\">parseCompAndExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Mathlib.Ineq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L272-L272","name":"Linarith.CertificateOracle.produceCertificate","line":272,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle.produceCertificate","doc":"`produceCertificate hyps max_var` tries to derive a contradiction from the comparisons in\n`hyps` by eliminating all variables ≤ `max_var`.\nIf successful, it returns a map `coeff : Nat → Nat` as a certificate.\nThis map represents that we can find a contradiction by taking the sum `∑ (coeff i) * hyps[i]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle.produceCertificate\"><span class=\"name\">Linarith</span>.<span class=\"name\">CertificateOracle</span>.<span class=\"name\">produceCertificate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle\">CertificateOracle</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max_var</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L267-L267","name":"Linarith.CertificateOracle.mk","line":267,"kind":"ctor","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle.mk\"><span class=\"name\">Linarith</span>.<span class=\"name\">CertificateOracle</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">produceCertificate</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle\">CertificateOracle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L258-L272","name":"Linarith.CertificateOracle","line":258,"kind":"structure","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle","doc":"A `CertificateOracle` provides a function\n`produceCertificate : List Comp → Nat → MetaM (HashMap Nat Nat)`.\n\nThe default `CertificateOracle` used by `linarith` is\n`Linarith.CertificateOracle.simplexAlgorithmSparse`.\n`Linarith.CertificateOracle.simplexAlgorithmDense` and `Linarith.CertificateOracle.fourierMotzkin`\nare also available (though the Fourier-Motzkin oracle has some bugs).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.CertificateOracle\"><span class=\"name\">Linarith</span>.<span class=\"name\">CertificateOracle</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L254-L256","name":"Linarith.GlobalPreprocessorToGlobalBranchingPreprocessor","line":254,"kind":"instance","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessorToGlobalBranchingPreprocessor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessorToGlobalBranchingPreprocessor\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalPreprocessorToGlobalBranchingPreprocessor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor\">GlobalPreprocessor</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor\">GlobalBranchingPreprocessor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L250-L252","name":"Linarith.PreprocessorToGlobalBranchingPreprocessor","line":250,"kind":"instance","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorToGlobalBranchingPreprocessor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorToGlobalBranchingPreprocessor\"><span class=\"name\">Linarith</span>.<span class=\"name\">PreprocessorToGlobalBranchingPreprocessor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor\">Preprocessor</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor\">GlobalBranchingPreprocessor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L235-L248","name":"Linarith.GlobalBranchingPreprocessor.process","line":235,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor.process","doc":"`process pp l` runs `pp.transform` on `l` and returns the result,\ntracing the result if `trace.linarith` is on.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor.process\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalBranchingPreprocessor</span>.<span class=\"name\">process</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pp</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor\">GlobalBranchingPreprocessor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Branch\">Branch</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L228-L233","name":"Linarith.GlobalPreprocessor.branching","line":228,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor.branching","doc":"A `GlobalPreprocessor` lifts to a `GlobalBranchingPreprocessor` by producing only one branch.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor.branching\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalPreprocessor</span>.<span class=\"name\">branching</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pp</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor\">GlobalPreprocessor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor\">GlobalBranchingPreprocessor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L221-L226","name":"Linarith.Preprocessor.globalize","line":221,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor.globalize","doc":"A `Preprocessor` lifts to a `GlobalPreprocessor` by folding it over the input list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor.globalize\"><span class=\"name\">Linarith</span>.<span class=\"name\">Preprocessor</span>.<span class=\"name\">globalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pp</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor\">Preprocessor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor\">GlobalPreprocessor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L219-L219","name":"Linarith.GlobalBranchingPreprocessor.transform","line":219,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor.transform","doc":"Given a goal, and a list of hypotheses,\nproduce a list of pairs (consisting of a goal and list of hypotheses). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor.transform\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalBranchingPreprocessor</span>.<span class=\"name\">transform</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor\">GlobalBranchingPreprocessor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Branch\">Branch</a>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L216-L216","name":"Linarith.GlobalBranchingPreprocessor.mk","line":216,"kind":"ctor","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor.mk\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalBranchingPreprocessor</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toPreprocessorBase</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transform</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Branch\">Branch</a>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor\">GlobalBranchingPreprocessor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L216-L219","name":"Linarith.GlobalBranchingPreprocessor.toPreprocessorBase","line":216,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor.toPreprocessorBase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor.toPreprocessorBase\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalBranchingPreprocessor</span>.<span class=\"name\">toPreprocessorBase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor\">GlobalBranchingPreprocessor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L209-L219","name":"Linarith.GlobalBranchingPreprocessor","line":209,"kind":"structure","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor","doc":"Some preprocessors perform branching case splits.\nA `GlobalBranchingPreprocessor` produces a list of branches to run.\nEach branch is independent, so hypotheses that appear in multiple branches should be duplicated.\nThe preprocessor is responsible for making sure that each branch contains the correct goal\nmetavariable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalBranchingPreprocessor\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalBranchingPreprocessor</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">Linarith.PreprocessorBase</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L201-L207","name":"Linarith.Branch","line":201,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Branch","doc":"Some preprocessors perform branching case splits. A `Branch` is used to track one of these case\nsplits. The first component, an `MVarId`, is the goal corresponding to this branch of the split,\ngiven as a metavariable. The `List Expr` component is the list of hypotheses for `linarith`\nin this branch.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Branch\"><span class=\"name\">Linarith</span>.<span class=\"name\">Branch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L199-L199","name":"Linarith.GlobalPreprocessor.transform","line":199,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor.transform","doc":"Replace the collection of all hypotheses with new hypotheses.\nThese expressions are proof terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor.transform\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalPreprocessor</span>.<span class=\"name\">transform</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor\">GlobalPreprocessor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L196-L196","name":"Linarith.GlobalPreprocessor.mk","line":196,"kind":"ctor","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor.mk\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalPreprocessor</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toPreprocessorBase</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transform</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor\">GlobalPreprocessor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L196-L199","name":"Linarith.GlobalPreprocessor.toPreprocessorBase","line":196,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor.toPreprocessorBase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor.toPreprocessorBase\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalPreprocessor</span>.<span class=\"name\">toPreprocessorBase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor\">GlobalPreprocessor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L191-L199","name":"Linarith.GlobalPreprocessor","line":191,"kind":"structure","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor","doc":"Some preprocessors need to examine the full list of hypotheses instead of working item by item.\nAs with `Preprocessor`, the input to a `GlobalPreprocessor` is replaced by, not added to, its\noutput.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.GlobalPreprocessor\"><span class=\"name\">Linarith</span>.<span class=\"name\">GlobalPreprocessor</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">Linarith.PreprocessorBase</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L189-L189","name":"Linarith.Preprocessor.transform","line":189,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor.transform","doc":"Replace a hypothesis by a list of hypotheses. These expressions are the proof terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor.transform\"><span class=\"name\">Linarith</span>.<span class=\"name\">Preprocessor</span>.<span class=\"name\">transform</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor\">Preprocessor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L187-L187","name":"Linarith.Preprocessor.mk","line":187,"kind":"ctor","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor.mk\"><span class=\"name\">Linarith</span>.<span class=\"name\">Preprocessor</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toPreprocessorBase</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transform</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor\">Preprocessor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L187-L189","name":"Linarith.Preprocessor.toPreprocessorBase","line":187,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor.toPreprocessorBase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor.toPreprocessorBase\"><span class=\"name\">Linarith</span>.<span class=\"name\">Preprocessor</span>.<span class=\"name\">toPreprocessorBase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor\">Preprocessor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L181-L189","name":"Linarith.Preprocessor","line":181,"kind":"structure","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor","doc":"A preprocessor transforms a proof of a proposition into a proof of a different proposition.\nThe return type is `List Expr`, since some preprocessing steps may create multiple new hypotheses,\nand some may remove a hypothesis from the list.\nA \"no-op\" preprocessor should return its input as a singleton list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Preprocessor\"><span class=\"name\">Linarith</span>.<span class=\"name\">Preprocessor</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">Linarith.PreprocessorBase</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L179-L179","name":"Linarith.PreprocessorBase.description","line":179,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase.description","doc":"The description of the preprocessor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase.description\"><span class=\"name\">Linarith</span>.<span class=\"name\">PreprocessorBase</span>.<span class=\"name\">description</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L177-L177","name":"Linarith.PreprocessorBase.name","line":177,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase.name","doc":"The name of the preprocessor, populated automatically, to create linkable trace messages. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase.name\"><span class=\"name\">Linarith</span>.<span class=\"name\">PreprocessorBase</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L175-L175","name":"Linarith.PreprocessorBase.mk","line":175,"kind":"ctor","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase.mk\"><span class=\"name\">Linarith</span>.<span class=\"name\">PreprocessorBase</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">description</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\">PreprocessorBase</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L174-L179","name":"Linarith.PreprocessorBase","line":174,"kind":"structure","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase","doc":"Metadata about preprocessors, for trace output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.PreprocessorBase\"><span class=\"name\">Linarith</span>.<span class=\"name\">PreprocessorBase</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L166-L167","name":"Linarith.Comp.ToFormat","line":166,"kind":"instance","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.ToFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.ToFormat\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">ToFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Std.ToFormat</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L160-L164","name":"Linarith.Comp.isContr","line":160,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.isContr","doc":"A `Comp` represents a contradiction if its expression has no coefficients and its strength is <,\nthat is, it represents the fact `0 < 0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.isContr\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">isContr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L152-L158","name":"Linarith.Comp.cmp","line":152,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.cmp","doc":"`Comp` has a lex order. First the `ineq`s are compared, then the `coeff`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.cmp\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a> → <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L144-L150","name":"Linarith.Comp.add","line":144,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.add","doc":"`Comp.add c1 c2` adds the expressions represented by `c1` and `c2`.\nThe coefficient of variable `a` in `c1.add c2`\nis the sum of the coefficients of `a` in `c1` and `c2`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.add\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c1 </span><span class=\"fn\">c2</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L140-L142","name":"Linarith.Comp.scale","line":140,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.scale","doc":"`c.scale n` scales the coefficients of `c` by `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.scale\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">scale</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L136-L138","name":"Linarith.Comp.coeffOf","line":136,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.coeffOf","doc":"`c.coeffOf a` projects the coefficient of variable `a` out of `c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.coeffOf\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">coeffOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L133-L134","name":"Linarith.Comp.vars","line":133,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.vars","doc":"`c.vars` returns the list of variables that appear in the linear expression contained in `c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.vars\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">vars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L131-L131","name":"Linarith.instReprComp","line":131,"kind":"instance","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.instReprComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.instReprComp\"><span class=\"name\">Linarith</span>.<span class=\"name\">instReprComp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L131-L131","name":"Linarith.instInhabitedComp","line":131,"kind":"instance","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.instInhabitedComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.instInhabitedComp\"><span class=\"name\">Linarith</span>.<span class=\"name\">instInhabitedComp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L130-L130","name":"Linarith.Comp.coeffs","line":130,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.coeffs","doc":"The coefficients of the comparison, stored as list of pairs `(i, a)`,\nwhere `i` is the index of a recorded atom, and `a` is the coefficient. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.coeffs\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">coeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L127-L127","name":"Linarith.Comp.str","line":127,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.str","doc":"The strength of the comparison, `<`, `≤`, or `=`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.str\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Mathlib.Ineq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L125-L125","name":"Linarith.Comp.mk","line":125,"kind":"ctor","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp.mk\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Mathlib.Ineq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeffs</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L118-L131","name":"Linarith.Comp","line":118,"kind":"structure","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp","doc":"The main datatype for FM elimination.\nVariables are represented by natural numbers, each of which has an integer coefficient.\nIndex 0 is reserved for constants, i.e. `coeffs.find 0` is the coefficient of 1.\nThe represented term is `coeffs.sum (fun ⟨k, v⟩ ↦ v * Var[k])`.\nstr determines the strength of the comparison -- is it < 0, ≤ 0, or = 0?\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\"><span class=\"name\">Linarith</span>.<span class=\"name\">Comp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L100-L112","name":"Linarith.Linexp.cmp","line":100,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.cmp","doc":"Defines a lex ordering on `Linexp`. This function is performance critical.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.cmp\"><span class=\"name\">Linarith</span>.<span class=\"name\">Linexp</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a> → <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L96-L98","name":"Linarith.Linexp.vars","line":96,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.vars","doc":"`l.vars` returns the list of variables that occur in `l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.vars\"><span class=\"name\">Linarith</span>.<span class=\"name\">Linexp</span>.<span class=\"name\">vars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L88-L94","name":"Linarith.Linexp.zfind","line":88,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.zfind","doc":"`l.zfind n` returns the value associated with key `n` if there is one, and 0 otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.zfind\"><span class=\"name\">Linarith</span>.<span class=\"name\">Linexp</span>.<span class=\"name\">zfind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L83-L86","name":"Linarith.Linexp.contains","line":83,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.contains","doc":"`l.contains n` is true iff `n` is the first element of a pair in `l`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.contains\"><span class=\"name\">Linarith</span>.<span class=\"name\">Linexp</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L71-L81","name":"Linarith.Linexp.get","line":71,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.get","doc":"`l.get n` returns the value in `l` associated with key `n`, if it exists, and `none` otherwise.\nThis function assumes that `l` is sorted in decreasing order of the first argument,\nthat is, it will return `none` as soon as it finds a key smaller than `n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.get\"><span class=\"name\">Linarith</span>.<span class=\"name\">Linexp</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L65-L69","name":"Linarith.Linexp.scale","line":65,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.scale","doc":"`l.scale c` scales the values in `l` by `c` without modifying the order or keys. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.scale\"><span class=\"name\">Linarith</span>.<span class=\"name\">Linexp</span>.<span class=\"name\">scale</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L51-L63","name":"Linarith.Linexp.add","line":51,"kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.add","doc":"Add two `Linexp`s together componentwise.\nPreserves sorting and uniqueness of the first argument.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp.add\"><span class=\"name\">Linarith</span>.<span class=\"name\">Linexp</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a> → <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a> → <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\">Linexp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L40-L48","name":"Linarith.Linexp","line":40,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp","doc":"A linear expression is a list of pairs of variable indices and coefficients,\nrepresenting the sum of the products of each coefficient with its corresponding variable.\n\nSome functions on `Linexp` assume that `n : Nat` occurs at most once as the first element of a pair,\nand that the list is sorted in decreasing order of the first argument.\nThis is not enforced by the type but the operations here preserve it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Linexp\"><span class=\"name\">Linarith</span>.<span class=\"name\">Linexp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L30-L36","name":"Linarith.linarithTraceProofs","line":30,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.linarithTraceProofs","doc":"A shorthand for tracing the types of a list of proof terms\nwhen the `trace.linarith` option is set to true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.linarithTraceProofs\"><span class=\"name\">Linarith</span>.<span class=\"name\">linarithTraceProofs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Datatypes.lean#L26-L28","name":"Linarith.linarithGetProofsMessage","line":26,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.linarithGetProofsMessage","doc":"A shorthand for getting the types of a list of proofs terms, to trace. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.linarithGetProofsMessage\"><span class=\"name\">Linarith</span>.<span class=\"name\">linarithGetProofsMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"}]}