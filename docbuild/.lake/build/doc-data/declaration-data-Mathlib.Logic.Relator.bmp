{"name":"Mathlib.Logic.Relator","instances":[],"imports":["Init","Mathlib.Logic.Function.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L163-L165","name":"Relator.BiTotal.trans","line":163,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.BiTotal.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal.trans\"><span class=\"name\">Relator</span>.<span class=\"name\">BiTotal</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₂₃</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₃</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₂₃</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><span class=\"fn\">r₁₃</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <span class=\"fn\">r₁₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <span class=\"fn\">r₂₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <span class=\"fn\">r₁₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L159-L161","name":"Relator.BiTotal.symm","line":159,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.BiTotal.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal.symm\"><span class=\"name\">Relator</span>.<span class=\"name\">BiTotal</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₂₁</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">r₂₁</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <span class=\"fn\">r₁₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <span class=\"fn\">r₂₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L155-L157","name":"Relator.BiTotal.refl","line":155,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.BiTotal.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal.refl\"><span class=\"name\">Relator</span>.<span class=\"name\">BiTotal</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₁</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">r₁₁</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <span class=\"fn\">r₁₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L147-L149","name":"Relator.RightTotal.trans","line":147,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.RightTotal.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal.trans\"><span class=\"name\">Relator</span>.<span class=\"name\">RightTotal</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₂₃</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₃</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₂₃</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><span class=\"fn\">r₁₃</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal\">RightTotal</a> <span class=\"fn\">r₁₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal\">RightTotal</a> <span class=\"fn\">r₂₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal\">RightTotal</a> <span class=\"fn\">r₁₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L143-L145","name":"Relator.RightTotal.symm","line":143,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.RightTotal.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal.symm\"><span class=\"name\">Relator</span>.<span class=\"name\">RightTotal</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₂₁</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">r₂₁</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal\">RightTotal</a> <span class=\"fn\">r₁₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal\">LeftTotal</a> <span class=\"fn\">r₂₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L140-L141","name":"Relator.RightTotal.refl","line":140,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.RightTotal.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal.refl\"><span class=\"name\">Relator</span>.<span class=\"name\">RightTotal</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₁</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">r₁₁</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal\">RightTotal</a> <span class=\"fn\">r₁₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L132-L134","name":"Relator.LeftTotal.trans","line":132,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.LeftTotal.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal.trans\"><span class=\"name\">Relator</span>.<span class=\"name\">LeftTotal</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₂₃</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₃</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₂₃</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><span class=\"fn\">r₁₃</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal\">LeftTotal</a> <span class=\"fn\">r₁₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal\">LeftTotal</a> <span class=\"fn\">r₂₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal\">LeftTotal</a> <span class=\"fn\">r₁₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L128-L130","name":"Relator.LeftTotal.symm","line":128,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.LeftTotal.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal.symm\"><span class=\"name\">Relator</span>.<span class=\"name\">LeftTotal</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₂₁</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">r₂₁</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal\">LeftTotal</a> <span class=\"fn\">r₁₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal\">RightTotal</a> <span class=\"fn\">r₂₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L124-L126","name":"Relator.LeftTotal.refl","line":124,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.LeftTotal.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal.refl\"><span class=\"name\">Relator</span>.<span class=\"name\">LeftTotal</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁₁</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">r₁₁</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal\">LeftTotal</a> <span class=\"fn\">r₁₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L114-L115","name":"Relator.rel_eq","line":114,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.rel_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.rel_eq\"><span class=\"name\">Relator</span>.<span class=\"name\">rel_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiUnique\">BiUnique</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">r</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">r</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L111-L112","name":"Relator.rel_iff","line":111,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.rel_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.rel_iff\"><span class=\"name\">Relator</span>.<span class=\"name\">rel_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span></span>)</span>\n  <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L108-L109","name":"Relator.rel_or","line":108,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.rel_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.rel_or\"><span class=\"name\">Relator</span>.<span class=\"name\">rel_or</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span></span>)</span>\n  <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L105-L106","name":"Relator.rel_and","line":105,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.rel_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.rel_and\"><span class=\"name\">Relator</span>.<span class=\"name\">rel_and</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x2</span></span>)</span>\n  <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L102-L103","name":"Relator.LeftUnique.flip","line":102,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.LeftUnique.flip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.LeftUnique.flip\"><span class=\"name\">Relator</span>.<span class=\"name\">LeftUnique</span>.<span class=\"name\">flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftUnique\">LeftUnique</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.RightUnique\">RightUnique</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">_root_.flip</a> <span class=\"fn\">r</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L96-L97","name":"Relator.bi_total_eq","line":96,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.bi_total_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.bi_total_eq\"><span class=\"name\">Relator</span>.<span class=\"name\">bi_total_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <a href=\"./Init/Prelude.html#Eq\">Eq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L93-L94","name":"Relator.rel_not","line":93,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.rel_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.rel_not\"><span class=\"name\">Relator</span>.<span class=\"name\">rel_not</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <a href=\"./Init/Core.html#Iff\">Iff</a> <a href=\"./Init/Core.html#Iff\">Iff</a> <a href=\"./Init/Prelude.html#Not\">Not</a> <a href=\"./Init/Prelude.html#Not\">Not</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L90-L91","name":"Relator.rel_imp","line":90,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.rel_imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.rel_imp\"><span class=\"name\">Relator</span>.<span class=\"name\">rel_imp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <a href=\"./Init/Core.html#Iff\">Iff</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <a href=\"./Init/Core.html#Iff\">Iff</a> <a href=\"./Init/Core.html#Iff\">Iff</a>)</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x1</span> → <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x1</span> → <span class=\"fn\">x2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L85-L86","name":"Relator.left_unique_of_rel_eq","line":85,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.left_unique_of_rel_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.left_unique_of_rel_eq\"><span class=\"name\">Relator</span>.<span class=\"name\">left_unique_of_rel_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">eq'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">R</span> <a href=\"./Init/Core.html#Iff\">Iff</a>)</span> <a href=\"./Init/Prelude.html#Eq\">Eq</a> <span class=\"fn\">eq'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftUnique\">LeftUnique</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L79-L83","name":"Relator.BiTotal.rel_exists","line":79,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.BiTotal.rel_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal.rel_exists\"><span class=\"name\">Relator</span>.<span class=\"name\">BiTotal</span>.<span class=\"name\">rel_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">R</span> <a href=\"./Init/Core.html#Iff\">Iff</a>)</span> <a href=\"./Init/Core.html#Iff\">Iff</a> <span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>) =&gt; <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>) =&gt; <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L73-L77","name":"Relator.BiTotal.rel_forall","line":73,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.BiTotal.rel_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal.rel_forall\"><span class=\"name\">Relator</span>.<span class=\"name\">BiTotal</span>.<span class=\"name\">rel_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\">BiTotal</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">R</span> <a href=\"./Init/Core.html#Iff\">Iff</a>)</span> <a href=\"./Init/Core.html#Iff\">Iff</a> <span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L69-L71","name":"Relator.LeftTotal.rel_exists","line":69,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.LeftTotal.rel_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal.rel_exists\"><span class=\"name\">Relator</span>.<span class=\"name\">LeftTotal</span>.<span class=\"name\">rel_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal\">LeftTotal</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">R</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x1</span> → <span class=\"fn\">x2</span></span></span>)</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x1</span> → <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>) =&gt; <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>) =&gt; <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L65-L67","name":"Relator.RightTotal.rel_forall","line":65,"kind":"theorem","docLink":"./Mathlib/Logic/Relator.html#Relator.RightTotal.rel_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal.rel_forall\"><span class=\"name\">Relator</span>.<span class=\"name\">RightTotal</span>.<span class=\"name\">rel_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal\">RightTotal</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">LiftFun</a> <span class=\"fn\">R</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> : <a href=\"./foundational_types.html\">Sort</a> u_1) (<span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x1</span> → <span class=\"fn\">x2</span></span></span>)</span>\n  <span class=\"fn\">(fun (<span class=\"fn\">x1</span> : <a href=\"./foundational_types.html\">Sort</a> (imax (u₁ + 1) u_1)) (<span class=\"fn\">x2</span> : <a href=\"./foundational_types.html\">Prop</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x1</span> → <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>) =&gt; <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L60-L61","name":"Relator.BiUnique","line":60,"kind":"def","docLink":"./Mathlib/Logic/Relator.html#Relator.BiUnique","doc":"A relation is \"bi-unique\" if it is both left unique and right unique. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.BiUnique\"><span class=\"name\">Relator</span>.<span class=\"name\">BiUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L56-L58","name":"Relator.RightUnique","line":56,"kind":"def","docLink":"./Mathlib/Logic/Relator.html#Relator.RightUnique","doc":"A relation is \"right unique\" if every element on the left is paired with at\nmost one element on the right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.RightUnique\"><span class=\"name\">Relator</span>.<span class=\"name\">RightUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L52-L54","name":"Relator.LeftUnique","line":52,"kind":"def","docLink":"./Mathlib/Logic/Relator.html#Relator.LeftUnique","doc":"A relation is \"left unique\" if every element on the right is paired with at\nmost one element on the left. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.LeftUnique\"><span class=\"name\">Relator</span>.<span class=\"name\">LeftUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L49-L50","name":"Relator.BiTotal","line":49,"kind":"def","docLink":"./Mathlib/Logic/Relator.html#Relator.BiTotal","doc":"A relation is \"bi-total\" if it is both right total and left total. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.BiTotal\"><span class=\"name\">Relator</span>.<span class=\"name\">BiTotal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L46-L47","name":"Relator.LeftTotal","line":46,"kind":"def","docLink":"./Mathlib/Logic/Relator.html#Relator.LeftTotal","doc":"A relation is \"left total\" if every element appears on the left. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.LeftTotal\"><span class=\"name\">Relator</span>.<span class=\"name\">LeftTotal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L43-L44","name":"Relator.RightTotal","line":43,"kind":"def","docLink":"./Mathlib/Logic/Relator.html#Relator.RightTotal","doc":"A relation is \"right total\" if every element appears on the right. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.RightTotal\"><span class=\"name\">Relator</span>.<span class=\"name\">RightTotal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L34-L35","name":"Relator.«term_⇒_»","line":34,"kind":"def","docLink":"./Mathlib/Logic/Relator.html#Relator.«term_⇒_»","doc":"`(R ⇒ S) f g` means `LiftFun R S f g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.«term_⇒_»\"><span class=\"name\">Relator</span>.<span class=\"name\">«term_⇒_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Relator.lean#L29-L32","name":"Relator.LiftFun","line":29,"kind":"def","docLink":"./Mathlib/Logic/Relator.html#Relator.LiftFun","doc":"The binary relations `R : α → β → Prop` and `S : γ → δ → Prop` induce a binary\nrelation on functions `LiftFun : (α → γ) → (β → δ) → Prop`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\"><span class=\"name\">Relator</span>.<span class=\"name\">LiftFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> v₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Sort</a> v₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}