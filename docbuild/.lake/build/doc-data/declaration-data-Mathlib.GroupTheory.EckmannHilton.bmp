{"name":"Mathlib.GroupTheory.EckmannHilton","instances":[],"imports":["Init","Mathlib.Algebra.Group.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L94-L96","name":"EckmannHilton.addCommGroup","line":94,"kind":"def","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.addCommGroup","doc":"If a type carries an additive group structure that distributes over a unital binary\noperation, then the additive group is commutative."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.addCommGroup\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">addCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₁</span> <span class=\"fn\">e₁</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distrib</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">m₁</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L92-L99","name":"EckmannHilton.commGroup","line":92,"kind":"def","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.commGroup","doc":"If a type carries a group structure that distributes over a unital binary operation,\nthen the group is commutative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.commGroup\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">commGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₁</span> <span class=\"fn\">e₁</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distrib</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">m₁</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L83-L85","name":"EckmannHilton.addCommMonoid","line":83,"kind":"def","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.addCommMonoid","doc":"If a type carries a unital additive magma structure that distributes over a unital binary\noperation, then the additive magma structure is a commutative additive monoid."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.addCommMonoid\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">addCommMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₁</span> <span class=\"fn\">e₁</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distrib</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">m₁</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L81-L90","name":"EckmannHilton.commMonoid","line":81,"kind":"def","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.commMonoid","doc":"If a type carries a unital magma structure that distributes over a unital binary\noperation, then the magma structure is a commutative monoid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.commMonoid\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">commMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₁</span> <span class=\"fn\">e₁</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distrib</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">m₁</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommMonoid\">CommMonoid</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L74-L79","name":"EckmannHilton.mul_assoc","line":74,"kind":"theorem","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.mul_assoc","doc":"If a type carries two unital binary operations that distribute over each other,\nthen these operations are associative.\n\nIn fact, they give a commutative monoid structure, see `eckmann_hilton.CommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.mul_assoc\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₁</span> <span class=\"fn\">e₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₂</span> <span class=\"fn\">e₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distrib</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">(<span class=\"fn\">m₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<span class=\"fn\">m₂</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₂</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">m₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L67-L72","name":"EckmannHilton.mul_comm","line":67,"kind":"theorem","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.mul_comm","doc":"If a type carries two unital binary operations that distribute over each other,\nthen these operations are commutative.\n\nIn fact, they give a commutative monoid structure, see `eckmann_hilton.CommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.mul_comm\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₁</span> <span class=\"fn\">e₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₂</span> <span class=\"fn\">e₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distrib</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">(<span class=\"fn\">m₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<span class=\"fn\">m₂</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₂</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">m₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L56-L65","name":"EckmannHilton.mul","line":56,"kind":"theorem","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.mul","doc":"If a type carries two unital binary operations that distribute over each other,\nthen these operations are equal.\n\nIn fact, they give a commutative monoid structure, see `eckmann_hilton.CommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.mul\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₁</span> <span class=\"fn\">e₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₂</span> <span class=\"fn\">e₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distrib</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">(<span class=\"fn\">m₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<span class=\"fn\">m₂</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₂</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L48-L54","name":"EckmannHilton.one","line":48,"kind":"theorem","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.one","doc":"If a type carries two unital binary operations that distribute over each other,\nthen they have the same unit elements.\n\nIn fact, the two operations are the same, and give a commutative monoid structure,\nsee `eckmann_hilton.CommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.one\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₁</span> <span class=\"fn\">e₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m₂</span> <span class=\"fn\">e₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distrib</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">m₁</span> <span class=\"fn\">(<span class=\"fn\">m₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<span class=\"fn\">m₂</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₂</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L37-L37","name":"EckmannHilton.AddZeroClass.IsUnital","line":37,"kind":"theorem","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.AddZeroClass.IsUnital","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.AddZeroClass.IsUnital\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">AddZeroClass</span>.<span class=\"name\">IsUnital</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">_G</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">EckmannHilton.IsUnital</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">X</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L37-L40","name":"EckmannHilton.MulOneClass.isUnital","line":37,"kind":"theorem","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.MulOneClass.isUnital","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.MulOneClass.isUnital\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">MulOneClass</span>.<span class=\"name\">isUnital</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">_G</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">X</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L35-L35","name":"EckmannHilton.IsUnital.mk","line":35,"kind":"ctor","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital.mk\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">IsUnital</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toLawfulIdentity</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">m</span> <span class=\"fn\">e</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L35-L35","name":"EckmannHilton.IsUnital.toLawfulIdentity","line":35,"kind":"theorem","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital.toLawfulIdentity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital.toLawfulIdentity\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">IsUnital</span>.<span class=\"name\">toLawfulIdentity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">IsUnital</a> <span class=\"fn\">m</span> <span class=\"fn\">e</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">m</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/EckmannHilton.lean#L33-L35","name":"EckmannHilton.IsUnital","line":33,"kind":"structure","docLink":"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital","doc":"`IsUnital m e` expresses that `e : X` is a left and right unit\nfor the binary operation `m : X → X → X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\"><span class=\"name\">EckmannHilton</span>.<span class=\"name\">IsUnital</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">X</span> → <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">m</span> <span class=\"fn\">e</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}