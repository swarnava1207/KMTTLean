{"name":"Mathlib.Condensed.Discrete.Characterization","instances":[{"typeNames":["ModuleCat"],"name":"CondensedMod.instHasLimitsOfSizeModuleCat","className":"CategoryTheory.Limits.HasLimitsOfSize"}],"imports":["Init","Mathlib.Condensed.Discrete.Colimit","Mathlib.Condensed.Discrete.Module"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L240-L272","name":"LightCondMod.isDiscrete_tfae","line":240,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#LightCondMod.isDiscrete_tfae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondMod.isDiscrete_tfae\"><span class=\"name\">LightCondMod</span>.<span class=\"name\">isDiscrete_tfae</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod\">LightCondMod</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondensed.IsDiscrete\">LightCondensed.IsDiscrete</a> <span class=\"fn\">M</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#LightCondensed.discreteUnderlyingAdj\">LightCondensed.discreteUnderlyingAdj</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">M</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#LightCondensed.discrete\">LightCondensed.discrete</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">M</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Module.html#LightCondMod.LocallyConstant.functor\">LocallyConstant.functor</a> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">M</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Module.html#LightCondMod.LocallyConstant.adjunction\">LocallyConstant.adjunction</a> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">M</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\">∀ (<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>),\n      <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a>\n        <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCocone\">mapCocone</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.coconeRightOpOfCone\">CategoryTheory.Limits.coconeRightOpOfCone</a> <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitCone\">asLimitCone</a></span>)</span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L234-L237","name":"LightCondMod.isDiscrete_iff_isDiscrete_forget","line":234,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#LightCondMod.isDiscrete_iff_isDiscrete_forget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondMod.isDiscrete_iff_isDiscrete_forget\"><span class=\"name\">LightCondMod</span>.<span class=\"name\">isDiscrete_iff_isDiscrete_forget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Module.html#LightCondMod\">LightCondMod</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondensed.IsDiscrete\">LightCondensed.IsDiscrete</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondensed.IsDiscrete\">LightCondensed.IsDiscrete</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Light/Module.html#LightCondensed.forget\">LightCondensed.forget</a> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">M</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L202-L225","name":"LightCondSet.isDiscrete_tfae","line":202,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.isDiscrete_tfae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.isDiscrete_tfae\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">isDiscrete_tfae</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondSet\">LightCondSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondensed.IsDiscrete\">LightCondensed.IsDiscrete</a> <span class=\"fn\">X</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#LightCondensed.discreteUnderlyingAdj\">LightCondensed.discreteUnderlyingAdj</a> <a href=\"./foundational_types.html\">(Type</a> u))</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#LightCondensed.discrete\">LightCondensed.discrete</a> <a href=\"./foundational_types.html\">(Type</a> u))</span>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">X</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\">LocallyConstant.functor</a>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">X</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.LocallyConstant.adjunction\">LocallyConstant.adjunction</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\">∀ (<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>),\n      <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a>\n        <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCocone\">mapCocone</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.coconeRightOpOfCone\">CategoryTheory.Limits.coconeRightOpOfCone</a> <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitCone\">asLimitCone</a></span>)</span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L192-L198","name":"LightCondSet.LocallyConstant.adjunction","line":192,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.LocallyConstant.adjunction","doc":"`LightCondSet.LocallyConstant.functor` is left adjoint to the forgetful functor from light condensed\nsets to sets.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.LocallyConstant.adjunction\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">adjunction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\">functor</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Basic.html#LightCondensed.underlying\">LightCondensed.underlying</a> <a href=\"./foundational_types.html\">(Type</a> u)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L188-L190","name":"LightCondSet.mem_locallyContant_essImage_of_isColimit_mapCocone","line":188,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.mem_locallyContant_essImage_of_isColimit_mapCocone","doc":"**Alias** of `LightCondSet.mem_locallyConstant_essImage_of_isColimit_mapCocone`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.mem_locallyContant_essImage_of_isColimit_mapCocone\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">mem_locallyContant_essImage_of_isColimit_mapCocone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondSet\">LightCondSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>) →\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCocone\">mapCocone</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.coconeRightOpOfCone\">CategoryTheory.Limits.coconeRightOpOfCone</a> <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitCone\">asLimitCone</a></span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\">LocallyConstant.functor</a>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L180-L186","name":"LightCondSet.mem_locallyConstant_essImage_of_isColimit_mapCocone","line":180,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.mem_locallyConstant_essImage_of_isColimit_mapCocone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondSet.mem_locallyConstant_essImage_of_isColimit_mapCocone\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">mem_locallyConstant_essImage_of_isColimit_mapCocone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondSet\">LightCondSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>) →\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCocone\">mapCocone</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.coconeRightOpOfCone\">CategoryTheory.Limits.coconeRightOpOfCone</a> <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/LightProfinite/AsLimit.html#LightProfinite.asLimitCone\">asLimitCone</a></span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\">LocallyConstant.functor</a>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L170-L174","name":"LightCondensed.IsDiscrete","line":170,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#LightCondensed.IsDiscrete","doc":"A light condensed object is *discrete* if it is constant as a sheaf, i.e. isomorphic to a constant\nsheaf.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#LightCondensed.IsDiscrete\"><span class=\"name\">LightCondensed</span>.<span class=\"name\">IsDiscrete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheafification.html#CategoryTheory.HasWeakSheafify\">CategoryTheory.HasWeakSheafify</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondensed\">LightCondensed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L125-L162","name":"CondensedMod.isDiscrete_tfae","line":125,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#CondensedMod.isDiscrete_tfae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#CondensedMod.isDiscrete_tfae\"><span class=\"name\">CondensedMod</span>.<span class=\"name\">isDiscrete_tfae</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> (u + 1))</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Condensed/Module.html#CondensedMod\">CondensedMod</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#Condensed.IsDiscrete\">Condensed.IsDiscrete</a> <span class=\"fn\">M</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#Condensed.discreteUnderlyingAdj\">Condensed.discreteUnderlyingAdj</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">M</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#Condensed.discrete\">Condensed.discrete</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">M</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Module.html#CondensedMod.LocallyConstant.functor\">LocallyConstant.functor</a> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">M</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Module.html#CondensedMod.LocallyConstant.adjunction\">LocallyConstant.adjunction</a> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">M</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/ConstantSheaf.html#CategoryTheory.Sheaf.IsConstant\">CategoryTheory.Sheaf.IsConstant</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Equivalence.html#Condensed.ProfiniteCompHaus.equivalence\">Condensed.ProfiniteCompHaus.equivalence</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.inverse\">inverse</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">M</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\">∀ (<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>),\n      <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCocone\">mapCocone</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/Profinite/AsLimit.html#Profinite.asLimitCone\">asLimitCone</a></span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.op\">op</a></span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L121-L122","name":"CondensedMod.instHasLimitsOfSizeModuleCat","line":121,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#CondensedMod.instHasLimitsOfSizeModuleCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#CondensedMod.instHasLimitsOfSizeModuleCat\"><span class=\"name\">CondensedMod</span>.<span class=\"name\">instHasLimitsOfSizeModuleCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> (u + 1))</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimitsOfSize\">CategoryTheory.Limits.HasLimitsOfSize.{u, u + 1, u + 1, u + 2}</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L116-L119","name":"CondensedMod.isDiscrete_iff_isDiscrete_forget","line":116,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#CondensedMod.isDiscrete_iff_isDiscrete_forget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#CondensedMod.isDiscrete_iff_isDiscrete_forget\"><span class=\"name\">CondensedMod</span>.<span class=\"name\">isDiscrete_iff_isDiscrete_forget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> (u + 1))</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Condensed/Module.html#CondensedMod\">CondensedMod</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#Condensed.IsDiscrete\">Condensed.IsDiscrete</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#Condensed.IsDiscrete\">Condensed.IsDiscrete</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Module.html#Condensed.forget\">Condensed.forget</a> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">M</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L77-L107","name":"CondensedSet.isDiscrete_tfae","line":77,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.isDiscrete_tfae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.isDiscrete_tfae\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">isDiscrete_tfae</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Condensed/Basic.html#CondensedSet\">CondensedSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#Condensed.IsDiscrete\">Condensed.IsDiscrete</a> <span class=\"fn\">X</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#Condensed.discreteUnderlyingAdj\">Condensed.discreteUnderlyingAdj</a> <a href=\"./foundational_types.html\">(Type</a> (u + 1)))</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#Condensed.discrete\">Condensed.discrete</a> <a href=\"./foundational_types.html\">(Type</a> (u + 1)))</span>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">X</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\">LocallyConstant.functor</a>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">X</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.LocallyConstant.adjunction\">LocallyConstant.adjunction</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/ConstantSheaf.html#CategoryTheory.Sheaf.IsConstant\">CategoryTheory.Sheaf.IsConstant</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Equivalence.html#Condensed.ProfiniteCompHaus.equivalence\">Condensed.ProfiniteCompHaus.equivalence</a> <a href=\"./foundational_types.html\">(Type</a> (u + 1)))</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.inverse\">inverse</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\">∀ (<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>),\n      <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCocone\">mapCocone</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/Profinite/AsLimit.html#Profinite.asLimitCone\">asLimitCone</a></span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.op\">op</a></span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L65-L71","name":"CondensedSet.LocallyConstant.adjunction","line":65,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.LocallyConstant.adjunction","doc":"`CondensedSet.LocallyConstant.functor` is left adjoint to the forgetful functor from condensed\nsets to sets.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.LocallyConstant.adjunction\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">adjunction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\">functor</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Basic.html#Condensed.underlying\">Condensed.underlying</a> <a href=\"./foundational_types.html\">(Type</a> (u + 1))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L61-L63","name":"CondensedSet.mem_locallyContant_essImage_of_isColimit_mapCocone","line":61,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.mem_locallyContant_essImage_of_isColimit_mapCocone","doc":"**Alias** of `CondensedSet.mem_locallyConstant_essImage_of_isColimit_mapCocone`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.mem_locallyContant_essImage_of_isColimit_mapCocone\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">mem_locallyContant_essImage_of_isColimit_mapCocone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Condensed/Basic.html#CondensedSet\">CondensedSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>) → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCocone\">mapCocone</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/Profinite/AsLimit.html#Profinite.asLimitCone\">asLimitCone</a></span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.op\">op</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\">LocallyConstant.functor</a>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L51-L59","name":"CondensedSet.mem_locallyConstant_essImage_of_isColimit_mapCocone","line":51,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.mem_locallyConstant_essImage_of_isColimit_mapCocone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#CondensedSet.mem_locallyConstant_essImage_of_isColimit_mapCocone\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">mem_locallyConstant_essImage_of_isColimit_mapCocone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Condensed/Basic.html#CondensedSet\">CondensedSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>) → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCocone\">mapCocone</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/Profinite/AsLimit.html#Profinite.asLimitCone\">asLimitCone</a></span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.op\">op</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\">LocallyConstant.functor</a>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.essImage\">essImage</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/Characterization.lean#L40-L43","name":"Condensed.IsDiscrete","line":40,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/Characterization.html#Condensed.IsDiscrete","doc":"A condensed object is *discrete* if it is constant as a sheaf, i.e. isomorphic to a constant sheaf.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/Characterization.html#Condensed.IsDiscrete\"><span class=\"name\">Condensed</span>.<span class=\"name\">IsDiscrete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheafification.html#CategoryTheory.HasWeakSheafify\">CategoryTheory.HasWeakSheafify</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Condensed/Basic.html#Condensed\">Condensed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}