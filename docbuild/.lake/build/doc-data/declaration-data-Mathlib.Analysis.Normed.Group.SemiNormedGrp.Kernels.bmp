{"name":"Mathlib.Analysis.Normed.Group.SemiNormedGrp.Kernels","instances":[{"typeNames":["SemiNormedGrp₁"],"name":"SemiNormedGrp₁.instHasCokernels","className":"CategoryTheory.Limits.HasCokernels"},{"typeNames":["Quiver.Hom"],"name":"SemiNormedGrp.instNormHom","className":"Norm"},{"typeNames":["Quiver.Hom"],"name":"SemiNormedGrp.instNNNormHom","className":"NNNorm"},{"typeNames":["CategoryTheory.Limits.parallelPair"],"name":"SemiNormedGrp.hasLimit_parallelPair","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["SemiNormedGrp"],"name":"SemiNormedGrp.instHasEqualizers","className":"CategoryTheory.Limits.HasLimitsOfShape"},{"typeNames":["SemiNormedGrp"],"name":"SemiNormedGrp.instHasCokernels","className":"CategoryTheory.Limits.HasCokernels"},{"typeNames":["SemiNormedGrp.explicitCokernelπ"],"name":"SemiNormedGrp.explicitCokernelπ.epi","className":"CategoryTheory.Epi"}],"imports":["Init","Mathlib.Analysis.Normed.Group.SemiNormedGrp","Mathlib.Analysis.Normed.Group.Quotient","Mathlib.CategoryTheory.Limits.Shapes.Kernels"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L314-L322","name":"SemiNormedGrp.ExplicitCoker.map_desc","line":314,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.ExplicitCoker.map_desc","doc":"A special case of `CategoryTheory.Limits.cokernel.map_desc` adapted to `explicitCokernel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.ExplicitCoker.map_desc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">ExplicitCoker</span>.<span class=\"name\">map_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B </span><span class=\"fn\">C </span><span class=\"fn\">D </span><span class=\"fn\">B' </span><span class=\"fn\">D'</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fab</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fbd</span> : <span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fac</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fcd</span> : <span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fac</span> <span class=\"fn\">fcd</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fbb'</span> : <span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fdd'</span> : <span class=\"fn\">D</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">condb</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbb'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">condd</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fcd</span> <span class=\"fn\">fdd'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">B'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fbb'</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fbd</span> <span class=\"fn\">fdd'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">condb</span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel.map\">explicitCokernel.map</a> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">condd</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L308-L312","name":"SemiNormedGrp.explicitCokernel.map","line":308,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel.map","doc":"A special case of `CategoryTheory.Limits.cokernel.map` adapted to `explicitCokernel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel.map\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernel</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B </span><span class=\"fn\">C </span><span class=\"fn\">D</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fab</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fbd</span> : <span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fac</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fcd</span> : <span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fac</span> <span class=\"fn\">fcd</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">fab</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">fcd</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L300-L306","name":"SemiNormedGrp.explicitCokernelIso_hom_desc","line":300,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_hom_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_hom_desc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelIso_hom_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso\">explicitCokernelIso</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.desc\">CategoryTheory.Limits.cokernel.desc</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">w</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L295-L298","name":"SemiNormedGrp.explicitCokernelIso_inv_π","line":295,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_inv_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_inv_π\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelIso_inv_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso\">explicitCokernelIso</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L290-L293","name":"SemiNormedGrp.explicitCokernelIso_hom_π","line":290,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_hom_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso_hom_π\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelIso_hom_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso\">explicitCokernelIso</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L284-L288","name":"SemiNormedGrp.explicitCokernelIso","line":284,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso","doc":"The explicit cokernel is isomorphic to the usual cokernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelIso\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel\">CategoryTheory.Limits.cokernel</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L280-L282","name":"SemiNormedGrp.explicitCokernelDesc_norm_le","line":280,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_norm_le\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">w</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">g</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L275-L278","name":"SemiNormedGrp.explicitCokernelDesc_comp_eq_zero","line":275,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_comp_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_comp_eq_zero\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_comp_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond2</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">cond</span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L267-L273","name":"SemiNormedGrp.explicitCokernelDesc_normNoninc","line":267,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_normNoninc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_normNoninc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_normNoninc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cond</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp.Hom.hom\">Hom.hom</a> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormNoninc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp.Hom.hom\">Hom.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">cond</span>)</span>)</span>.<a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormNoninc</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L263-L265","name":"SemiNormedGrp.explicitCokernelDesc_norm_le_of_norm_le","line":263,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_norm_le_of_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_norm_le_of_norm_le\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_norm_le_of_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">g</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">w</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L257-L259","name":"SemiNormedGrp.normNoninc_explicitCokernelπ","line":257,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.normNoninc_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.normNoninc_explicitCokernelπ\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">normNoninc_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp.Hom.hom\">Hom.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span>)</span>.<a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormNoninc</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L253-L255","name":"SemiNormedGrp.isQuotient_explicitCokernelπ","line":253,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.isQuotient_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.isQuotient_explicitCokernelπ\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">isQuotient_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp.Hom.hom\">Hom.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span>)</span>.<a href=\"./Mathlib/Analysis/Normed/Group/Quotient.html#NormedAddGroupHom.IsQuotient\">IsQuotient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L246-L251","name":"SemiNormedGrp.explicitCokernelπ.epi","line":246,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ.epi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ.epi\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ</span>.<span class=\"name\">epi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L235-L235","name":"SemiNormedGrp.explicitCokernel_hom_ext_iff","line":235,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel_hom_ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel_hom_ext_iff\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernel_hom_ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e₂</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">e₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">e₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L235-L244","name":"SemiNormedGrp.explicitCokernel_hom_ext","line":235,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel_hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel_hom_ext\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernel_hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">e₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">e₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L230-L233","name":"SemiNormedGrp.explicitCokernelDesc_zero","line":230,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_zero\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L222-L228","name":"SemiNormedGrp.explicitCokernelDesc_comp_eq_desc","line":222,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_comp_eq_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_comp_eq_desc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_comp_eq_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cond</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">cond</span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L213-L220","name":"SemiNormedGrp.explicitCokernelDesc_unique","line":213,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc_unique\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L208-L211","name":"SemiNormedGrp.explicitCokernelπ_desc_apply","line":208,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc_apply\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_desc_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cond</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">cond</span>)</span>)</span>\n    <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L203-L203","name":"SemiNormedGrp.explicitCokernelπ_desc_assoc","line":203,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc_assoc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_desc_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z✝</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">w</span>)</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L203-L206","name":"SemiNormedGrp.explicitCokernelπ_desc","line":203,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_desc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\">explicitCokernelDesc</a> <span class=\"fn\">w</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L198-L201","name":"SemiNormedGrp.explicitCokernelπ_apply_dom_eq_zero","line":198,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_apply_dom_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_apply_dom_eq_zero\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_apply_dom_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L192-L192","name":"SemiNormedGrp.comp_explicitCokernelπ_assoc","line":192,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.comp_explicitCokernelπ_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.comp_explicitCokernelπ_assoc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">comp_explicitCokernelπ_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L192-L196","name":"SemiNormedGrp.comp_explicitCokernelπ","line":192,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.comp_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.comp_explicitCokernelπ\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">comp_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L188-L190","name":"SemiNormedGrp.explicitCokernelπ_surjective","line":188,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ_surjective\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\">explicitCokernelπ</a> <span class=\"fn\">f</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L183-L186","name":"SemiNormedGrp.explicitCokernelπ","line":183,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ","doc":"The projection from `Y` to the explicit cokernel of `X ⟶ Y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelπ\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L177-L181","name":"SemiNormedGrp.explicitCokernelDesc","line":177,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc","doc":"Descend to the explicit cokernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernelDesc\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernelDesc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\">explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L172-L175","name":"SemiNormedGrp.explicitCokernel","line":172,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel","doc":"An explicit choice of cokernel, which has good properties with respect to the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.explicitCokernel\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">explicitCokernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L161-L165","name":"SemiNormedGrp.instHasCokernels","line":161,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instHasCokernels","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instHasCokernels\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instHasCokernels</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.HasCokernels\">CategoryTheory.Limits.HasCokernels</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L147-L159","name":"SemiNormedGrp.isColimitCokernelCocone","line":147,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.isColimitCokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.isColimitCokernelCocone\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">isColimitCokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelCocone\">cokernelCocone</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L137-L145","name":"SemiNormedGrp.cokernelLift","line":137,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelLift","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelLift\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">cokernelLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.CokernelCofork\">CategoryTheory.Limits.CokernelCofork</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelCocone\">cokernelCocone</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cocone.pt\">pt</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cocone.pt\">pt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L130-L135","name":"SemiNormedGrp.cokernelCocone","line":130,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.cokernelCocone\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">cokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L120-L122","name":"SemiNormedGrp.instHasEqualizers","line":120,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instHasEqualizers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instHasEqualizers\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instHasEqualizers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.HasEqualizers\">CategoryTheory.Limits.HasEqualizers</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L104-L118","name":"SemiNormedGrp.hasLimit_parallelPair","line":104,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.hasLimit_parallelPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.hasLimit_parallelPair\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">hasLimit_parallelPair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimit\">CategoryTheory.Limits.HasLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair\">CategoryTheory.Limits.parallelPair</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L96-L102","name":"SemiNormedGrp.fork","line":96,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.fork","doc":"The equalizer cone for a parallel pair of morphisms of seminormed groups. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.fork\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">fork</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork\">CategoryTheory.Limits.Fork</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L93-L94","name":"SemiNormedGrp.instNNNormHom","line":93,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instNNNormHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instNNNormHom\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instNNNormHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm\">NNNorm</a> (<span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L91-L92","name":"SemiNormedGrp.instNormHom","line":91,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instNormHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp.instNormHom\"><span class=\"name\">SemiNormedGrp</span>.<span class=\"name\">instNormHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp\">SemiNormedGrp</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm\">Norm</a> (<span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L63-L78","name":"SemiNormedGrp₁.instHasCokernels","line":63,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.instHasCokernels","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.instHasCokernels\"><span class=\"name\">SemiNormedGrp₁</span>.<span class=\"name\">instHasCokernels</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.HasCokernels\">CategoryTheory.Limits.HasCokernels</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp₁\">SemiNormedGrp₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L51-L61","name":"SemiNormedGrp₁.cokernelLift","line":51,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelLift","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelLift\"><span class=\"name\">SemiNormedGrp₁</span>.<span class=\"name\">cokernelLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp₁\">SemiNormedGrp₁</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.CokernelCofork\">CategoryTheory.Limits.CokernelCofork</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelCocone\">cokernelCocone</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cocone.pt\">pt</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cocone.pt\">pt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean#L35-L49","name":"SemiNormedGrp₁.cokernelCocone","line":35,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGrp₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.html#SemiNormedGrp₁.cokernelCocone\"><span class=\"name\">SemiNormedGrp₁</span>.<span class=\"name\">cokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGrp.html#SemiNormedGrp₁\">SemiNormedGrp₁</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span></div></div>"}]}