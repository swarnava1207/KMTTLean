{"name":"Init.System.Promise","instances":[{"typeNames":["IO.Promise"],"name":"IO.instNonemptyPromise","className":"Nonempty"}],"imports":["Init.System.IO"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L79-L84","name":"IO.Promise.isResolved","line":79,"kind":"def","docLink":"./Init/System/Promise.html#IO.Promise.isResolved","doc":"Checks whether the promise has already been resolved, i.e. whether access to `result*` will return\nimmediately.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.isResolved\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">isResolved</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L73-L77","name":"IO.Promise.resultD","line":73,"kind":"def","docLink":"./Init/System/Promise.html#IO.Promise.resultD","doc":"Like `Promise.result`, but resolves to `dflt` if the promise is dropped without ever being resolved.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.resultD\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">resultD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dflt</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L70-L71","name":"IO.Promise.result","line":70,"kind":"def","docLink":"./Init/System/Promise.html#IO.Promise.result","doc":"The result task of a `Promise`.\n\nThe task blocks until `Promise.resolve` is called. If the promise is dropped without ever being\nresolved, evaluating the task will panic and, when not using fatal panics, block forever. Use\n`Promise.result?` to handle this case explicitly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.result\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">result</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L59-L68","name":"IO.Promise.result!","line":59,"kind":"def","docLink":"./Init/System/Promise.html#IO.Promise.result!","doc":"The result task of a `Promise`.\n\nThe task blocks until `Promise.resolve` is called. If the promise is dropped without ever being\nresolved, evaluating the task will panic and, when not using fatal panics, block forever. Use\n`Promise.result?` to handle this case explicitly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.result!\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">result!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L49-L53","name":"IO.Promise.result?","line":49,"kind":"opaque","docLink":"./Init/System/Promise.html#IO.Promise.result?","doc":"Like `Promise.result`, but resolves to `none` if the promise is dropped without ever being resolved.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.result?\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">result?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L41-L47","name":"IO.Promise.resolve","line":41,"kind":"opaque","docLink":"./Init/System/Promise.html#IO.Promise.resolve","doc":"Resolves a `Promise`.\n\nOnly the first call to this function has an effect.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.resolve\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">resolve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L37-L39","name":"IO.Promise.new","line":37,"kind":"opaque","docLink":"./Init/System/Promise.html#IO.Promise.new","doc":"Creates a new `Promise`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.new\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L34-L35","name":"IO.instNonemptyPromise","line":34,"kind":"instance","docLink":"./Init/System/Promise.html#IO.instNonemptyPromise","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.instNonemptyPromise\"><span class=\"name\">IO</span>.<span class=\"name\">instNonemptyPromise</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/System/Promise.lean#L19-L32","name":"IO.Promise","line":19,"kind":"def","docLink":"./Init/System/Promise.html#IO.Promise","doc":"`Promise α` allows you to create a `Task α` whose value is provided later by calling `resolve`.\n\nTypical usage is as follows:\n1. `let promise ← Promise.new` creates a promise\n2. `promise.result? : Task (Option α)` can now be passed around\n3. `promise.result?.get` blocks until the promise is resolved\n4. `promise.resolve a` resolves the promise\n5. `promise.result?.get` now returns `some a`\n\nIf the promise is dropped without ever being resolved, `promise.result?.get` will return `none`.\nSee `Promise.result!/resultD` for other ways to handle this case.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}