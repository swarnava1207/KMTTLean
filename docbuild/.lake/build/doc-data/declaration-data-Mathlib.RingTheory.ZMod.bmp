{"name":"Mathlib.RingTheory.ZMod","instances":[{"typeNames":["ZMod"],"name":"instIsReducedZModOfFactSquarefreeNat","className":"IsReduced"}],"imports":["Init","Mathlib.Algebra.Squarefree.Basic","Mathlib.Algebra.EuclideanDomain.Int","Mathlib.Data.ZMod.Basic","Mathlib.RingTheory.Nilpotent.Lemmas","Mathlib.RingTheory.PrincipalIdealDomain"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/ZMod.lean#L46-L47","name":"instIsReducedZModOfFactSquarefreeNat","line":46,"kind":"instance","docLink":"./Mathlib/RingTheory/ZMod.html#instIsReducedZModOfFactSquarefreeNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/ZMod.html#instIsReducedZModOfFactSquarefreeNat\"><span class=\"name\">instIsReducedZModOfFactSquarefreeNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Squarefree/Basic.html#Squarefree\">Squarefree</a> <span class=\"fn\">n</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Nilpotent/Defs.html#IsReduced\">IsReduced</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/ZMod.lean#L38-L44","name":"isReduced_zmod","line":38,"kind":"theorem","docLink":"./Mathlib/RingTheory/ZMod.html#isReduced_zmod","doc":"`ZMod n` is reduced iff `n` is square-free (or `n=0`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/ZMod.html#isReduced_zmod\"><span class=\"name\">isReduced_zmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Nilpotent/Defs.html#IsReduced\">IsReduced</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Squarefree/Basic.html#Squarefree\">Squarefree</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/ZMod.lean#L31-L36","name":"ZMod.ringHom_eq_of_ker_eq","line":31,"kind":"theorem","docLink":"./Mathlib/RingTheory/ZMod.html#ZMod.ringHom_eq_of_ker_eq","doc":"Two ring homomorphisms into `ZMod n` with equal kernels are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/ZMod.html#ZMod.ringHom_eq_of_ker_eq\"><span class=\"name\">ZMod</span>.<span class=\"name\">ringHom_eq_of_ker_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Maps.html#RingHom.ker\">RingHom.ker</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Maps.html#RingHom.ker\">RingHom.ker</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/ZMod.lean#L24-L29","name":"ZMod.ker_intCastRingHom","line":24,"kind":"theorem","docLink":"./Mathlib/RingTheory/ZMod.html#ZMod.ker_intCastRingHom","doc":"The ring homomorphism `ℤ → ZMod n` has kernel generated by `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/ZMod.html#ZMod.ker_intCastRingHom\"><span class=\"name\">ZMod</span>.<span class=\"name\">ker_intCastRingHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Maps.html#RingHom.ker\">RingHom.ker</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Cast/Lemmas.html#Int.castRingHom\">Int.castRingHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Span.html#Ideal.span\">Ideal.span</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></div></div>"}]}