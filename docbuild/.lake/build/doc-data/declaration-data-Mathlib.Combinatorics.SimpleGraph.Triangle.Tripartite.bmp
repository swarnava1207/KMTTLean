{"name":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","instances":[{"typeNames":["SimpleGraph.Adj"],"name":"SimpleGraph.TripartiteFromTriangles.graph.instDecidableRelAdj","className":"Decidable"}],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Triangle.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L234-L241","name":"SimpleGraph.TripartiteFromTriangles.locallyLinear","line":234,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.locallyLinear","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.locallyLinear\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">locallyLinear</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint\">ExplicitDisjoint</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Basic.html#SimpleGraph.LocallyLinear\">LocallyLinear</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L222-L227","name":"SimpleGraph.TripartiteFromTriangles.farFromTriangleFree","line":222,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.farFromTriangleFree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.farFromTriangleFree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">farFromTriangleFree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint\">ExplicitDisjoint</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <span class=\"fn\">ùïú</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">Œµ</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">‚Üë((<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">Œ≤</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">Œ≥</span></span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Basic.html#SimpleGraph.FarFromTriangleFree\">FarFromTriangleFree</a></span> <span class=\"fn\">Œµ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L219-L220","name":"SimpleGraph.TripartiteFromTriangles.card_triangles","line":219,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.card_triangles","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.card_triangles\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">card_triangles</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.cliqueFinset\">cliqueFinset</a></span> <span class=\"fn\">3</span>)</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L216-L217","name":"SimpleGraph.TripartiteFromTriangles.cliqueFinset_eq_map","line":216,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.cliqueFinset_eq_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.cliqueFinset_eq_map\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">cliqueFinset_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.cliqueFinset\">cliqueFinset</a></span> <span class=\"fn\">3</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L213-L214","name":"SimpleGraph.TripartiteFromTriangles.cliqueFinset_eq_image","line":213,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.cliqueFinset_eq_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.cliqueFinset_eq_image\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">cliqueFinset_eq_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.cliqueFinset\">cliqueFinset</a></span> <span class=\"fn\">3</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(‚áë<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a>)</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L207-L208","name":"SimpleGraph.TripartiteFromTriangles.cliqueSet_eq_image","line":207,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.cliqueSet_eq_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.cliqueSet_eq_image\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">cliqueSet_eq_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.cliqueSet\">cliqueSet</a></span> <span class=\"fn\">3</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚áë<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">‚Üë<span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L186-L205","name":"SimpleGraph.TripartiteFromTriangles.map_toTriangle_disjoint","line":186,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.map_toTriangle_disjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.map_toTriangle_disjoint\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">map_toTriangle_disjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint\">ExplicitDisjoint</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(‚Üë<span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a> <span class=\"fn\">t</span>)</span>)</span>.<a href=\"./Mathlib/Logic/Pairwise.html#Set.Pairwise\">Pairwise</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span>)</span>) =&gt; <span class=\"fn\">(<span class=\"fn\">‚Üë<span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Inter.inter\">‚à©</a> <span class=\"fn\">‚Üë<span class=\"fn\">y</span></span>).<a href=\"./Mathlib/Data/Set/Subsingleton.html#Set.Subsingleton\">Subsingleton</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L181-L182","name":"SimpleGraph.TripartiteFromTriangles.toTriangle_surjOn","line":181,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle_surjOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle_surjOn\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">toTriangle_surjOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.SurjOn\">Set.SurjOn</a> <span class=\"fn\">(‚áë<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a>)</span> <span class=\"fn\">(‚Üë<span class=\"fn\">t</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.cliqueSet\">cliqueSet</a></span> <span class=\"fn\">3</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L167-L179","name":"SimpleGraph.TripartiteFromTriangles.is3Clique_iff","line":167,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.is3Clique_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.is3Clique_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">is3Clique_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.IsNClique\">IsNClique</a></span> <span class=\"fn\">3</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ <span class=\"fn\">x</span> ‚àà <span class=\"fn\">t</span>, <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L164-L165","name":"SimpleGraph.TripartiteFromTriangles.exists_mem_toTriangle","line":164,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.exists_mem_toTriangle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.exists_mem_toTriangle\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">exists_mem_toTriangle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxy</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ <span class=\"fn\">z</span> ‚àà <span class=\"fn\">t</span>, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L160-L162","name":"SimpleGraph.TripartiteFromTriangles.toTriangle_is3Clique","line":160,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle_is3Clique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle_is3Clique\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">toTriangle_is3Clique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.IsNClique\">IsNClique</a></span> <span class=\"fn\">3</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L154-L154","name":"SimpleGraph.TripartiteFromTriangles.toTriangle_apply","line":154,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle_apply\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">toTriangle_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\">toTriangle</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.1</span></span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.2</span></span><a href=\"./Init/Core.html#Insert.insert\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L153-L158","name":"SimpleGraph.TripartiteFromTriangles.toTriangle","line":153,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle","doc":"The map that turns a triangle index into an explicit triangle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.toTriangle\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">toTriangle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">‚Ü™</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L143-L151","name":"SimpleGraph.TripartiteFromTriangles.graph_triple","line":143,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph_triple","doc":"This lemma reorders the elements of a triangle in the tripartite graph. It turns a triangle\n`{x, y, z}` into a triangle `{a, b, c}` where `a : Œ± `, `b : Œ≤`, `c : Œ≥`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph_triple\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">graph_triple</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> ‚Üí\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span> ‚Üí\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> ‚Üí\n      <span class=\"fn\">‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>),\n        <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span></span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span></span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span></span><a href=\"./Init/Core.html#Insert.insert\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Insert.insert\">}</a> <a href=\"./Init/Prelude.html#And\">‚àß</a>           <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a>             <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L132-L141","name":"SimpleGraph.TripartiteFromTriangles.graph.instDecidableRelAdj","line":132,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph.instDecidableRelAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph.instDecidableRelAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">graph</span>.<span class=\"name\">instDecidableRelAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L126-L126","name":"SimpleGraph.TripartiteFromTriangles.NoAccidental.eq_or_eq_or_eq","line":126,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental.eq_or_eq_or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental.eq_or_eq_or_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">NoAccidental</span>.<span class=\"name\">eq_or_eq_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c </span><span class=\"fn\">c'</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L125-L125","name":"SimpleGraph.TripartiteFromTriangles.NoAccidental.mk","line":125,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental.mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">NoAccidental</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq_or_eq_or_eq</span> :\n  <span class=\"fn\">‚àÄ ‚¶É<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\">Œ±</span>‚¶Ñ ‚¶É<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ ‚¶É<span class=\"fn\">c </span><span class=\"fn\">c'</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ, <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c'</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\">NoAccidental</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L120-L127","name":"SimpleGraph.TripartiteFromTriangles.NoAccidental","line":120,"kind":"class","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental","doc":"Predicate on the triangle indices for there to be no accidental triangle.\n\nNote that we cheat a bit, since the exact translation of this informal description would have\n`(a', b', c') ‚àà t` as a conclusion rather than `a = a' ‚à® b = b' ‚à® c = c'`. Those conditions are\nequivalent when the explicit triangles are edge-disjoint (which is the case we care about). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.NoAccidental\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">NoAccidental</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L118-L118","name":"SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÇ","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÇ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÇ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">ExplicitDisjoint</span>.<span class=\"name\">inj‚ÇÇ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint\">ExplicitDisjoint</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c </span><span class=\"fn\">c'</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L117-L117","name":"SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÅ","line":117,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÅ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÅ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">ExplicitDisjoint</span>.<span class=\"name\">inj‚ÇÅ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint\">ExplicitDisjoint</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b'</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L116-L116","name":"SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÄ","line":116,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÄ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj‚ÇÄ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">ExplicitDisjoint</span>.<span class=\"name\">inj‚ÇÄ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint\">ExplicitDisjoint</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a'</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L115-L115","name":"SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.mk","line":115,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">ExplicitDisjoint</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inj‚ÇÄ</span> : <span class=\"fn\">‚àÄ ‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ ‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ ‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ ‚¶É<span class=\"fn\">a'</span> : <span class=\"fn\">Œ±</span>‚¶Ñ, <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inj‚ÇÅ</span> : <span class=\"fn\">‚àÄ ‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ ‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ ‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ ‚¶É<span class=\"fn\">b'</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ, <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inj‚ÇÇ</span> : <span class=\"fn\">‚àÄ ‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ ‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ ‚¶É<span class=\"fn\">c </span><span class=\"fn\">c'</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ, <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c'</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint\">ExplicitDisjoint</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L114-L118","name":"SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint","line":114,"kind":"class","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint","doc":"Predicate on the triangle indices for the explicit triangles to be edge-disjoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">ExplicitDisjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L105-L108","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÅ_iff'","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÅ_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÅ_iff'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÇ‚ÇÅ_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ <span class=\"fn\">x</span> ‚àà <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L101-L104","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÇ_iff'","line":101,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÇ_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÇ_iff'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÅ‚ÇÇ_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ <span class=\"fn\">x</span> ‚àà <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L97-L100","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÄ_iff'","line":97,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÄ_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÄ_iff'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÇ‚ÇÄ_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ <span class=\"fn\">x</span> ‚àà <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">x</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L93-L96","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÇ_iff'","line":93,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÇ_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÇ_iff'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÄ‚ÇÇ_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ <span class=\"fn\">x</span> ‚àà <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\">x</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L89-L92","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÄ_iff'","line":89,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÄ_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÄ_iff'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÅ‚ÇÄ_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ <span class=\"fn\">x</span> ‚àà <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">x</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L85-L88","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÅ_iff'","line":85,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÅ_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÅ_iff'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÄ‚ÇÅ_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ <span class=\"fn\">x</span> ‚àà <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\">x</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L82-L83","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÅ_iff","line":82,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÅ_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÅ_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÇ‚ÇÅ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L80-L81","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÇ_iff","line":80,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÇ_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÇ_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÅ‚ÇÇ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L78-L79","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÄ_iff","line":78,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÄ_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÇ‚ÇÄ_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÇ‚ÇÄ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L76-L77","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÇ_iff","line":76,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÇ_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÇ_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÄ‚ÇÇ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L74-L75","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÄ_iff","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÄ_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÅ‚ÇÄ_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÅ‚ÇÄ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L72-L73","name":"SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÅ_iff","line":72,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÅ_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.in‚ÇÄ‚ÇÅ_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">in‚ÇÄ‚ÇÅ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÉ (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L70-L70","name":"SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÇ‚ÇÇ","line":70,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÇ‚ÇÇ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÇ‚ÇÇ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">not_in‚ÇÇ‚ÇÇ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c </span><span class=\"fn\">c'</span> : <span class=\"fn\">Œ≥</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L69-L69","name":"SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÅ‚ÇÅ","line":69,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÅ‚ÇÅ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÅ‚ÇÅ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">not_in‚ÇÅ‚ÇÅ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\">Œ≤</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L68-L68","name":"SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÄ‚ÇÄ","line":68,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÄ‚ÇÄ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Graph.not_in‚ÇÄ‚ÇÄ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Graph</span>.<span class=\"name\">not_in‚ÇÄ‚ÇÄ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\">graph</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L62-L64","name":"SimpleGraph.TripartiteFromTriangles.graph","line":62,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph","doc":"The tripartite-from-triangles graph. Two vertices are related iff there exists a triangle index\ncontaining them both. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.graph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">graph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L60-L60","name":"SimpleGraph.TripartiteFromTriangles.rel_symm","line":60,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.rel_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.rel_symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">rel_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Symmetric\">Symmetric</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L59-L59","name":"SimpleGraph.TripartiteFromTriangles.rel_irrefl","line":59,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.rel_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.rel_irrefl\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">rel_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L55-L55","name":"SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÇ‚ÇÅ","line":55,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÇ‚ÇÅ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÇ‚ÇÅ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Rel</span>.<span class=\"name\">in‚ÇÇ‚ÇÅ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L54-L54","name":"SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÅ‚ÇÇ","line":54,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÅ‚ÇÇ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÅ‚ÇÇ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Rel</span>.<span class=\"name\">in‚ÇÅ‚ÇÇ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L53-L53","name":"SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÇ‚ÇÄ","line":53,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÇ‚ÇÄ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÇ‚ÇÄ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Rel</span>.<span class=\"name\">in‚ÇÇ‚ÇÄ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L52-L52","name":"SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÄ‚ÇÇ","line":52,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÄ‚ÇÇ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÄ‚ÇÇ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Rel</span>.<span class=\"name\">in‚ÇÄ‚ÇÇ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L51-L51","name":"SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÅ‚ÇÄ","line":51,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÅ‚ÇÄ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÅ‚ÇÄ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Rel</span>.<span class=\"name\">in‚ÇÅ‚ÇÄ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L50-L50","name":"SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÄ‚ÇÅ","line":50,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÄ‚ÇÅ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel.in‚ÇÄ‚ÇÅ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Rel</span>.<span class=\"name\">in‚ÇÄ‚ÇÅ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L49-L49","name":"SimpleGraph.TripartiteFromTriangles.rel_iff","line":49,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.rel_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.rel_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">rel_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a‚úù </span><span class=\"fn\">a‚úù¬π</span> : <span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\">Rel</a> <span class=\"fn\">t</span> <span class=\"fn\">a‚úù</span> <span class=\"fn\">a‚úù¬π</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a>   <span class=\"fn\">(‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù¬π</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a>     <span class=\"fn\">(‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù¬π</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a>       <span class=\"fn\">(‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù¬π</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a>         <span class=\"fn\">(‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù¬π</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÄ\">Sum3.in‚ÇÄ</a> <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a>           <span class=\"fn\">(‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù¬π</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">‚à®</a>             <span class=\"fn\">‚àÉ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">Œ≥</span>), <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÇ\">Sum3.in‚ÇÇ</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">a‚úù¬π</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sum/Basic.html#Sum3.in‚ÇÅ\">Sum3.in‚ÇÅ</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.lean#L46-L55","name":"SimpleGraph.TripartiteFromTriangles.Rel","line":46,"kind":"inductive","docLink":"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel","doc":"The underlying relation of the tripartite-from-triangles graph.\n\nTwo vertices are related iff there exists a triangle index containing them both. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Tripartite.html#SimpleGraph.TripartiteFromTriangles.Rel\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">TripartiteFromTriangles</span>.<span class=\"name\">Rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ≥</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ±</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≤</span> <a href=\"./Init/Core.html#Sum\">‚äï</a> <span class=\"fn\">Œ≥</span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}