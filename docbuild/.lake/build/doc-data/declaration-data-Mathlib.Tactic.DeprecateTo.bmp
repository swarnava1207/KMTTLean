{"name":"Mathlib.Tactic.DeprecateTo","instances":[],"imports":["Init","Lean.Meta.Tactic.TryThis","Mathlib.Lean.Expr.Basic","Mathlib.Tactic.Lemma"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeprecateTo.lean#L77-L148","name":"Mathlib.Tactic.DeprecateTo.commandDeprecateTo______","line":77,"kind":"def","docLink":"./Mathlib/Tactic/DeprecateTo.html#Mathlib.Tactic.DeprecateTo.commandDeprecateTo______","doc":"Writing\n```lean\ndeprecate to new_name new_name₂ ... new_nameₙ\ntheorem old_name : True := .intro\n```\nwhere `new_name new_name₂ ... new_nameₙ` is a sequence of identifiers produces the\n`Try this` suggestion:\n```lean\ntheorem new_name : True := .intro\n\n@[deprecated (since := \"YYYY-MM-DD\")] alias old_name := new_name\n\n@[deprecated (since := \"YYYY-MM-DD\")] alias old_name₂ := new_name₂\n...\n\n@[deprecated (since := \"YYYY-MM-DD\")] alias old_nameₙ := new_nameₙ\n```\nwhere `old_name old_name₂ ... old_nameₙ` are the non-blacklisted declarations\n(auto)generated by the initial command.\n\nThe \"YYYY-MM-DD\" entry is today's date and it is automatically filled in.\n\n`deprecate to` makes an effort to match `old_name`, the \"visible\" name, with\n`new_name`, the first identifier produced by the user.\nThe \"old\", autogenerated declarations `old_name₂ ... old_nameₙ` are retrieved in alphabetical order.\nIn the case in which the initial declaration produces at most 1 non-blacklisted\ndeclarations besides itself, the alphabetical sorting is irrelevant.\n\nTechnically, the command also take an optional `String` argument to fill in the date in `since`.\nHowever, its use is mostly intended for debugging purposes, where having a variable date would\nmake tests time-dependent.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeprecateTo.html#Mathlib.Tactic.DeprecateTo.commandDeprecateTo______\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeprecateTo</span>.<span class=\"name\">commandDeprecateTo______</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeprecateTo.lean#L61-L74","name":"Mathlib.Tactic.DeprecateTo.renameTheorem","line":61,"kind":"def","docLink":"./Mathlib/Tactic/DeprecateTo.html#Mathlib.Tactic.DeprecateTo.renameTheorem","doc":"If the input command is a `theorem` or a `lemma`, then it replaces the name of the\nresulting declaration with `newName` and it returns the old declaration name and the\ncommand with the new name.\n\nIf the input command is neither a `theorem` nor a `lemma`, then it returns\n`.missing` and the unchanged command.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeprecateTo.html#Mathlib.Tactic.DeprecateTo.renameTheorem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeprecateTo</span>.<span class=\"name\">renameTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newName</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`ident</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`command</span> → <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.declId</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`command</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeprecateTo.lean#L52-L58","name":"Mathlib.Tactic.DeprecateTo.newNames","line":52,"kind":"def","docLink":"./Mathlib/Tactic/DeprecateTo.html#Mathlib.Tactic.DeprecateTo.newNames","doc":"Returns the array of names that are in `new` but not in `old`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeprecateTo.html#Mathlib.Tactic.DeprecateTo.newNames\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeprecateTo</span>.<span class=\"name\">newNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old </span><span class=\"fn\">new</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeprecateTo.lean#L43-L50","name":"Mathlib.Tactic.DeprecateTo.mkDeprecationStx","line":43,"kind":"def","docLink":"./Mathlib/Tactic/DeprecateTo.html#Mathlib.Tactic.DeprecateTo.mkDeprecationStx","doc":"Produce the syntax for the command `@[deprecated (since := \"YYYY-MM-DD\")] alias n := id`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeprecateTo.html#Mathlib.Tactic.DeprecateTo.mkDeprecationStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeprecateTo</span>.<span class=\"name\">mkDeprecationStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`ident</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dat</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`command</span>)</span></div></div>"}]}