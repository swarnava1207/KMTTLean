{"name":"Mathlib.Algebra.Category.Ring.Under.Limits","instances":[{"typeNames":["CategoryTheory.Discrete.functor","CommRingCat.tensorProd"],"name":"CommRingCat.Under.instPreservesLimitUnderDiscreteFunctorTensorProdOfFinite","className":"CategoryTheory.Limits.PreservesLimit"},{"typeNames":["CategoryTheory.Discrete","CommRingCat.tensorProd"],"name":"CommRingCat.Under.instPreservesLimitsOfShapeUnderDiscreteTensorProdOfFinite","className":"CategoryTheory.Limits.PreservesLimitsOfShape"},{"typeNames":["CommRingCat.tensorProd"],"name":"CommRingCat.Under.instPreservesFiniteProductsUnderTensorProd","className":"CategoryTheory.Limits.PreservesFiniteProducts"},{"typeNames":["CategoryTheory.Limits.parallelPair","CommRingCat.tensorProd"],"name":"CommRingCat.Under.instPreservesLimitUnderWalkingParallelPairParallelPairTensorProdOfFlatCarrier","className":"CategoryTheory.Limits.PreservesLimit"},{"typeNames":["CategoryTheory.Limits.WalkingParallelPair","CommRingCat.tensorProd"],"name":"CommRingCat.Under.instPreservesLimitsOfShapeUnderWalkingParallelPairTensorProdOfFlatCarrier","className":"CategoryTheory.Limits.PreservesLimitsOfShape"},{"typeNames":["CommRingCat.tensorProd"],"name":"CommRingCat.Under.instPreservesFiniteLimitsUnderTensorProdOfFlatCarrier","className":"CategoryTheory.Limits.PreservesFiniteLimits"},{"typeNames":["CategoryTheory.Under.pushout"],"name":"CommRingCat.Under.instPreservesFiniteProductsUnderPushout","className":"CategoryTheory.Limits.PreservesFiniteProducts"}],"imports":["Init","Mathlib.Algebra.Category.Ring.Under.Basic","Mathlib.CategoryTheory.Limits.Constructions.LimitsOfProductsAndEqualizers","Mathlib.CategoryTheory.Limits.Over","Mathlib.RingTheory.TensorProduct.Pi","Mathlib.RingTheory.RingHom.Flat","Mathlib.RingTheory.Flat.Equalizer"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L210-L216","name":"CommRingCat.Under.preservesFiniteLimits_of_flat","line":210,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.preservesFiniteLimits_of_flat","doc":"`Under.pushout f` preserves finite limits if `f` is flat. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.preservesFiniteLimits_of_flat\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">preservesFiniteLimits_of_flat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat.Hom.hom\">Hom.hom</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/RingTheory/RingHom/Flat.html#RingHom.Flat\">Flat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteLimits\">CategoryTheory.Limits.PreservesFiniteLimits</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/Over/Pullback.html#CategoryTheory.Under.pushout\">CategoryTheory.Under.pushout</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L204-L208","name":"CommRingCat.Under.instPreservesFiniteProductsUnderPushout","line":204,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesFiniteProductsUnderPushout","doc":"`Under.pushout f` preserves finite products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesFiniteProductsUnderPushout\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">instPreservesFiniteProductsUnderPushout</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteProducts\">CategoryTheory.Limits.PreservesFiniteProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/Over/Pullback.html#CategoryTheory.Under.pushout\">CategoryTheory.Under.pushout</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L195-L196","name":"CommRingCat.Under.instPreservesFiniteLimitsUnderTensorProdOfFlatCarrier","line":195,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesFiniteLimitsUnderTensorProdOfFlatCarrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesFiniteLimitsUnderTensorProdOfFlatCarrier\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">instPreservesFiniteLimitsUnderTensorProdOfFlatCarrier</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Flat/Basic.html#Module.Flat\">Module.Flat</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteLimits\">CategoryTheory.Limits.PreservesFiniteLimits</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L191-L193","name":"CommRingCat.Under.instPreservesLimitsOfShapeUnderWalkingParallelPairTensorProdOfFlatCarrier","line":191,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesLimitsOfShapeUnderWalkingParallelPairTensorProdOfFlatCarrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesLimitsOfShapeUnderWalkingParallelPairTensorProdOfFlatCarrier\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">instPreservesLimitsOfShapeUnderWalkingParallelPairTensorProdOfFlatCarrier</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Flat/Basic.html#Module.Flat\">Module.Flat</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimitsOfShape\">CategoryTheory.Limits.PreservesLimitsOfShape</a> <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.WalkingParallelPair\">CategoryTheory.Limits.WalkingParallelPair</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L183-L189","name":"CommRingCat.Under.instPreservesLimitUnderWalkingParallelPairParallelPairTensorProdOfFlatCarrier","line":183,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesLimitUnderWalkingParallelPairParallelPairTensorProdOfFlatCarrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesLimitUnderWalkingParallelPairParallelPairTensorProdOfFlatCarrier\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">instPreservesLimitUnderWalkingParallelPairParallelPairTensorProdOfFlatCarrier</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Flat/Basic.html#Module.Flat\">Module.Flat</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimit\">CategoryTheory.Limits.PreservesLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair\">CategoryTheory.Limits.parallelPair</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L175-L181","name":"CommRingCat.Under.tensorProdMapEqualizerForkIsLimit","line":175,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProdMapEqualizerForkIsLimit","doc":"If `S` is `R`-flat, `tensorProd R S` preserves the equalizer of `f` and `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProdMapEqualizerForkIsLimit\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">tensorProdMapEqualizerForkIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Flat/Basic.html#Module.Flat\">Module.Flat</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCone\">mapCone</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork\">equalizerFork</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L165-L173","name":"CommRingCat.Under.equalizerForkTensorProdIso","line":165,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerForkTensorProdIso","doc":"If `S` is `R`-flat, `S ⊗[R] eq(f, g)` is isomorphic to `eq(𝟙 ⊗[R] f, 𝟙 ⊗[R] g)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerForkTensorProdIso\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">equalizerForkTensorProdIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Flat/Basic.html#Module.Flat\">Module.Flat</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProdEqualizer\">tensorProdEqualizer</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'\">equalizerFork'</a> <span class=\"fn\">(<a href=\"./Mathlib/RingTheory/TensorProduct/Basic.html#Algebra.TensorProduct.map\">Algebra.TensorProduct.map</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom.id\">AlgHom.id</a> <span class=\"fn\">↑<span class=\"fn\">S</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">f</span>)</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/RingTheory/TensorProduct/Basic.html#Algebra.TensorProduct.map\">Algebra.TensorProduct.map</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom.id\">AlgHom.id</a> <span class=\"fn\">↑<span class=\"fn\">S</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">g</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L159-L163","name":"CommRingCat.Under.tensorProdEqualizer_ι","line":159,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProdEqualizer_ι","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProdEqualizer_ι\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">tensorProdEqualizer_ι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProdEqualizer\">tensorProdEqualizer</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ι\">ι</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#AlgHom.equalizer\">AlgHom.equalizer</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">g</span>)</span>)</span>.<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#Subalgebra.val\">val</a></span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#AlgHom.toUnder\">toUnder</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L152-L157","name":"CommRingCat.Under.tensorProdEqualizer","line":152,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProdEqualizer","doc":"The fork on `𝟙 ⊗[R] f` and `𝟙 ⊗[R] g` given by `S ⊗[R] eq(f, g)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProdEqualizer\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">tensorProdEqualizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork\">CategoryTheory.Limits.Fork</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L146-L150","name":"CommRingCat.Under.equalizerFork'IsLimit","line":146,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'IsLimit","doc":"Variant of `Under.equalizerForkIsLimit` for algebra maps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'IsLimit\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">equalizerFork'IsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">(↑<span class=\"fn\">R</span>)</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">(↑<span class=\"fn\">R</span>)</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><span class=\"fn\">↑<span class=\"fn\">R</span></span><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'\">equalizerFork'</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L138-L144","name":"CommRingCat.Under.equalizerForkIsLimit","line":138,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerForkIsLimit","doc":"The canonical fork on `f g : A ⟶ B` is limiting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerForkIsLimit\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">equalizerForkIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork\">equalizerFork</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L133-L136","name":"CommRingCat.Under.equalizerFork'_ι","line":133,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'_ι","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'_ι\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">equalizerFork'_ι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">(↑<span class=\"fn\">R</span>)</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">(↑<span class=\"fn\">R</span>)</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><span class=\"fn\">↑<span class=\"fn\">R</span></span><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'\">equalizerFork'</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ι\">ι</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#AlgHom.equalizer\">AlgHom.equalizer</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#Subalgebra.val\">val</a></span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#AlgHom.toUnder\">toUnder</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L126-L131","name":"CommRingCat.Under.equalizerFork'","line":126,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'","doc":"Variant of `Under.equalizerFork'` for algebra maps. This is definitionally equal to\n`Under.equalizerFork` but this is costly in applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork'\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">equalizerFork'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">(↑<span class=\"fn\">R</span>)</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">(↑<span class=\"fn\">R</span>)</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">→ₐ[</a><span class=\"fn\">↑<span class=\"fn\">R</span></span><a href=\"./Mathlib/Algebra/Algebra/Hom.html#AlgHom\">]</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork\">CategoryTheory.Limits.Fork</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#AlgHom.toUnder\">toUnder</a></span> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#AlgHom.toUnder\">toUnder</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L122-L124","name":"CommRingCat.Under.equalizerFork_ι","line":122,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork_ι","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork_ι\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">equalizerFork_ι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork\">equalizerFork</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork.ι\">ι</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#AlgHom.equalizer\">AlgHom.equalizer</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">g</span>)</span>)</span>.<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#Subalgebra.val\">val</a></span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#AlgHom.toUnder\">toUnder</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L116-L120","name":"CommRingCat.Under.equalizerFork","line":116,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork","doc":"The canonical fork on `f g : A ⟶ B` given by the equalizer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizerFork\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">equalizerFork</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork\">CategoryTheory.Limits.Fork</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L110-L114","name":"CommRingCat.Under.equalizer_comp","line":110,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizer_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.equalizer_comp\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">equalizer_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#AlgHom.equalizer\">AlgHom.equalizer</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">g</span>)</span>)</span>.<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#Subalgebra.val\">val</a></span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#AlgHom.toUnder\">toUnder</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#AlgHom.equalizer\">AlgHom.equalizer</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.toAlgHom\">toAlgHom</a> <span class=\"fn\">g</span>)</span>)</span>.<a href=\"./Mathlib/Algebra/Algebra/Subalgebra/Basic.html#Subalgebra.val\">val</a></span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#AlgHom.toUnder\">toUnder</a></span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L103-L104","name":"CommRingCat.Under.instPreservesFiniteProductsUnderTensorProd","line":103,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesFiniteProductsUnderTensorProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesFiniteProductsUnderTensorProd\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">instPreservesFiniteProductsUnderTensorProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteProducts\">CategoryTheory.Limits.PreservesFiniteProducts</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L95-L101","name":"CommRingCat.Under.instPreservesLimitsOfShapeUnderDiscreteTensorProdOfFinite","line":95,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesLimitsOfShapeUnderDiscreteTensorProdOfFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesLimitsOfShapeUnderDiscreteTensorProdOfFinite\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">instPreservesLimitsOfShapeUnderDiscreteTensorProdOfFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimitsOfShape\">CategoryTheory.Limits.PreservesLimitsOfShape</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Discrete/Basic.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">J</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L89-L93","name":"CommRingCat.Under.instPreservesLimitUnderDiscreteFunctorTensorProdOfFinite","line":89,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesLimitUnderDiscreteFunctorTensorProdOfFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.instPreservesLimitUnderDiscreteFunctorTensorProdOfFinite\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">instPreservesLimitUnderDiscreteFunctorTensorProdOfFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimit\">CategoryTheory.Limits.PreservesLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Discrete/Basic.html#CategoryTheory.Discrete.functor\">CategoryTheory.Discrete.functor</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L84-L87","name":"CommRingCat.Under.piFanTensorProductIsLimit","line":84,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.piFanTensorProductIsLimit","doc":"`tensorProd R S` preserves the limit of the canonical fan on `P`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.piFanTensorProductIsLimit\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">piFanTensorProductIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.tensorProd\">tensorProd</a></span> <span class=\"fn\">S</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Functor.mapCone\">mapCone</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.piFan\">piFan</a> <span class=\"fn\">P</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L79-L82","name":"CommRingCat.Under.tensorProductFanIsLimit","line":79,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFanIsLimit","doc":"The fan on `i ↦ S ⊗[R] P i` given by `S ⊗[R] ∀ i, P i` is limiting if `ι` is finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFanIsLimit\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">tensorProductFanIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFan\">tensorProductFan</a> <span class=\"fn\">S</span> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L63-L76","name":"CommRingCat.Under.tensorProductFanIso","line":63,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFanIso","doc":"The two fans on `i ↦ S ⊗[R] P i` agree if `ι` is finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFanIso\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">tensorProductFanIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFan\">tensorProductFan</a> <span class=\"fn\">S</span> <span class=\"fn\">P</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFan'\">tensorProductFan'</a> <span class=\"fn\">S</span> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L58-L61","name":"CommRingCat.Under.tensorProductFan'","line":58,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFan'","doc":"The fan on `i ↦ S ⊗[R] P i` given by `∀ i, S ⊗[R] P i` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFan'\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">tensorProductFan'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.mkUnder\">mkUnder</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct\">TensorProduct</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.Comma.right\">right</a></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L51-L55","name":"CommRingCat.Under.tensorProductFan","line":51,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFan","doc":"The fan on `i ↦ S ⊗[R] P i` given by `S ⊗[R] ∀ i, P i` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.tensorProductFan\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">tensorProductFan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Algebra/Category/Ring/Under/Basic.html#CommRingCat.mkUnder\">mkUnder</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct\">TensorProduct</a> <span class=\"fn\">↑<span class=\"fn\">R</span></span> <span class=\"fn\">↑<span class=\"fn\">S</span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.Comma.right\">right</a></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L44-L48","name":"CommRingCat.Under.piFanIsLimit","line":44,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.piFanIsLimit","doc":"The canonical fan is limiting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.piFanIsLimit\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">piFanIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.piFan\">piFan</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Category/Ring/Under/Limits.lean#L39-L42","name":"CommRingCat.Under.piFan","line":39,"kind":"def","docLink":"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.piFan","doc":"The canonical fan on `P : ι → Under R` given by `∀ i, P i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Ring/Under/Limits.html#CommRingCat.Under.piFan\"><span class=\"name\">CommRingCat</span>.<span class=\"name\">Under</span>.<span class=\"name\">piFan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/Over/Basic.html#CategoryTheory.Under\">CategoryTheory.Under</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">P</span></span></div></div>"}]}