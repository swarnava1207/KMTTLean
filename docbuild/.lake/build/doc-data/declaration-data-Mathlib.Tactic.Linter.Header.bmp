{"name":"Mathlib.Tactic.Linter.Header","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Elab.ParseImportsFast","Mathlib.Tactic.Linter.DirectoryDependency"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L294-L354","name":"Mathlib.Linter.Style.header.headerLinter","line":294,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.Style.header.headerLinter","doc":"The \"header\" style linter checks that a file starts with\n```\n/-\nCopyright ...\nApache ...\nAuthors ...\n-/\n\nimport statements*\nmodule doc-string*\nremaining file\n```\nIt emits a warning if\n* the copyright statement is malformed;\n* `Mathlib.Tactic` is imported;\n* any import in `Lake` is present;\n* the first non-`import` command is not a module doc-string.\n\nThe linter allows `import`-only files and does not require a copyright statement in `Mathlib.Init`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.Style.header.headerLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">header</span>.<span class=\"name\">headerLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L283-L292","name":"Mathlib.Linter.Style.header.duplicateImportsCheck","line":283,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.Style.header.duplicateImportsCheck","doc":"Check the syntax `imports` for syntactically duplicate imports.\nThe output is an array of `Syntax` atoms whose ranges are the import statements,\nand the embedded strings are the error message of the linter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.Style.header.duplicateImportsCheck\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">header</span>.<span class=\"name\">duplicateImportsCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L259-L281","name":"Mathlib.Linter.Style.header.broadImportsCheck","line":259,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.Style.header.broadImportsCheck","doc":"Check the `Syntax` `imports` for broad imports:\n`Mathlib.Tactic`, any import starting with `Lake`, or `Mathlib.Tactic.{Have,Replace}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.Style.header.broadImportsCheck\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">header</span>.<span class=\"name\">broadImportsCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainModule</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L231-L255","name":"Mathlib.Linter.linter.style.header","line":231,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.linter.style.header","doc":"The \"header\" style linter checks that a file starts with\n```\n/-\nCopyright ...\nApache ...\nAuthors ...\n-/\n\nimport statements*\nmodule doc-string*\nremaining file\n```\nIt emits a warning if\n* the copyright statement is malformed;\n* `Mathlib.Tactic` is imported;\n* any import in `Lake` is present;\n* the first non-`import` command is not a module doc-string.\n\nThe linter allows `import`-only files and does not require a copyright statement in `Mathlib.Init`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.linter.style.header\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L222-L229","name":"Mathlib.Linter.inMathlibRef","line":222,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.inMathlibRef","doc":"`inMathlibRef` is\n* `none` at initialization time;\n* `some true` if the `header` linter has already discovered that the current file\n  is imported in `Mathlib.lean`;\n* `some false` if the `header` linter has already discovered that the current file\n  is *not* imported in `Mathlib.lean`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.inMathlibRef\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">inMathlibRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L210-L220","name":"Mathlib.Linter.isInMathlib","line":210,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.isInMathlib","doc":"`isInMathlib modName` returns `true` if `Mathlib.lean` imports the file `modName` and `false`\notherwise.\nThis is used by the `Header` linter as a heuristic of whether it should inspect the file or not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.isInMathlib\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">isInMathlib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L139-L208","name":"Mathlib.Linter.copyrightHeaderChecks","line":139,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.copyrightHeaderChecks","doc":"The main function to validate the copyright string.\nThe input is the copyright string, the output is an array of `Syntax Ã— String` encoding:\n* the `Syntax` factors are atoms whose ranges are \"best guesses\" for where the changes should\n  take place; the embedded string is the current text that the linter flagged;\n* the `String` factor is the linter message.\n\nThe linter checks that\n* the first and last line of the copyright are a `(\"/-\", \"-/\")` pair, each on its own line;\n* the first line is begins with `Copyright (c) 20` and ends with `. All rights reserved.`;\n* the second line is `Released under Apache 2.0 license as described in the file LICENSE.`;\n* the remainder of the string begins with `Authors: `, does not end with `.` and\n  contains no ` and ` nor a double space, except possibly after a line break.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.copyrightHeaderChecks\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">copyrightHeaderChecks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">copyright</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L112-L137","name":"Mathlib.Linter.authorsLineChecks","line":112,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.authorsLineChecks","doc":"Return if `line` looks like a correct authors line in a copyright header.\n\nThe `offset` input is used to shift the position information of the `Syntax` that the command\nproduces.\n`authorsLineChecks` computes a position for its warning *relative to `line`*.\nThe `offset` input passes on the starting position of `line` in the whole file.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.authorsLineChecks\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">authorsLineChecks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">line</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L104-L110","name":"Mathlib.Linter.toSyntax","line":104,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.toSyntax","doc":"`toSyntax s pattern` converts the two input strings into a `Syntax`, assuming that `pattern`\nis a substring of `s`:\nthe syntax is an atom with value `pattern` whose the range is the range of `pattern` in `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.toSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">toSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">pattern</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L83-L102","name":"Mathlib.Linter.parseUpToHere","line":83,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.parseUpToHere","doc":"`parseUpToHere pos post` takes as input `pos : String.Pos` and the optional `post : String`.\nIt parses the current file from the beginning until `pos`, appending `post` at the end.\nIt returns a syntax node of kind `Lean.Parser.Module.module`.\nThe option of appending a final string to the text gives more control to avoid syntax errors,\nfor instance in the presence of `#guard_msgs in` or `set_option ... in`.\n\nNote that this parsing will *not* be successful on every file.  However, if the linter is\nparsing the file linearly, it will only need to parse\n* the imports (that are always parseable) and\n* the first non-import command that is supposed to be a module doc-string (so again always\n  parseable).\n\nIn conclusion, either the parsing is successful, and the linter can continue with its analysis,\nor the parsing is not successful and the linter will flag a missing module doc-string!\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.parseUpToHere\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">parseUpToHere</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">post</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L68-L81","name":"Mathlib.Linter.getImportIds","line":68,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.getImportIds","doc":"`getImportIds s` takes as input `s : Syntax`.\nIt returns the array of all `import` identifiers in `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.getImportIds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">getImportIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/Header.lean#L55-L66","name":"Mathlib.Linter.firstNonImport?","line":55,"kind":"def","docLink":"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.firstNonImport?","doc":"`firstNonImport? stx` assumes that the input `Syntax` is of kind `Lean.Parser.Module.module`.\nIt returns\n* `none`, if `stx` consists only of `import` statements,\n* the first non-`import` command in `stx`, otherwise.\n\nThe intended use-case is to use the output of `testParseModule` as the input of\n`firstNonImport?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Header.html#Mathlib.Linter.firstNonImport?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">firstNonImport?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"}]}