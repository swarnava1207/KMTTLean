{"name":"Mathlib.Tactic.CategoryTheory.Coherence.PureCoherence","instances":[{"typeNames":["Mathlib.Tactic.BicategoryLike.Normalize.Result"],"name":"Mathlib.Tactic.BicategoryLike.Normalize.instInhabitedResult","className":"Inhabited"}],"imports":["Init","Lean.Meta.Tactic.Apply","Mathlib.Tactic.CategoryTheory.Coherence.Datatypes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L165-L196","name":"Mathlib.Tactic.BicategoryLike.pureCoherence","line":165,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.pureCoherence","doc":"Close the goal of the form `η = θ`, where `η` and `θ` are 2-isomorphisms made up only of\nassociators, unitors, and identities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.pureCoherence\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">pureCoherence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Context\">Context</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MkMor₂\">MkMor₂</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom\">MonadCoherehnceHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\">MkEqOfNaturality</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L161-L161","name":"Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mkEqOfNaturality","line":161,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mkEqOfNaturality","doc":"Auxiliary function for `pureCoherence`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mkEqOfNaturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEqOfNaturality</span>.<span class=\"name\">mkEqOfNaturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\">MkEqOfNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">θ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η' </span><span class=\"fn\">θ'</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.IsoLift\">IsoLift</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η_f </span><span class=\"fn\">η_g</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Hη </span><span class=\"fn\">Hθ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L159-L159","name":"Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mk","line":159,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEqOfNaturality</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEqOfNaturality</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.IsoLift\">IsoLift</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.IsoLift\">IsoLift</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\">MkEqOfNaturality</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L158-L161","name":"Mathlib.Tactic.BicategoryLike.MkEqOfNaturality","line":158,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality","doc":"Prove the equality between structural isomorphisms using the naturality of `normalize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEqOfNaturality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L95-L156","name":"Mathlib.Tactic.BicategoryLike.naturality","line":95,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.naturality","doc":"Meta version of `CategoryTheory.FreeBicategory.normalize_naturality`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.naturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom\">MonadCoherehnceHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L89-L89","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityInv","line":89,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityInv","doc":"The naturality for the inverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">η_f </span><span class=\"fn\">η_g</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L86-L86","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityHorizontalComp","line":86,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityHorizontalComp","doc":"The naturality for the horizontal composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityHorizontalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf₁ </span><span class=\"fn\">pf₁f₂</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">g₁ </span><span class=\"fn\">f₂ </span><span class=\"fn\">g₂</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">θ </span><span class=\"fn\">η_f₁ </span><span class=\"fn\">η_g₁ </span><span class=\"fn\">η_f₂ </span><span class=\"fn\">η_g₂</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η </span><span class=\"fn\">ih_θ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L83-L83","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerRight","line":83,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerRight","doc":"The naturality for the right whiskering. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityWhiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf </span><span class=\"fn\">pfh</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">η_f </span><span class=\"fn\">η_g </span><span class=\"fn\">η_fh</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L80-L80","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerLeft","line":80,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerLeft","doc":"The naturality for the left whiskering. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityWhiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf </span><span class=\"fn\">pfg</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">η_f </span><span class=\"fn\">η_fg </span><span class=\"fn\">η_fh</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L77-L77","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityComp","line":77,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityComp","doc":"The naturality for the composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">θ </span><span class=\"fn\">η_f </span><span class=\"fn\">η_g </span><span class=\"fn\">η_h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η </span><span class=\"fn\">ih_θ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L75-L75","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityId","line":75,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityId","doc":"The naturality for the identity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η_f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L73-L73","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityRightUnitor","line":73,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityRightUnitor","doc":"The naturality for the right unitor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityRightUnitor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityRightUnitor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η_f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L71-L71","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityLeftUnitor","line":71,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityLeftUnitor","doc":"The naturality for the left unitor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityLeftUnitor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityLeftUnitor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η_f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L68-L68","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityAssociator","line":68,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityAssociator","doc":"The naturality for the associator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mkNaturalityAssociator\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mkNaturalityAssociator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">pf </span><span class=\"fn\">pfg </span><span class=\"fn\">pfgh</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η_f </span><span class=\"fn\">η_g </span><span class=\"fn\">η_h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L66-L66","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mk","line":66,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkNaturalityAssociator</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkNaturalityLeftUnitor </span><span class=\"fn\">mkNaturalityRightUnitor </span><span class=\"fn\">mkNaturalityId</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkNaturalityComp</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkNaturalityWhiskerLeft </span><span class=\"fn\">mkNaturalityWhiskerRight</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> →\n      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkNaturalityHorizontalComp</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> →\n      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> →\n          <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> →\n              <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkNaturalityInv</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L65-L89","name":"Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality","line":65,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality","doc":"Lemmas to prove the meta version of `CategoryTheory.FreeBicategory.normalize_naturality`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalizeNaturality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L46-L63","name":"Mathlib.Tactic.BicategoryLike.normalize","line":46,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.normalize","doc":"Meta version of `CategoryTheory.FreeBicategory.normalizeIso`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.normalize\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">normalize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Normalize.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L40-L40","name":"Mathlib.Tactic.BicategoryLike.Normalize.instInhabitedResult","line":40,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.instInhabitedResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.instInhabitedResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">instInhabitedResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L39-L39","name":"Mathlib.Tactic.BicategoryLike.Normalize.Result.toNormalize","line":39,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.toNormalize","doc":"The 2-morphism from the original 1-morphism to the normalized 1-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.toNormalize\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Result</span>.<span class=\"name\">toNormalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L37-L37","name":"Mathlib.Tactic.BicategoryLike.Normalize.Result.normalizedHom","line":37,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.normalizedHom","doc":"The normalized 1-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.normalizedHom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Result</span>.<span class=\"name\">normalizedHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L35-L35","name":"Mathlib.Tactic.BicategoryLike.Normalize.Result.mk","line":35,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">normalizedHom</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.NormalizedHom\">NormalizedHom</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toNormalize</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\">Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.lean#L34-L40","name":"Mathlib.Tactic.BicategoryLike.Normalize.Result","line":34,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result","doc":"The result of normalizing a 1-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.Normalize.Result\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}