{"name":"Lean.Meta.Tactic.Grind.Arith.Cutsat.Nat","instances":[{"typeNames":["Int.OfNat.Expr"],"name":"Int.OfNat.instToExprExpr","className":"Lean.ToExpr"}],"imports":["Init.Data.Int.OfNat","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Simp.Arith.Nat.Basic","Lean.Meta.Tactic.Grind.Arith.Cutsat.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L140-L149","name":"Lean.Meta.Grind.Arith.Cutsat.assertDenoteAsIntNonneg","line":140,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Lean.Meta.Grind.Arith.Cutsat.assertDenoteAsIntNonneg","doc":"If `e` is of the form `a.denoteAsInt ctx` for some `a` and `ctx`,\nassert that `e` is nonnegative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Lean.Meta.Grind.Arith.Cutsat.assertDenoteAsIntNonneg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">assertDenoteAsIntNonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L105-L135","name":"Int.OfNat.ofDenoteAsIntExpr?","line":105,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.ofDenoteAsIntExpr?","doc":"Given `e` of type `Int`, tries to compute `a : Int.OfNat.Expr` s.t.\n`a.denoteAsInt ctx` is `e`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.ofDenoteAsIntExpr?\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">ofDenoteAsIntExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.M\">M</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L102-L103","name":"Int.OfNat.toIntEq.conv","line":102,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntEq.conv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntEq.conv\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toIntEq</span>.<span class=\"name\">conv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.M\">M</a> (<a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L98-L103","name":"Int.OfNat.toIntEq","line":98,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntEq\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toIntEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L89-L96","name":"Int.OfNat.toIntDvd?","line":89,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntDvd?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntDvd?\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toIntDvd?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L86-L87","name":"Int.OfNat.toIntLe?.conv","line":86,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntLe?.conv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntLe?.conv\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toIntLe?</span>.<span class=\"name\">conv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.M\">M</a> (<a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L76-L87","name":"Int.OfNat.toIntLe?","line":76,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntLe?","doc":"Given `e` of the form `lhs ≤ rhs` where `lhs` and `rhs` have type `Nat`,\nreturns `(lhs, rhs, ctx)` where `lhs` and `rhs` are `Int.OfNat.Expr` and `ctx` is the context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntLe?\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toIntLe?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L48-L74","name":"Int.OfNat.toOfNatExpr","line":48,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toOfNatExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toOfNatExpr\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toOfNatExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.M\">M</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L44-L44","name":"Int.OfNat.M","line":44,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.M\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L42-L42","name":"Int.OfNat.OfNat.State.map","line":42,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State.map\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">State</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">Lean.Meta.Grind.ENodeKey</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L41-L41","name":"Int.OfNat.OfNat.State.ctx","line":41,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State.ctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State.ctx\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">State</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L40-L40","name":"Int.OfNat.OfNat.State.mk","line":40,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State.mk\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">Lean.Meta.Grind.ENodeKey</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L40-L42","name":"Int.OfNat.OfNat.State","line":40,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.OfNat.State\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L29-L36","name":"Int.OfNat.Expr.denoteAsIntExpr","line":29,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.Expr.denoteAsIntExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.Expr.denoteAsIntExpr\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteAsIntExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L25-L27","name":"Int.OfNat.instToExprExpr","line":25,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.instToExprExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.instToExprExpr\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">instToExprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L15-L23","name":"Int.OfNat.toExpr","line":15,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toExpr\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"}]}