{"name":"Mathlib.Tactic.FunProp.StateList","instances":[{"typeNames":["Mathlib.Meta.FunProp.StateList"],"name":"Mathlib.Meta.FunProp.StateList.instAppend","className":"Append"},{"typeNames":["Mathlib.Meta.FunProp.StateListT"],"name":"Mathlib.Meta.FunProp.StateListT.instMonad","className":"Monad"},{"typeNames":["Mathlib.Meta.FunProp.StateListT"],"name":"Mathlib.Meta.FunProp.StateListT.instAlternative","className":"Alternative"},{"typeNames":["Mathlib.Meta.FunProp.StateListT"],"name":"Mathlib.Meta.FunProp.StateListT.instMonadLift","className":"MonadLift"},{"typeNames":["Mathlib.Meta.FunProp.StateListT"],"name":"Mathlib.Meta.FunProp.StateListT.instMonadFunctor","className":"MonadFunctor"},{"typeNames":["Mathlib.Meta.FunProp.StateListT"],"name":"Mathlib.Meta.FunProp.StateListT.instMonadExceptOf","className":"MonadExceptOf"},{"typeNames":["Mathlib.Meta.FunProp.StateListT"],"name":"Mathlib.Meta.FunProp.instMonadStateOfStateListT","className":"MonadStateOf"},{"typeNames":["Mathlib.Meta.FunProp.StateListT"],"name":"Mathlib.Meta.FunProp.StateListT.monadControl","className":"MonadControl"}],"imports":["Init","Mathlib.Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L170-L174","name":"Mathlib.Meta.FunProp.StateListT.monadControl","line":170,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.monadControl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.monadControl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">monadControl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl\">MonadControl</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L164-L167","name":"Mathlib.Meta.FunProp.instMonadStateOfStateListT","line":164,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.instMonadStateOfStateListT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.instMonadStateOfStateListT\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instMonadStateOfStateListT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L154-L158","name":"Mathlib.Meta.FunProp.StateListT.instMonadExceptOf","line":154,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instMonadExceptOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instMonadExceptOf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">instMonadExceptOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L151-L152","name":"Mathlib.Meta.FunProp.StateListT.instMonadFunctor","line":151,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instMonadFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instMonadFunctor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">instMonadFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L149-L149","name":"Mathlib.Meta.FunProp.StateListT.instMonadLift","line":149,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instMonadLift\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">instMonadLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L144-L147","name":"Mathlib.Meta.FunProp.StateListT.lift","line":144,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.lift","doc":"Lift an action from `m α` to `StateListT σ m α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.lift\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L139-L142","name":"Mathlib.Meta.FunProp.StateListT.modifyGet","line":139,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.modifyGet","doc":"Modify and get the state in `StateListT σ m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.modifyGet\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">modifyGet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L134-L137","name":"Mathlib.Meta.FunProp.StateListT.set","line":134,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.set","doc":"Set the state in `StateListT σ m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.set\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L129-L132","name":"Mathlib.Meta.FunProp.StateListT.get","line":129,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.get","doc":"Return the state from `StateListT σ m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.get\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L125-L127","name":"Mathlib.Meta.FunProp.StateListT.instAlternative","line":125,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instAlternative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instAlternative\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">instAlternative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L111-L115","name":"Mathlib.Meta.FunProp.StateListT.instMonad","line":111,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.instMonad\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">instMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L89-L90","name":"Mathlib.Meta.FunProp.StateListM","line":89,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListM","doc":"The combined state and list monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L84-L87","name":"Mathlib.Meta.FunProp.StateListT.run'","line":84,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.run'","doc":"Run `x` on a given state `s`, returning the list of values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.run'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L79-L82","name":"Mathlib.Meta.FunProp.StateListT.run","line":79,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.run","doc":"Run `x` on a given state `s`, returning the list of values with corresponding states. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT.run\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\">StateListT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L73-L75","name":"Mathlib.Meta.FunProp.StateListT","line":73,"kind":"def","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT","doc":"The combined state and list monad transformer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateListT\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateListT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L63-L63","name":"Mathlib.Meta.FunProp.StateList.instAppend","line":63,"kind":"instance","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList.instAppend\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateList</span>.<span class=\"name\">instAppend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList\">StateList</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L39-L41","name":"Mathlib.Meta.FunProp.StateList.cons","line":39,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList.cons","doc":"If `a : α`, `s : σ` and `l : List α`, then `.cons a s l`, is the\nlist with first element `a` with state `s` and `l` as the rest of the list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList.cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateList</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList\">StateList</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList\">StateList</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L37-L38","name":"Mathlib.Meta.FunProp.StateList.nil","line":37,"kind":"ctor","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList.nil","doc":".nil is the empty list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList.nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateList</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList\">StateList</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FunProp/StateList.lean#L34-L41","name":"Mathlib.Meta.FunProp.StateList","line":34,"kind":"inductive","docLink":"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList","doc":"`StateList` is a List with a state associated to each element.\nThis is used instead of `List (α × σ)` as it is more efficient. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/StateList.html#Mathlib.Meta.FunProp.StateList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">StateList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}