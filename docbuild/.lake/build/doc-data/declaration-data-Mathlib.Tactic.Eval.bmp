{"name":"Mathlib.Tactic.Eval","instances":[],"imports":["Init","Mathlib.Init","Qq.Macro"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Eval.lean#L37-L44","name":"Mathlib.Meta.elabEvalExpr","line":37,"kind":"def","docLink":"./Mathlib/Tactic/Eval.html#Mathlib.Meta.elabEvalExpr","doc":"`eval% x` evaluates the term `x : X` in the interpreter, and then injects the resulting expression.\n\nAs an example:\n```lean\nexample : 2^10 = eval% 2^10 := by\n  -- goal is `2^10 = 1024`\n  sorry\n```\nThis only works if a `Lean.ToExpr X` instance is available.\n\nTip: you can use `show_term eval% x` to see the value of `eval% x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Eval.html#Mathlib.Meta.elabEvalExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">elabEvalExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Eval.lean#L22-L35","name":"Mathlib.Meta.eval_expr","line":22,"kind":"def","docLink":"./Mathlib/Tactic/Eval.html#Mathlib.Meta.eval_expr","doc":"`eval% x` evaluates the term `x : X` in the interpreter, and then injects the resulting expression.\n\nAs an example:\n```lean\nexample : 2^10 = eval% 2^10 := by\n  -- goal is `2^10 = 1024`\n  sorry\n```\nThis only works if a `Lean.ToExpr X` instance is available.\n\nTip: you can use `show_term eval% x` to see the value of `eval% x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Eval.html#Mathlib.Meta.eval_expr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">eval_expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}