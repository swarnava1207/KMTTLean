{"name":"Mathlib.Tactic.NormNum.NatSqrt","instances":[],"imports":["Init","Mathlib.Tactic.NormNum"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/NatSqrt.lean#L42-L50","name":"Tactic.NormNum.evalNatSqrt","line":42,"kind":"def","docLink":"./Mathlib/Tactic/NormNum/NatSqrt.html#Tactic.NormNum.evalNatSqrt","doc":"Evaluates the `Nat.sqrt` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/NatSqrt.html#Tactic.NormNum.evalNatSqrt\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalNatSqrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/NormNum/Core.html#Mathlib.Meta.NormNum.NormNumExt\">Mathlib.Meta.NormNum.NormNumExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/NatSqrt.lean#L28-L40","name":"Tactic.NormNum.proveNatSqrt","line":28,"kind":"def","docLink":"./Mathlib/Tactic/NormNum/NatSqrt.html#Tactic.NormNum.proveNatSqrt","doc":"Given the natural number literal `ex`, returns its square root as a natural number literal\nand an equality proof. Panics if `ex` isn't a natural number literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/NatSqrt.html#Tactic.NormNum.proveNatSqrt\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">proveNatSqrt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">ey</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$ex»</span>.<a href=\"./Batteries/Data/Nat/Basic.html#Nat.sqrt\">sqrt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$ey»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/NatSqrt.lean#L25-L26","name":"Tactic.NormNum.isNat_sqrt","line":25,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/NatSqrt.html#Tactic.NormNum.isNat_sqrt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/NatSqrt.html#Tactic.NormNum.isNat_sqrt\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isNat_sqrt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">nx </span><span class=\"fn\">z</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">x</span> <span class=\"fn\">nx</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nx</span>.<a href=\"./Batteries/Data/Nat/Basic.html#Nat.sqrt\">sqrt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Batteries/Data/Nat/Basic.html#Nat.sqrt\">sqrt</a></span> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/NormNum/NatSqrt.lean#L19-L23","name":"Tactic.NormNum.nat_sqrt_helper","line":19,"kind":"theorem","docLink":"./Mathlib/Tactic/NormNum/NatSqrt.html#Tactic.NormNum.nat_sqrt_helper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/NatSqrt.html#Tactic.NormNum.nat_sqrt_helper\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">nat_sqrt_helper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Prelude.html#Nat.ble\">ble</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Batteries/Data/Nat/Basic.html#Nat.sqrt\">sqrt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"}]}