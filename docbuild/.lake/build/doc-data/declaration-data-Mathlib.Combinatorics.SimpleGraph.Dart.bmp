{"name":"Mathlib.Combinatorics.SimpleGraph.Dart","instances":[{"typeNames":["Eq"],"name":"SimpleGraph.instDecidableEqDart","className":"Decidable"},{"typeNames":["SimpleGraph.Dart"],"name":"SimpleGraph.Dart.fintype","className":"Fintype"},{"typeNames":["SimpleGraph.Dart"],"name":"SimpleGraph.nonempty_dart_top","className":"Nonempty"}],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Basic","Mathlib.Data.Fintype.Sigma"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L134-L136","name":"SimpleGraph.nonempty_dart_top","line":134,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.nonempty_dart_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.nonempty_dart_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">nonempty_dart_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L128-L132","name":"SimpleGraph.dartOfNeighborSet_injective","line":128,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dartOfNeighborSet_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dartOfNeighborSet_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dartOfNeighborSet_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dartOfNeighborSet\">dartOfNeighborSet</a></span> <span class=\"fn\">v</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L124-L124","name":"SimpleGraph.dartOfNeighborSet_toProd","line":124,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dartOfNeighborSet_toProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dartOfNeighborSet_toProd\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dartOfNeighborSet_toProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dartOfNeighborSet\">dartOfNeighborSet</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">↑<span class=\"fn\">w</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L122-L126","name":"SimpleGraph.dartOfNeighborSet","line":122,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dartOfNeighborSet","doc":"For a given vertex `v`, this is the bijective map from the neighbor set at `v`\nto the darts `d` with `d.fst = v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dartOfNeighborSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dartOfNeighborSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L116-L120","name":"SimpleGraph.DartAdj","line":116,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.DartAdj","doc":"Two darts are said to be adjacent if they could be consecutive\ndarts in a walk -- that is, the first dart's second vertex is equal to\nthe second dart's first vertex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.DartAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">DartAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">d'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L107-L112","name":"SimpleGraph.dart_edge_eq_mk'_iff'","line":107,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dart_edge_eq_mk'_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dart_edge_eq_mk'_iff'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dart_edge_eq_mk'_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">u</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L102-L105","name":"SimpleGraph.dart_edge_eq_mk'_iff","line":102,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dart_edge_eq_mk'_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dart_edge_eq_mk'_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dart_edge_eq_mk'_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">Sym2.mk</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Prod.html#Prod.swap\">swap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L98-L100","name":"SimpleGraph.dart_edge_eq_iff","line":98,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dart_edge_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.dart_edge_eq_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dart_edge_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁ </span><span class=\"fn\">d₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">d₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">d₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">d₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L95-L96","name":"SimpleGraph.Dart.symm_ne","line":95,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">symm_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">d</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L91-L93","name":"SimpleGraph.Dart.symm_involutive","line":91,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_involutive\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">symm_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L87-L89","name":"SimpleGraph.Dart.symm_symm","line":87,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">symm_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L83-L85","name":"SimpleGraph.Dart.edge_comp_symm","line":83,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge_comp_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge_comp_symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">edge_comp_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L79-L81","name":"SimpleGraph.Dart.edge_symm","line":79,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge_symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">edge_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L75-L77","name":"SimpleGraph.Dart.symm_mk","line":75,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">symm_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.1</span> <span class=\"fn\"><span class=\"fn\">p</span>.2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">toProd</span> := <span class=\"fn\">p</span>, <span class=\"fn\">adj</span> := <span class=\"fn\">h</span> }</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toProd</span> := <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Prod.html#Prod.swap\">swap</a></span>, <span class=\"fn\">adj</span> := <span class=\"fn\">⋯</span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L71-L71","name":"SimpleGraph.Dart.symm_toProd","line":71,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_toProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm_toProd\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">symm_toProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\">symm</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Init/Data/Prod.html#Prod.swap\">swap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L70-L73","name":"SimpleGraph.Dart.symm","line":70,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm","doc":"The dart with reversed orientation from a given dart. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L66-L68","name":"SimpleGraph.Dart.edge_mem","line":66,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge_mem\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">edge_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L62-L64","name":"SimpleGraph.Dart.edge_mk","line":62,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge_mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">edge_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.1</span> <span class=\"fn\"><span class=\"fn\">p</span>.2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">toProd</span> := <span class=\"fn\">p</span>, <span class=\"fn\">adj</span> := <span class=\"fn\">h</span> }</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\">edge</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">Sym2.mk</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L58-L60","name":"SimpleGraph.Dart.edge","line":58,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge","doc":"The edge associated to the dart. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L51-L56","name":"SimpleGraph.Dart.fintype","line":51,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.fintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.fintype\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L48-L49","name":"SimpleGraph.Dart.toProd_injective","line":48,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">toProd_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L44-L46","name":"SimpleGraph.Dart.snd_ne_fst","line":44,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.snd_ne_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.snd_ne_fst\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">snd_ne_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.2</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L40-L42","name":"SimpleGraph.Dart.fst_ne_snd","line":40,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.fst_ne_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.fst_ne_snd\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">fst_ne_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L36-L38","name":"SimpleGraph.Dart.ext","line":36,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.ext\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁ </span><span class=\"fn\">d₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">d₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">d₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L33-L34","name":"SimpleGraph.Dart.ext_iff","line":33,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.ext_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁ </span><span class=\"fn\">d₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">d₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">d₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L25-L25","name":"SimpleGraph.instDecidableEqDart","line":25,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.instDecidableEqDart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.instDecidableEqDart\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">instDecidableEqDart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">G✝</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L24-L24","name":"SimpleGraph.Dart.adj","line":24,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.1</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\">toProd</a></span>.2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L23-L23","name":"SimpleGraph.Dart.mk","line":23,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toProd</span> : <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">adj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\"><span class=\"fn\">toProd</span>.1</span> <span class=\"fn\"><span class=\"fn\">toProd</span>.2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L23-L25","name":"SimpleGraph.Dart.toProd","line":23,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart.toProd\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span>.<span class=\"name\">toProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\">Dart</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">V</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Dart.lean#L20-L25","name":"SimpleGraph.Dart","line":20,"kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart","doc":"A `Dart` is an oriented edge, implemented as an ordered pair of adjacent vertices.\nThis terminology comes from combinatorial maps, and they are also known as \"half-edges\"\nor \"bonds.\" "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Dart.html#SimpleGraph.Dart\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Dart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">V</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}