{"name":"Init.Data.Int.DivMod.Basic","instances":[{"typeNames":["Int"],"name":"Int.instDiv","className":"Div"},{"typeNames":["Int"],"name":"Int.instMod","className":"Mod"}],"imports":["Init.Data.Int.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L293-L319","name":"Int.bdiv","line":293,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.bdiv","doc":"Balanced division.\n\nThis returns the unique integer so that `b * (Int.bdiv a b) + Int.bmod a b = a`.\n\nExamples:\n* `(7 : Int).bdiv 0 = 0`\n* `(0 : Int).bdiv 7 = 0`\n* `(12 : Int).bdiv 6 = 2`\n* `(12 : Int).bdiv 7 = 2`\n* `(12 : Int).bdiv 8 = 2`\n* `(12 : Int).bdiv 9 = 1`\n* `(-12 : Int).bdiv 6 = -2`\n* `(-12 : Int).bdiv 7 = -2`\n* `(-12 : Int).bdiv 8 = -1`\n* `(-12 : Int).bdiv 9 = -1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.bdiv\"><span class=\"name\">Int</span>.<span class=\"name\">bdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L266-L291","name":"Int.bmod","line":266,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.bmod","doc":"Balanced modulus.\n\nThis version of integer modulus uses the balanced rounding convention, which guarantees that\n`-m / 2 ≤ Int.bmod x m < m/2` for `m ≠ 0` and `Int.bmod x m` is congruent to `x` modulo `m`.\n\nIf `m = 0`, then `Int.bmod x m = x`.\n\nExamples:\n* `(7 : Int).bmod 0 = 7`\n* `(0 : Int).bmod 7 = 0`\n* `(12 : Int).bmod 6 = 0`\n* `(12 : Int).bmod 7 = -2`\n* `(12 : Int).bmod 8 = -4`\n* `(12 : Int).bmod 9 = 3`\n* `(-12 : Int).bmod 6 = 0`\n* `(-12 : Int).bmod 7 = 2`\n* `(-12 : Int).bmod 8 = -4`\n* `(-12 : Int).bmod 9 = -3`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\"><span class=\"name\">Int</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L249-L251","name":"Int.ofNat_fdiv","line":249,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_fdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_fdiv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_fdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.fdiv\">fdiv</a></span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L220-L247","name":"Int.fmod","line":220,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.fmod","doc":"Integer modulus using the F-rounding convention.\n\nIn the F-rounding convention (flooring division), `Int.fdiv x y` satisfies `Int.fdiv x y = ⌊x / y⌋`\nand `Int.fmod` is the unique function satisfying `Int.fmod x y + (Int.fdiv x y) * y = x`.\n\nExamples:\n\n* `(7 : Int).fmod (0 : Int) = 7`\n* `(0 : Int).fmod (7 : Int) = 0`\n\n* `(12 : Int).fmod (6 : Int) = 0`\n* `(12 : Int).fmod (-6 : Int) = 0`\n* `(-12 : Int).fmod (6 : Int) = 0`\n* `(-12 : Int).fmod (-6 : Int) = 0`\n\n* `(12 : Int).fmod (7 : Int) = 5`\n* `(12 : Int).fmod (-7 : Int) = -2`\n* `(-12 : Int).fmod (7 : Int) = 2`\n* `(-12 : Int).fmod (-7 : Int) = -5`\n\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.fmod\"><span class=\"name\">Int</span>.<span class=\"name\">fmod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L194-L218","name":"Int.fdiv","line":194,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.fdiv","doc":"Integer division using the F-rounding convention.\n\nIn the F-rounding convention (flooring division), `Int.fdiv x y` satisfies `Int.fdiv x y = ⌊x / y⌋`\nand `Int.fmod` is the unique function satisfying `Int.fmod x y + (Int.fdiv x y) * y = x`.\n\nExamples:\n* `(7 : Int).fdiv (0 : Int) = 0`\n* `(0 : Int).fdiv (7 : Int) = 0`\n* `(12 : Int).fdiv (6 : Int) = 2`\n* `(12 : Int).fdiv (-6 : Int) = -2`\n* `(-12 : Int).fdiv (6 : Int) = -2`\n* `(-12 : Int).fdiv (-6 : Int) = 2`\n* `(12 : Int).fdiv (7 : Int) = 1`\n* `(12 : Int).fdiv (-7 : Int) = -2`\n* `(-12 : Int).fdiv (7 : Int) = -2`\n* `(-12 : Int).fdiv (-7 : Int) = 1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.fdiv\"><span class=\"name\">Int</span>.<span class=\"name\">fdiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L188-L188","name":"Int.ofNat_tdiv","line":188,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_tdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_tdiv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_tdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L155-L186","name":"Int.tmod","line":155,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.tmod","doc":"Integer modulo using the T-rounding convention.\n\nIn [the T-rounding convention][t-rounding] (division with truncation), all rounding is towards zero.\nDivision by 0 is defined to be 0 and `Int.tmod a 0 = a`.\n\nIn this convention, `Int.tmod a b + b * (Int.tdiv a b) = a`. Additionally,\n`Int.natAbs (Int.tmod a b) = Int.natAbs a % Int.natAbs b`, and when `b` does not divide `a`,\n`Int.tmod a b` has the same sign as `a`.\n\n[t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862\n\nThis function is overridden by the compiler with an efficient implementation. This definition is the\nlogical model.\n\nExamples:\n* `(7 : Int).tmod (0 : Int) = 7`\n* `(0 : Int).tmod (7 : Int) = 0`\n* `(12 : Int).tmod (6 : Int) = 0`\n* `(12 : Int).tmod (-6 : Int) = 0`\n* `(-12 : Int).tmod (6 : Int) = 0`\n* `(-12 : Int).tmod (-6 : Int) = 0`\n* `(12 : Int).tmod (7 : Int) = 5`\n* `(12 : Int).tmod (-7 : Int) = 5`\n* `(-12 : Int).tmod (7 : Int) = -5`\n* `(-12 : Int).tmod (-7 : Int) = -5`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\"><span class=\"name\">Int</span>.<span class=\"name\">tmod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L125-L153","name":"Int.tdiv","line":125,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.tdiv","doc":"Integer division using the T-rounding convention.\n\nIn [the T-rounding convention][t-rounding] (division with truncation), all rounding is towards zero.\nDivision by 0 is defined to be 0. In this convention, `Int.tmod a b + b * (Int.tdiv a b) = a`.\n\n[t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862\n\nThis function is overridden by the compiler with an efficient implementation. This definition is the\nlogical model.\n\nExamples:\n* `(7 : Int).tdiv (0 : Int) = 0`\n* `(0 : Int).tdiv (7 : Int) = 0`\n* `(12 : Int).tdiv (6 : Int) = 2`\n* `(12 : Int).tdiv (-6 : Int) = -2`\n* `(-12 : Int).tdiv (6 : Int) = -2`\n* `(-12 : Int).tdiv (-6 : Int) = 2`\n* `(12 : Int).tdiv (7 : Int) = 1`\n* `(12 : Int).tdiv (-7 : Int) = -1`\n* `(-12 : Int).tdiv (7 : Int) = -1`\n* `(-12 : Int).tdiv (-7 : Int) = 1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\"><span class=\"name\">Int</span>.<span class=\"name\">tdiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L121-L121","name":"Int.negSucc_emod_negSucc","line":121,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_emod_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_emod_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc_emod_negSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.subNatNat\">subNatNat</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L120-L120","name":"Int.negSucc_emod_ofNat","line":120,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_emod_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_emod_ofNat\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc_emod_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.subNatNat\">subNatNat</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L119-L119","name":"Int.ofNat_ediv_negSucc","line":119,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_ediv_negSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L118-L118","name":"Int.negSucc_ediv_negSucc","line":118,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_ediv_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_ediv_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc_ediv_negSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L116-L117","name":"Int.negSucc_ediv_ofNat_succ","line":116,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_ediv_ofNat_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_ediv_ofNat_succ\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc_ediv_ofNat_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L115-L115","name":"Int.ofNat_ediv_ofNat","line":115,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv_ofNat\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_ediv_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L113-L113","name":"Int.ofNat_ediv","line":113,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_ediv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L106-L111","name":"Int.instMod","line":106,"kind":"instance","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.instMod","doc":"The `Div Int` and `Mod Int` instances use `Int.ediv` and `Int.emod` for compatibility with SMT-LIB and\nbecause mathematical reasoning tends to be easier.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.instMod\"><span class=\"name\">Int</span>.<span class=\"name\">instMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L100-L105","name":"Int.instDiv","line":100,"kind":"instance","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.instDiv","doc":"The `Div Int` and `Mod Int` instances use `Int.ediv` and `Int.emod` for compatibility with SMT-LIB and\nbecause mathematical reasoning tends to be easier.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.instDiv\"><span class=\"name\">Int</span>.<span class=\"name\">instDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L73-L98","name":"Int.emod","line":73,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.emod","doc":"Integer modulus that uses the E-rounding convention. Usually accessed via the `%` operator.\n\nIn the E-rounding convention (Euclidean division), `Int.emod x y` satisfies `0 ≤ Int.emod x y < Int.natAbs y`\nfor `y ≠ 0` and `Int.ediv` is the unique function satisfying `Int.emod x y + (Int.edivx y) * y = x`\nfor `y ≠ 0`.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is\nthe logical model.\n\nExamples:\n* `(7 : Int) % (0 : Int) = 7`\n* `(0 : Int) % (7 : Int) = 0`\n* `(12 : Int) % (6 : Int) = 0`\n* `(12 : Int) % (-6 : Int) = 0`\n* `(-12 : Int) % (6 : Int) = 0`\n* `(-12 : Int) % (-6 : Int) = 0`\n* `(12 : Int) % (7 : Int) = 5`\n* `(12 : Int) % (-7 : Int) = 5`\n* `(-12 : Int) % (7 : Int) = 2`\n* `(-12 : Int) % (-7 : Int) = 2`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.emod\"><span class=\"name\">Int</span>.<span class=\"name\">emod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/DivMod/Basic.lean#L40-L71","name":"Int.ediv","line":40,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ediv","doc":"Integer division that uses the E-rounding convention. Usually accessed via the `/` operator.\nDivision by zero is defined to be zero, rather than an error.\n\nIn the E-rounding convention (Euclidean division), `Int.emod x y` satisfies `0 ≤ Int.emod x y < Int.natAbs y`\nfor `y ≠ 0` and `Int.ediv` is the unique function satisfying `Int.emod x y + (Int.edivx y) * y = x`\nfor `y ≠ 0`.\n\nThis means that `Int.ediv x y` is `⌊x / y⌋` when `y > 0` and `⌈x / y⌉` when `y < 0`.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is\nthe logical model.\n\nExamples:\n* `(7 : Int) / (0 : Int) = 0`\n* `(0 : Int) / (7 : Int) = 0`\n* `(12 : Int) / (6 : Int) = 2`\n* `(12 : Int) / (-6 : Int) = -2`\n* `(-12 : Int) / (6 : Int) = -2`\n* `(-12 : Int) / (-6 : Int) = 2`\n* `(12 : Int) / (7 : Int) = 1`\n* `(12 : Int) / (-7 : Int) = -1`\n* `(-12 : Int) / (7 : Int) = -2`\n* `(-12 : Int) / (-7 : Int) = 2`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ediv\"><span class=\"name\">Int</span>.<span class=\"name\">ediv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"}]}