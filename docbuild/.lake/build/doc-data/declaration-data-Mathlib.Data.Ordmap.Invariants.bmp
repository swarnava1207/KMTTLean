{"name":"Mathlib.Data.Ordmap.Invariants","instances":[{"typeNames":["Ordnode.BalancedSz"],"name":"Ordnode.BalancedSz.dec","className":"Decidable"},{"typeNames":["Ordnode.Balanced"],"name":"Ordnode.Balanced.dec","className":"Decidable"}],"imports":["Init","Mathlib.Data.Nat.Dist","Mathlib.Data.Ordmap.Ordnode","Mathlib.Tactic.Abel"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L832-L836","name":"Ordnode.Bounded.to_sep","line":832,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_sep\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">to_sep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">z</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">z</span>)</span> <span class=\"fn\">t₂</span></span>)</span> <span class=\"fn\">t₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L827-L830","name":"Ordnode.Bounded.of_gt","line":827,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.of_gt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L822-L825","name":"Ordnode.Bounded.of_lt","line":822,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.of_lt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L818-L820","name":"Ordnode.Bounded.mem_gt","line":818,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mem_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mem_gt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mem_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L813-L816","name":"Ordnode.Bounded.mem_lt","line":813,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mem_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mem_lt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mem_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L808-L811","name":"Ordnode.Bounded.trans_right","line":808,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.trans_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.trans_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">trans_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L803-L806","name":"Ordnode.Bounded.trans_left","line":803,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.trans_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.trans_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">trans_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L798-L801","name":"Ordnode.Bounded.to_nil","line":798,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_nil\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">to_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L794-L796","name":"Ordnode.Bounded.to_lt","line":794,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_lt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">to_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">↑<span class=\"fn\">x</span></span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L788-L792","name":"Ordnode.Bounded.mono_right","line":788,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mono_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mono_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mono_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xy</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o</span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L782-L786","name":"Ordnode.Bounded.mono_left","line":782,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mono_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mono_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mono_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xy</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">y</span>)</span> <span class=\"fn\">o</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L779-L780","name":"Ordnode.Bounded.weak","line":779,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">weak</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L775-L777","name":"Ordnode.Bounded.weak_right","line":775,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">weak_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L771-L773","name":"Ordnode.Bounded.weak_left","line":771,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">weak_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <span class=\"fn\">o₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L766-L769","name":"Ordnode.Bounded.dual_iff","line":766,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.dual_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.dual_iff\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">dual_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₂</span> <span class=\"fn\">o₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L761-L764","name":"Ordnode.Bounded.dual","line":761,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₂</span> <span class=\"fn\">o₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L753-L759","name":"Ordnode.Bounded","line":753,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded","doc":"`Bounded t lo hi` says that every element `x ∈ t` is in the range `lo < x < hi`, and also this\nproperty holds recursively in subtrees, making the full tree a BST. The bounds can be set to\n`lo = ⊥` and `hi = ⊤` if we care only about the internal ordering constraints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L742-L747","name":"Ordnode.all_balanceR","line":742,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balanceR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balanceR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_balanceR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">r'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L736-L740","name":"Ordnode.size_balanceR","line":736,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balanceR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balanceR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_balanceR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">r'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L727-L734","name":"Ordnode.balanceR_eq_balance'","line":727,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceR_eq_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceR_eq_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceR_eq_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">r'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L720-L725","name":"Ordnode.all_balanceL","line":720,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balanceL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balanceL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_balanceL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L714-L718","name":"Ordnode.size_balanceL","line":714,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balanceL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balanceL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_balanceL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L704-L712","name":"Ordnode.balance_sz_dual","line":704,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance_sz_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance_sz_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balance_sz_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">r'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a>   <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L686-L702","name":"Ordnode.balanceL_eq_balance'","line":686,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL_eq_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL_eq_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceL_eq_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L679-L684","name":"Ordnode.Raised.right","line":679,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">r₁</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r₂</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x₁</span> <span class=\"fn\">r₁</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x₂</span> <span class=\"fn\">r₂</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L676-L677","name":"Ordnode.Raised.add_right","line":676,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.add_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">add_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L671-L674","name":"Ordnode.Raised.add_left","line":671,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.add_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">add_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>) (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L668-L669","name":"Ordnode.Raised.dist_le'","line":668,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.dist_le'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.dist_le'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">dist_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Nat/Dist.html#Nat.dist\">dist</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L665-L666","name":"Ordnode.Raised.dist_le","line":665,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.dist_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.dist_le\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">dist_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Dist.html#Nat.dist\">dist</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L655-L663","name":"Ordnode.raised_iff","line":655,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.raised_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.raised_iff\"><span class=\"name\">Ordnode</span>.<span class=\"name\">raised_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L651-L653","name":"Ordnode.Raised","line":651,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised","doc":"`Raised n m` means `m` is either equal or one up from `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L636-L649","name":"Ordnode.balanceL_eq_balance","line":636,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL_eq_balance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL_eq_balance\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceL_eq_balance</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H1</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H2</span> : <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> → <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> → <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balance\">balance</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L550-L634","name":"Ordnode.balance_eq_balance'","line":550,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance_eq_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance_eq_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balance_eq_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balance\">balance</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L538-L545","name":"Ordnode.dual_insert","line":538,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_insert\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTotal\">IsTotal</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.insert\">Ordnode.insert</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.insert\">Ordnode.insert</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L527-L533","name":"Ordnode.merge_node","line":527,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_node\"><span class=\"name\">Ordnode</span>.<span class=\"name\">merge_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ls</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ll</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lx</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lr</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rs</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rl</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rx</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rr</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">ls</span> <span class=\"fn\">ll</span> <span class=\"fn\">lx</span> <span class=\"fn\">lr</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">rs</span> <span class=\"fn\">rl</span> <span class=\"fn\">rx</span> <span class=\"fn\">rr</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ls</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">rs</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">ls</span> <span class=\"fn\">ll</span> <span class=\"fn\">lx</span> <span class=\"fn\">lr</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <span class=\"fn\">rl</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">rx</span> <span class=\"fn\">rr</span></span>\n  <a href=\"./Init/Prelude.html#ite\">else</a>     <a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">rs</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ls</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ll</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">lx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lr</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">rs</span> <span class=\"fn\">rl</span> <span class=\"fn\">rx</span> <span class=\"fn\">rr</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">ls</span> <span class=\"fn\">ll</span> <span class=\"fn\">lx</span> <span class=\"fn\">lr</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.glue\">glue</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">rs</span> <span class=\"fn\">rl</span> <span class=\"fn\">rx</span> <span class=\"fn\">rr</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L523-L525","name":"Ordnode.merge_nil_right","line":523,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_nil_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">merge_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L520-L521","name":"Ordnode.merge_nil_left","line":520,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_nil_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">merge_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L509-L512","name":"Ordnode.findMax'_all","line":509,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax'_all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax'_all\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMax'_all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax'\">findMax'</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L504-L507","name":"Ordnode.findMin'_all","line":504,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin'_all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin'_all\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMin'_all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin'\">findMin'</a></span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L499-L502","name":"Ordnode.splitMax_eq","line":499,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.splitMax_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.splitMax_eq\"><span class=\"name\">Ordnode</span>.<span class=\"name\">splitMax_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.splitMax'\">splitMax'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMax\">eraseMax</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax'\">findMax'</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L494-L497","name":"Ordnode.splitMin_eq","line":494,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.splitMin_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.splitMin_eq\"><span class=\"name\">Ordnode</span>.<span class=\"name\">splitMin_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.splitMin'\">splitMin'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin'\">findMin'</a></span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMin\">eraseMin</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L491-L492","name":"Ordnode.dual_eraseMax","line":491,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_eraseMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_eraseMax\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_eraseMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMax\">eraseMax</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMin\">eraseMin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L485-L489","name":"Ordnode.dual_eraseMin","line":485,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_eraseMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_eraseMin\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_eraseMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMin\">eraseMin</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMax\">eraseMax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L482-L483","name":"Ordnode.findMax_dual","line":482,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMax_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax\">findMax</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin\">findMin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L478-L480","name":"Ordnode.findMin_dual","line":478,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMin_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin\">findMin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax\">findMax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L475-L476","name":"Ordnode.findMax'_dual","line":475,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax'_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax'_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMax'_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax'\">findMax'</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin'\">findMin'</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L471-L473","name":"Ordnode.findMin'_dual","line":471,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin'_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin'_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMin'_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin'\">findMin'</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax'\">findMax'</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L465-L466","name":"Ordnode.pos_size_of_mem","line":465,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.pos_size_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.pos_size_of_mem\"><span class=\"name\">Ordnode</span>.<span class=\"name\">pos_size_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_mem</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L458-L460","name":"Ordnode.equiv_iff","line":458,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.equiv_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.equiv_iff\"><span class=\"name\">Ordnode</span>.<span class=\"name\">equiv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L455-L456","name":"Ordnode.length_toList","line":455,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.length_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.length_toList\"><span class=\"name\">Ordnode</span>.<span class=\"name\">length_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L449-L453","name":"Ordnode.length_toList'","line":449,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.length_toList'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.length_toList'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">length_toList'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.realSize\">realSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L446-L447","name":"Ordnode.emem_iff_mem_toList","line":446,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.emem_iff_mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.emem_iff_mem_toList\"><span class=\"name\">Ordnode</span>.<span class=\"name\">emem_iff_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Emem\">Emem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L442-L444","name":"Ordnode.toList_node","line":442,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.toList_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.toList_node\"><span class=\"name\">Ordnode</span>.<span class=\"name\">toList_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L438-L440","name":"Ordnode.toList_nil","line":438,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.toList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.toList_nil\"><span class=\"name\">Ordnode</span>.<span class=\"name\">toList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L432-L436","name":"Ordnode.foldr_cons_eq_toList","line":432,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.foldr_cons_eq_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.foldr_cons_eq_toList\"><span class=\"name\">Ordnode</span>.<span class=\"name\">foldr_cons_eq_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.foldr\">foldr</a> <a href=\"./Init/Prelude.html#List.cons\">List.cons</a> <span class=\"fn\">t</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L426-L427","name":"Ordnode.all_balance'","line":426,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L423-L424","name":"Ordnode.all_rotateR","line":423,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_rotateR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_rotateR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L419-L421","name":"Ordnode.all_rotateL","line":419,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_rotateL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_rotateL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L415-L417","name":"Ordnode.all_node4R","line":415,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node4R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node4R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node4R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\">node4R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L411-L413","name":"Ordnode.all_node4L","line":411,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node4L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node4L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node4L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L407-L409","name":"Ordnode.all_node3R","line":407,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node3R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node3R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node3R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L403-L405","name":"Ordnode.all_node3L","line":403,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node3L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node3L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node3L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L400-L401","name":"Ordnode.all_node'","line":400,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L397-L398","name":"Ordnode.emem_iff_all","line":397,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.emem_iff_all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.emem_iff_all\"><span class=\"name\">Ordnode</span>.<span class=\"name\">emem_iff_all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Emem\">Emem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L393-L395","name":"Ordnode.any_iff_exists","line":393,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.any_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.any_iff_exists\"><span class=\"name\">Ordnode</span>.<span class=\"name\">any_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Any\">Any</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Emem\">Emem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L389-L391","name":"Ordnode.all_iff_forall","line":389,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_iff_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_iff_forall\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_iff_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Emem\">Emem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L383-L387","name":"Ordnode.all_dual","line":383,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L380-L381","name":"Ordnode.any_singleton","line":380,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.any_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.any_singleton\"><span class=\"name\">Ordnode</span>.<span class=\"name\">any_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Any\">Any</a> <span class=\"fn\">P</span> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L377-L378","name":"Ordnode.all_singleton","line":377,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_singleton\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L373-L375","name":"Ordnode.Any.imp","line":373,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Any.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Any.imp\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Any</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Any\">Any</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Any\">Any</a> <span class=\"fn\">Q</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L369-L371","name":"Ordnode.All.imp","line":369,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.All.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.All.imp\"><span class=\"name\">Ordnode</span>.<span class=\"name\">All</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">Q</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L358-L364","name":"Ordnode.size_balance'","line":358,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L351-L356","name":"Ordnode.Sized.balance'","line":351,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L347-L349","name":"Ordnode.Sized.rotateR_size","line":347,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateR_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateR_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">rotateR_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L341-L345","name":"Ordnode.Sized.rotateL_size","line":341,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateL_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateL_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">rotateL_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L338-L339","name":"Ordnode.Sized.rotateR","line":338,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L332-L336","name":"Ordnode.Sized.rotateL","line":332,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L329-L330","name":"Ordnode.Sized.dual_iff","line":329,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.dual_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.dual_iff\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">dual_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L325-L327","name":"Ordnode.Sized.dual","line":325,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L321-L323","name":"Ordnode.node4L_size","line":321,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node4L_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L318-L319","name":"Ordnode.node3R_size","line":318,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node3R_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L315-L316","name":"Ordnode.node3L_size","line":315,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node3L_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L311-L313","name":"Ordnode.Sized.node4L","line":311,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node4L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node4L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">node4L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L307-L309","name":"Ordnode.Sized.node3R","line":307,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node3R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node3R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">node3R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L303-L305","name":"Ordnode.Sized.node3L","line":303,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node3L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node3L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">node3L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L299-L301","name":"Ordnode.dual_balanceR","line":299,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balanceR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balanceR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_balanceR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L284-L297","name":"Ordnode.dual_balanceL","line":284,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balanceL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balanceL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_balanceL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L278-L282","name":"Ordnode.dual_balance'","line":278,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L274-L276","name":"Ordnode.dual_rotateR","line":274,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_rotateR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_rotateR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L269-L272","name":"Ordnode.dual_rotateL","line":269,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_rotateL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_rotateL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L265-L267","name":"Ordnode.dual_node4R","line":265,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node4R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node4R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node4R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\">node4R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L261-L263","name":"Ordnode.dual_node4L","line":261,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node4L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node4L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node4L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\">node4R</a></span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L257-L259","name":"Ordnode.dual_node3R","line":257,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node3R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node3R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node3R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L253-L255","name":"Ordnode.dual_node3L","line":253,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node3L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node3L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node3L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L250-L251","name":"Ordnode.dual_node'","line":250,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L242-L248","name":"Ordnode.balance'","line":242,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'","doc":"The full balance operation. This is the same as `balance`, but with less manual inlining.\nIt is somewhat easier to work with this version in proofs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L236-L240","name":"Ordnode.balanceR'","line":236,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceR'","doc":"A right balance operation. This will rebalance a concatenation, assuming the original nodes are\nnot too far from balanced. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceR'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceR'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L230-L234","name":"Ordnode.balanceL'","line":230,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL'","doc":"A left balance operation. This will rebalance a concatenation, assuming the original nodes are\nnot too far from balanced. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceL'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L226-L227","name":"Ordnode.rotateR_nil","line":226,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR_nil\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateR_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L221-L224","name":"Ordnode.rotateR_node","line":221,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR_node\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateR_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">sz</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.ratio\">ratio</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\">node4R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L215-L219","name":"Ordnode.rotateR","line":215,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR","doc":"Concatenate two nodes, performing a right rotation `(x y) z -> (x (y z))`\nif balance is upset. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L211-L212","name":"Ordnode.rotateL_nil","line":211,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL_nil\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateL_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L206-L209","name":"Ordnode.rotateL_node","line":206,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL_node\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateL_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">sz</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.ratio\">ratio</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L200-L204","name":"Ordnode.rotateL","line":200,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL","doc":"Concatenate two nodes, performing a left rotation `x (y z) -> ((x y) z)`\nif balance is upset. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L194-L197","name":"Ordnode.node4R","line":194,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R","doc":"Build a tree from three nodes, with `a () b -> a (() b)` and `a (b c) d -> ((a b) (c d))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node4R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L188-L191","name":"Ordnode.node4L","line":188,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L","doc":"Build a tree from three nodes, with `a () b -> (a ()) b` and `a (b c) d -> ((a b) (c d))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node4L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L184-L186","name":"Ordnode.node3R","line":184,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R","doc":"Build a tree from three nodes, right associated (ignores the invariants). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node3R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L180-L182","name":"Ordnode.node3L","line":180,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L","doc":"Build a tree from three nodes, left associated (ignores the invariants). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node3L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L173-L175","name":"Ordnode.Balanced.dual","line":173,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced.dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced.dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L168-L171","name":"Ordnode.balancedSz_down","line":168,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_down","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_down\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balancedSz_down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">r₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L156-L166","name":"Ordnode.balancedSz_up","line":156,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_up\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balancedSz_up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L153-L154","name":"Ordnode.balancedSz_zero","line":153,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_zero\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balancedSz_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L149-L151","name":"Ordnode.BalancedSz.symm","line":149,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz.symm\"><span class=\"name\">Ordnode</span>.<span class=\"name\">BalancedSz</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">r</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L139-L147","name":"Ordnode.Balanced.dec","line":139,"kind":"instance","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced.dec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced.dec\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">dec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L133-L137","name":"Ordnode.Balanced","line":133,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced","doc":"The `Balanced t` asserts that the tree `t` satisfies the balance invariants\n(at every level). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Balanced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L131-L131","name":"Ordnode.BalancedSz.dec","line":131,"kind":"instance","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz.dec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz.dec\"><span class=\"name\">Ordnode</span>.<span class=\"name\">BalancedSz</span>.<span class=\"name\">dec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L125-L129","name":"Ordnode.BalancedSz","line":125,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz","doc":"The `BalancedSz l r` asserts that a hypothetical tree with children of sizes `l` and `r` is\nbalanced: either `l ≤ δ * r` and `r ≤ δ * r`, or the tree is trivial with a singleton on one side\nand nothing on the other. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\"><span class=\"name\">Ordnode</span>.<span class=\"name\">BalancedSz</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L119-L120","name":"Ordnode.size_dual","line":119,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L115-L117","name":"Ordnode.dual_dual","line":115,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L109-L110","name":"Ordnode.Sized.pos","line":109,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.pos\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L105-L107","name":"Ordnode.Sized.size_eq_zero","line":105,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.size_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.size_eq_zero\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">size_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L100-L103","name":"Ordnode.size_eq_realSize","line":100,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_eq_realSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_eq_realSize\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_eq_realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span> → <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.realSize\">realSize</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L91-L98","name":"Ordnode.Sized.induction","line":91,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.induction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.induction\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H0</span> : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H1</span> : <span class=\"fn\">∀ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L87-L89","name":"Ordnode.Sized.size_eq","line":87,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.size_eq\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L84-L85","name":"Ordnode.Sized.eq_node'","line":84,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.eq_node'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.eq_node'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">eq_node'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L81-L82","name":"Ordnode.Sized.node'","line":81,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">node'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L75-L79","name":"Ordnode.Sized","line":75,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized","doc":"The `Sized` property asserts that all the `size` fields in nodes match the actual size of the\nrespective subtrees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L67-L70","name":"Ordnode.realSize","line":67,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.realSize","doc":"O(n). Computes the actual number of elements in the set, ignoring the cached `size` field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.realSize\"><span class=\"name\">Ordnode</span>.<span class=\"name\">realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L57-L59","name":"Ordnode.delta_lt_false","line":57,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.delta_lt_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.delta_lt_false\"><span class=\"name\">Ordnode</span>.<span class=\"name\">delta_lt_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ordmap/Invariants.lean#L54-L55","name":"Ordnode.not_le_delta","line":54,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.not_le_delta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.not_le_delta\"><span class=\"name\">Ordnode</span>.<span class=\"name\">not_le_delta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span></div></div>"}]}