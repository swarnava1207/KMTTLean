{"name":"Mathlib.LinearAlgebra.Projectivization.Constructions","instances":[],"imports":["Init","Mathlib.LinearAlgebra.CrossProduct","Mathlib.LinearAlgebra.Matrix.DotProduct","Mathlib.LinearAlgebra.Projectivization.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L127-L130","name":"Projectivization.orthogonal_cross_right","line":127,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal_cross_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal_cross_right\"><span class=\"name\">Projectivization</span>.<span class=\"name\">orthogonal_cross_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">w</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L122-L125","name":"Projectivization.orthogonal_cross_left","line":122,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal_cross_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal_cross_left\"><span class=\"name\">Projectivization</span>.<span class=\"name\">orthogonal_cross_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">w</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L117-L120","name":"Projectivization.cross_orthogonal_right","line":117,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_orthogonal_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_orthogonal_right\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross_orthogonal_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L111-L115","name":"Projectivization.cross_orthogonal_left","line":111,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_orthogonal_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_orthogonal_left\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross_orthogonal_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L103-L109","name":"Projectivization.cross_comm","line":103,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_comm\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L98-L101","name":"Projectivization.cross_mk_of_ne","line":98,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_mk_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_mk_of_ne\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross_mk_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span>)</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L93-L96","name":"Projectivization.cross_self","line":93,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_self\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L88-L91","name":"Projectivization.cross_mk_of_cross_ne_zero","line":88,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_mk_of_cross_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_mk_of_cross_ne_zero\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross_mk_of_cross_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span>)</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span>)</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L83-L86","name":"Projectivization.cross_mk_of_cross_eq_zero","line":83,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_mk_of_cross_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_mk_of_cross_eq_zero\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross_mk_of_cross_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span>)</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L77-L81","name":"Projectivization.cross_mk","line":77,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross_mk\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span>)</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\">cross</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> then <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span></span> else <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L67-L75","name":"Projectivization.cross","line":67,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross","doc":"Cross product on the projective plane. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.cross\"><span class=\"name\">Projectivization</span>.<span class=\"name\">cross</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L60-L63","name":"Projectivization.mk_eq_mk_iff_crossProduct_eq_zero","line":60,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.mk_eq_mk_iff_crossProduct_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.mk_eq_mk_iff_crossProduct_eq_zero\"><span class=\"name\">Projectivization</span>.<span class=\"name\">mk_eq_mk_iff_crossProduct_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L52-L54","name":"Projectivization.exists_not_orthogonal_self","line":52,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.exists_not_orthogonal_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.exists_not_orthogonal_self\"><span class=\"name\">Projectivization</span>.<span class=\"name\">exists_not_orthogonal_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">m</span> → <span class=\"fn\">F</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">m</span> → <span class=\"fn\">F</span>)</span></span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L46-L50","name":"Projectivization.exists_not_self_orthogonal","line":46,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.exists_not_self_orthogonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.exists_not_self_orthogonal\"><span class=\"name\">Projectivization</span>.<span class=\"name\">exists_not_self_orthogonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">m</span> → <span class=\"fn\">F</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">m</span> → <span class=\"fn\">F</span>)</span></span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L42-L44","name":"Projectivization.orthogonal_comm","line":42,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal_comm\"><span class=\"name\">Projectivization</span>.<span class=\"name\">orthogonal_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">m</span> → <span class=\"fn\">F</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L38-L40","name":"Projectivization.orthogonal_mk","line":38,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal_mk\"><span class=\"name\">Projectivization</span>.<span class=\"name\">orthogonal_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\">m</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">v</span> <span class=\"fn\">hv</span>)</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization.mk\">mk</a> <span class=\"fn\">F</span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Matrix/Mul.html#dotProduct\">⬝ᵥ</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Projectivization/Constructions.lean#L32-L36","name":"Projectivization.orthogonal","line":32,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal","doc":"Orthogonality on the projective plane. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\"><span class=\"name\">Projectivization</span>.<span class=\"name\">orthogonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">m</span> → <span class=\"fn\">F</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\">m</span> → <span class=\"fn\">F</span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}