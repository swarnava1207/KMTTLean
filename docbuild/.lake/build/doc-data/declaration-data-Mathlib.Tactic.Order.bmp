{"name":"Mathlib.Tactic.Order","instances":[{"typeNames":["Mathlib.Tactic.Order.OrderType"],"name":"Mathlib.Tactic.Order.instBEqOrderType","className":"BEq"}],"imports":["Init","Mathlib.Tactic.Order.CollectFacts","Mathlib.Tactic.Order.Preprocessing","Mathlib.Tactic.Order.Graph.Basic","Mathlib.Tactic.Order.Graph.Tarjan"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L195-L219","name":"Mathlib.Tactic.Order.tacticOrder","line":195,"kind":"def","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.tacticOrder","doc":"A finishing tactic for solving goals in arbitrary `Preorder`, `PartialOrder`,\nor `LinearOrder`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.tacticOrder\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">tacticOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L184-L193","name":"Mathlib.Tactic.Order.findBestOrderInstance","line":184,"kind":"def","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.findBestOrderInstance","doc":"Find the \"best\" instance of an order on a given type. A linear order is preferred over a partial\norder, and a partial order is preferred over a preorder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.findBestOrderInstance\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">findBestOrderInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType\">OrderType</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L182-L182","name":"Mathlib.Tactic.Order.instBEqOrderType","line":182,"kind":"instance","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.instBEqOrderType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.instBEqOrderType\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">instBEqOrderType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType\">OrderType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L181-L181","name":"Mathlib.Tactic.Order.OrderType.pre","line":181,"kind":"ctor","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType.pre","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType.pre\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">OrderType</span>.<span class=\"name\">pre</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType\">OrderType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L181-L181","name":"Mathlib.Tactic.Order.OrderType.part","line":181,"kind":"ctor","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType.part","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType.part\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">OrderType</span>.<span class=\"name\">part</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType\">OrderType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L181-L181","name":"Mathlib.Tactic.Order.OrderType.lin","line":181,"kind":"ctor","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType.lin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType.lin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">OrderType</span>.<span class=\"name\">lin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType\">OrderType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L179-L182","name":"Mathlib.Tactic.Order.OrderType","line":179,"kind":"inductive","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType","doc":"Supported order types: linear, partial, and preorder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.OrderType\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">OrderType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L158-L177","name":"Mathlib.Tactic.Order.updateGraphWithNlt","line":158,"kind":"def","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.updateGraphWithNlt","doc":"Each fact `¬ (x < y)` allows to add the edge `(x, y)` when `y` is reachable from `x` in the\ngraph. We repeat adding edges using this until no more edges can be added. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.updateGraphWithNlt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">updateGraphWithNlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxToAtom</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Order/CollectFacts.html#Mathlib.Tactic.Order.AtomicFact\">AtomicFact</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L149-L156","name":"Mathlib.Tactic.Order.findContradictionWithNle","line":149,"kind":"def","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.findContradictionWithNle","doc":"Using the `≤`-graph `g`, find a contradiction with some `≰`-fact. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.findContradictionWithNle\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">findContradictionWithNle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxToAtom</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Order/CollectFacts.html#Mathlib.Tactic.Order.AtomicFact\">AtomicFact</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order.lean#L132-L147","name":"Mathlib.Tactic.Order.findContradictionWithNe","line":132,"kind":"def","docLink":"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.findContradictionWithNe","doc":"Finds a contradictory `≠`-fact whose `.lhs` and `.rhs` belong to the same strongly connected\ncomponent in the `≤`-graph, implying they must be equal, and then uses it to derive `False`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order.html#Mathlib.Tactic.Order.findContradictionWithNe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">findContradictionWithNe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">graph</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxToAtom</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Order/CollectFacts.html#Mathlib.Tactic.Order.AtomicFact\">AtomicFact</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"}]}