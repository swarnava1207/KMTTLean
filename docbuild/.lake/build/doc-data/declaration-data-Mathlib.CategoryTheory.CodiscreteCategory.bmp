{"name":"Mathlib.CategoryTheory.CodiscreteCategory","instances":[{"typeNames":["Eq"],"name":"CategoryTheory.instDecidableEqCodiscrete","className":"Decidable"},{"typeNames":["CategoryTheory.Codiscrete"],"name":"CategoryTheory.Codiscrete.instCategory","className":"CategoryTheory.Category"}],"imports":["Init","Mathlib.CategoryTheory.EqToHom","Mathlib.CategoryTheory.Pi.Basic","Mathlib.Data.ULift","Mathlib.CategoryTheory.Category.Cat","Mathlib.CategoryTheory.Adjunction.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L147-L151","name":"CategoryTheory.Codiscrete.right_triangle_components","line":147,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.right_triangle_components","doc":"Right triangle equality of the adjunction `Cat.objects ⊣ Codiscrete.functorToCat`,\nstated using a composition of functors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.right_triangle_components\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">right_triangle_components</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.unitApp\">unitApp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">X</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functorOfFun\">functorOfFun</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.counitApp\">counitApp</a> <span class=\"fn\">X</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L141-L145","name":"CategoryTheory.Codiscrete.left_triangle_components","line":141,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.left_triangle_components","doc":"Left triangle equality of the adjunction `Cat.objects ⊣ Codiscrete.functorToCat`,\nas a universe polymorphic statement. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.left_triangle_components\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">left_triangle_components</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.counitApp\">counitApp</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.unitApp\">unitApp</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L138-L139","name":"CategoryTheory.Codiscrete.adj_counit_app","line":138,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.adj_counit_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.adj_counit_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">adj_counit_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.adj\">adj</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.counitApp\">counitApp</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L135-L136","name":"CategoryTheory.Codiscrete.adj_unit_app","line":135,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.adj_unit_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.adj_unit_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">adj_unit_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.adj\">adj</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.unit\">unit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.unitApp\">unitApp</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L132-L133","name":"CategoryTheory.Codiscrete.counitApp","line":132,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.counitApp","doc":"Components of the counit of the adjunction `Cat.objects ⊣ Codiscrete.functorToCat` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.counitApp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">counitApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span></span> → <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L129-L130","name":"CategoryTheory.Codiscrete.unitApp","line":129,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.unitApp","doc":"Components of the unit of the adjunction `Cat.objects ⊣ Codiscrete.functorToCat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.unitApp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">unitApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L122-L127","name":"CategoryTheory.Codiscrete.adj","line":122,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.adj","doc":"The functor that turns a type into a codiscrete category is right adjoint to the objects\nfunctor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.adj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">adj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.objects\">Cat.objects</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functorToCat\">functorToCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L113-L120","name":"CategoryTheory.Codiscrete.equivFunctorToCodiscrete","line":113,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.equivFunctorToCodiscrete","doc":"For a category `C` and type `A`, there is an equivalence between functions `objects.obj C ⟶ A`\nand functors `C ⥤ Codiscrete A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.equivFunctorToCodiscrete\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">equivFunctorToCodiscrete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">C</span> → <span class=\"fn\">A</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L106-L109","name":"CategoryTheory.Codiscrete.functorToCat","line":106,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functorToCat","doc":"`Codiscrete.functorToCat` turns a type into a codiscrete category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functorToCat\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">functorToCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <a href=\"./foundational_types.html\">(Type</a> u) <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L99-L104","name":"CategoryTheory.Codiscrete.oppositeEquivalence","line":99,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.oppositeEquivalence","doc":"A codiscrete category is equivalent to its opposite category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.oppositeEquivalence\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">oppositeEquivalence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L93-L95","name":"CategoryTheory.Codiscrete.functorOfFun","line":93,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functorOfFun","doc":"A function induces a functor between codiscrete categories. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functorOfFun\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">functorOfFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> → <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">B</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L88-L88","name":"CategoryTheory.Codiscrete.natIsoFunctor_hom_app","line":88,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIsoFunctor_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIsoFunctor_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">natIsoFunctor_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIsoFunctor\">natIsoFunctor</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L88-L88","name":"CategoryTheory.Codiscrete.natIsoFunctor_inv_app","line":88,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIsoFunctor_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIsoFunctor_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">natIsoFunctor_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIsoFunctor\">natIsoFunctor</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L86-L89","name":"CategoryTheory.Codiscrete.natIsoFunctor","line":86,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIsoFunctor","doc":"Every functor `F` to a codiscrete category is naturally isomorphic {(actually, equal)} to\n`Codiscrete.as ∘ F.obj`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIsoFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">natIsoFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functor\">functor</a> (<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\">as</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L80-L84","name":"CategoryTheory.Codiscrete.natIso","line":80,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIso","doc":"Given two functors into a codiscrete category, the trivial natural transformation is an\nnatural isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">natIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L76-L78","name":"CategoryTheory.Codiscrete.natTrans","line":76,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natTrans","doc":"Given two functors to a codiscrete category, there is a trivial natural transformation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.natTrans\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">natTrans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L73-L74","name":"CategoryTheory.Codiscrete.invFunctor","line":73,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.invFunctor","doc":"The underlying function `C → A` of a functor `C ⥤ Codiscrete A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.invFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">invFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L68-L71","name":"CategoryTheory.Codiscrete.functor","line":68,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functor","doc":"Any function `C → A` lifts to a functor `C ⥤ Codiscrete A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">functor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L60-L63","name":"CategoryTheory.Codiscrete.instCategory","line":60,"kind":"instance","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.instCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.instCategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">instCategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{0, u_1}</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">A</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L55-L56","name":"CategoryTheory.instDecidableEqCodiscrete","line":55,"kind":"instance","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.instDecidableEqCodiscrete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.instDecidableEqCodiscrete\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instDecidableEqCodiscrete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L48-L48","name":"CategoryTheory.codiscreteEquiv_symm_apply_as","line":48,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.codiscreteEquiv_symm_apply_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.codiscreteEquiv_symm_apply_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">codiscreteEquiv_symm_apply_as</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.codiscreteEquiv\">codiscreteEquiv</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">as</span>)</span>.<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\">as</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">as</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L48-L48","name":"CategoryTheory.codiscreteEquiv_apply","line":48,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.codiscreteEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.codiscreteEquiv_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">codiscreteEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.codiscreteEquiv\">codiscreteEquiv</a> <span class=\"fn\">self</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\">as</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L47-L53","name":"CategoryTheory.codiscreteEquiv","line":47,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.codiscreteEquiv","doc":"`Codiscrete α` is equivalent to the original type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.codiscreteEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">codiscreteEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L44-L45","name":"CategoryTheory.Codiscrete.mk_as","line":44,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.mk_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.mk_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">mk_as</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\">as</a></span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L42-L42","name":"CategoryTheory.Codiscrete.as","line":42,"kind":"def","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as","doc":"A wrapper for promoting any type to a category,\nwith a unique morphisms between any two objects of the category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">as</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L39-L39","name":"CategoryTheory.Codiscrete.mk","line":39,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L38-L38","name":"CategoryTheory.Codiscrete.ext","line":38,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.ext\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\">as</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\">as</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L38-L38","name":"CategoryTheory.Codiscrete.ext_iff","line":38,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.ext_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\">Codiscrete</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\">as</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete.as\">as</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/CodiscreteCategory.lean#L35-L42","name":"CategoryTheory.Codiscrete","line":35,"kind":"structure","docLink":"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete","doc":"A wrapper for promoting any type to a category,\nwith a unique morphisms between any two objects of the category.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/CodiscreteCategory.html#CategoryTheory.Codiscrete\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Codiscrete</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}