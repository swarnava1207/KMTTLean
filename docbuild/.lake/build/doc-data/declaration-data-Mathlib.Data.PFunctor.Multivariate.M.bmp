{"name":"Mathlib.Data.PFunctor.Multivariate.M","instances":[{"typeNames":["MvPFunctor.M.Path"],"name":"MvPFunctor.M.Path.inhabited","className":"Inhabited"},{"typeNames":["MvPFunctor.M"],"name":"MvPFunctor.mvfunctorM","className":"MvFunctor"},{"typeNames":["MvPFunctor.M"],"name":"MvPFunctor.inhabitedM","className":"Inhabited"}],"imports":["Init","Mathlib.Data.PFunctor.Multivariate.Basic","Mathlib.Data.PFunctor.Univariate.M"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L299-L305","name":"MvPFunctor.M.map_dest","line":299,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.map_dest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.map_dest\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">map_dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>).<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> (<span class=\"fn\">β</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">β</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.lastFun\">TypeVec.lastFun</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.dropFun\">TypeVec.dropFun</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.dropFun\">TypeVec.dropFun</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L290-L297","name":"MvPFunctor.M.dest_map","line":290,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest_map\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<span class=\"fn\">g</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L276-L288","name":"MvPFunctor.M.bisim'","line":276,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.bisim'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.bisim'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">R</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">R</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L245-L274","name":"MvPFunctor.M.bisim₀","line":245,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.bisim₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.bisim₀\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">R</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">R</span></span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L211-L243","name":"MvPFunctor.M.bisim","line":211,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.bisim\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> →\n      <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.drop\">drop</a></span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>).<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.drop\">drop</a></span></span>) (<span class=\"fn\">f₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.last\">last</a></span> → <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>).<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.last\">last</a></span></span>) (<span class=\"fn\">f₂</span> :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.last\">last</a></span> → <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>).<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.last\">last</a></span></span>),\n        <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.splitFun\">TypeVec.splitFun</a> <span class=\"fn\">f</span> <span class=\"fn\">f₁</span></span>⟩</span> <a href=\"./Init/Prelude.html#And\">∧</a>           <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.splitFun\">TypeVec.splitFun</a> <span class=\"fn\">f</span> <span class=\"fn\">f₂</span></span>⟩</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.last\">last</a></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">f₁</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">f₂</span> <span class=\"fn\">i</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L199-L209","name":"MvPFunctor.M.bisim_lemma","line":199,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.bisim_lemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.bisim_lemma\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim_lemma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.mp\">mp</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.mp\">mp</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a₁</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a'</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.drop\">drop</a></span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a'</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.last\">last</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">⟨<span class=\"fn\">a₁</span>, <span class=\"fn\">f₁</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a'</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.splitFun\">TypeVec.splitFun</a> <span class=\"fn\">f'</span> <span class=\"fn\">f₁'</span></span>⟩</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">g₁'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a'</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) (<span class=\"fn\">e₁'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">a₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a'</span>, <span class=\"fn\">g₁'</span>⟩</span>),\n  <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.pathDestLeft\">pathDestLeft</a> <span class=\"fn\">P</span> <span class=\"fn\">e₁'</span> <span class=\"fn\">f₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">f₁'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a'</span></span>) =&gt; <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">g₁'</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.pathDestRight\">pathDestRight</a> <span class=\"fn\">P</span> <span class=\"fn\">e₁'</span> <span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span>⟩</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L190-L197","name":"MvPFunctor.M.dest_corec","line":190,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest_corec\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corec\">corec</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.id\">TypeVec.id</a> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corec\">corec</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span></span>) <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L185-L188","name":"MvPFunctor.M.dest_corec'","line":185,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest_corec'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest_corec'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest_corec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₀</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₁</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">(<span class=\"fn\">g₀</span> <span class=\"fn\">b</span>)</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₂</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">(<span class=\"fn\">g₀</span> <span class=\"fn\">b</span>)</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corec'\">corec'</a> <span class=\"fn\">P</span> <span class=\"fn\">g₀</span> <span class=\"fn\">g₁</span> <span class=\"fn\">g₂</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">g₀</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.splitFun\">TypeVec.splitFun</a> <span class=\"fn\">(<span class=\"fn\">g₁</span> <span class=\"fn\">x</span>)</span> (<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corec'\">corec'</a> <span class=\"fn\">P</span> <span class=\"fn\">g₀</span> <span class=\"fn\">g₁</span> <span class=\"fn\">g₂</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">g₂</span> <span class=\"fn\">x</span></span>)</span>⟩</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L180-L183","name":"MvPFunctor.M.dest_eq_dest'","line":180,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest_eq_dest'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest_eq_dest'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest_eq_dest'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">dest</a> <span class=\"fn\">P</span> <span class=\"fn\">⟨<span class=\"fn\">x</span>, <span class=\"fn\">f'</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest'\">dest'</a> <span class=\"fn\">P</span> <span class=\"fn\">h</span> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L175-L178","name":"MvPFunctor.M.dest'_eq_dest'","line":175,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest'_eq_dest'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest'_eq_dest'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest'_eq_dest'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a₁</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a₁</span>, <span class=\"fn\">f₁</span>⟩</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₂</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a₂</span>, <span class=\"fn\">f₂</span>⟩</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest'\">dest'</a> <span class=\"fn\">P</span> <span class=\"fn\">h₁</span> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest'\">dest'</a> <span class=\"fn\">P</span> <span class=\"fn\">h₂</span> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L171-L173","name":"MvPFunctor.M.mk","line":171,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.mk","doc":"Constructor for M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.mk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L167-L169","name":"MvPFunctor.M.dest","line":167,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest","doc":"Destructor for M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L162-L165","name":"MvPFunctor.M.dest'","line":162,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest'","doc":"Destructor for M-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L157-L160","name":"MvPFunctor.M.pathDestRight","line":157,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.pathDestRight","doc":"Implementation of destructor for M-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.pathDestRight\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">pathDestRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L152-L155","name":"MvPFunctor.M.pathDestLeft","line":152,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.pathDestLeft","doc":"Implementation of destructor for M-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.pathDestLeft\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">pathDestLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L148-L150","name":"MvPFunctor.M.corec","line":148,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corec","doc":"Corecursor for M-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corec\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L143-L146","name":"MvPFunctor.M.corec'","line":143,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corec'","doc":"Corecursor for M-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corec'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₀</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₁</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">(<span class=\"fn\">g₀</span> <span class=\"fn\">b</span>)</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₂</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">(<span class=\"fn\">g₀</span> <span class=\"fn\">b</span>)</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L116-L141","name":"MvPFunctor.M.corecContents","line":116,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corecContents","doc":"Using corecursion, construct the contents of an M-type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corecContents\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corecContents</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₀</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₁</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">(<span class=\"fn\">g₀</span> <span class=\"fn\">b</span>)</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₂</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">(<span class=\"fn\">g₀</span> <span class=\"fn\">b</span>)</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corecShape\">corecShape</a> <span class=\"fn\">P</span> <span class=\"fn\">g₀</span> <span class=\"fn\">g₂</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L113-L114","name":"MvPFunctor.castLastB","line":113,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.castLastB","doc":"Proof of type equality as a function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.castLastB\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">castLastB</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L110-L111","name":"MvPFunctor.castDropB","line":110,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.castDropB","doc":"Proof of type equality as an arrow "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.castDropB\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">castDropB</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L104-L108","name":"MvPFunctor.M.corecShape","line":104,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corecShape","doc":"construct through corecursion the shape of an M-type\nwithout its contents "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.corecShape\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corecShape</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₀</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₂</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">(<span class=\"fn\">g₀</span> <span class=\"fn\">b</span>)</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L100-L102","name":"MvPFunctor.inhabitedM","line":100,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.inhabitedM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.inhabitedM\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">inhabitedM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L98-L98","name":"MvPFunctor.mvfunctorM","line":98,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.mvfunctorM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.mvfunctorM\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">mvfunctorM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">M</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L94-L96","name":"MvPFunctor.M","line":94,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M","doc":"`n`-ary M-type for `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L86-L92","name":"MvPFunctor.mp","line":86,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.mp","doc":"Polynomial functor of the M-type of `P`. `A` is a data-less\npossibly infinite tree whereas, for a given `a : A`, `B a` is a valid\npath in tree `a` so that `mp α` is made of a tree and a function\nfrom its valid paths to the values it contains "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.mp\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">mp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L75-L84","name":"MvPFunctor.M.Path.inhabited","line":75,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path.inhabited\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Path</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">head</a></span> <span class=\"fn\">i</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L67-L73","name":"MvPFunctor.M.Path.child","line":67,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path.child","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path.child\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Path</span>.<span class=\"name\">child</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L61-L66","name":"MvPFunctor.M.Path.root","line":61,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path.root","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path.root\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Path</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\">Path</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/M.lean#L59-L73","name":"MvPFunctor.M.Path","line":59,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path","doc":"A path from the root of a tree to one of its node "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.Path\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Path</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span></span></div></div>"}]}