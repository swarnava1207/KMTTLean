{"name":"Mathlib.Tactic.DeriveEncodable","instances":[{"typeNames":["_private.Mathlib.Tactic.DeriveEncodable.0.Mathlib.Deriving.Encodable.S"],"name":"Mathlib.Deriving.Encodable.instEncodableS","className":"Encodable"}],"imports":["Init","Lean.Meta.Transform","Lean.Meta.Inductive","Lean.Elab.Deriving.Basic","Lean.Elab.Deriving.Util","Mathlib.Logic.Encodable.Basic","Mathlib.Data.Nat.Pairing"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveEncodable.lean#L340-L360","name":"Mathlib.Deriving.Encodable.mkEncodableInstance","line":340,"kind":"def","docLink":"./Mathlib/Tactic/DeriveEncodable.html#Mathlib.Deriving.Encodable.mkEncodableInstance","doc":"The deriving handler for the `Encodable` class.\nHandles non-nested non-reflexive inductive types.\nThey can be mutual too — in that case, there is an optimization to re-use all the generated\nfunctions and proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveEncodable.html#Mathlib.Deriving.Encodable.mkEncodableInstance\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Encodable</span>.<span class=\"name\">mkEncodableInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveEncodable.lean#L129-L129","name":"Mathlib.Deriving.Encodable.instEncodableS","line":129,"kind":"instance","docLink":"./Mathlib/Tactic/DeriveEncodable.html#Mathlib.Deriving.Encodable.instEncodableS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveEncodable.html#Mathlib.Deriving.Encodable.instEncodableS\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Encodable</span>.<span class=\"name\">instEncodableS</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <a href=\"./Mathlib/Tactic/DeriveEncodable.html#_private.Mathlib.Tactic.DeriveEncodable.0.Mathlib.Deriving.Encodable.S\">Mathlib.Deriving.Encodable.S✝</a></span></div></div>"}]}