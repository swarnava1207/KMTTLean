{"name":"Mathlib.Tactic.GCongr.Core","instances":[{"typeNames":["Mathlib.Tactic.GCongr.GCongrLemma"],"name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.GCongr.GCongrLemma"],"name":"Mathlib.Tactic.GCongr.instReprGCongrLemma","className":"Repr"}],"imports":["Init","Lean","Batteries.Lean.Except","Batteries.Tactic.Exact","Mathlib.Tactic.Core","Mathlib.Tactic.GCongr.ForwardAttr","Mathlib.Order.Defs.PartialOrder"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L488-L510","name":"Mathlib.Tactic.GCongr.«tacticRel[_]»","line":488,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.«tacticRel[_]»","doc":"The `rel` tactic applies \"generalized congruence\" rules to solve a relational goal by\n\"substitution\".  For example,\n```\nexample {a b x c d : ℝ} (h1 : a ≤ b) (h2 : c ≤ d) :\n    x ^ 2 * a + c ≤ x ^ 2 * b + d := by\n  rel [h1, h2]\n```\nIn this example we \"substitute\" the hypotheses `a ≤ b` and `c ≤ d` into the LHS `x ^ 2 * a + c` of\nthe goal and obtain the RHS `x ^ 2 * b + d`, thus proving the goal.\n\nThe \"generalized congruence\" rules used are the library lemmas which have been tagged with the\nattribute `@[gcongr]`.  For example, the first example constructs the proof term\n```\nadd_le_add (mul_le_mul_of_nonneg_left h1 (pow_bit0_nonneg x 1)) h2\n```\nusing the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.  If there are\nno applicable generalized congruence lemmas, the tactic fails.\n\nThe tactic attempts to discharge side goals to these \"generalized congruence\" lemmas (such as the\nside goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic\n`gcongr_discharger`, which wraps `positivity` but can also be extended. If the side goals cannot\nbe discharged in this way, the tactic fails. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.«tacticRel[_]»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">«tacticRel[_]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L434-L486","name":"Mathlib.Tactic.GCongr.tacticGcongr__With__","line":434,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr__With__","doc":"The `gcongr` tactic applies \"generalized congruence\" rules, reducing a relational goal\nbetween a LHS and RHS matching the same pattern to relational subgoals between the differing\ninputs to the pattern.  For example,\n```\nexample {a b x c d : ℝ} (h1 : a + 1 ≤ b + 1) (h2 : c + 2 ≤ d + 2) :\n    x ^ 2 * a + c ≤ x ^ 2 * b + d := by\n  gcongr\n  · linarith\n  · linarith\n```\nThis example has the goal of proving the relation `≤` between a LHS and RHS both of the pattern\n```\nx ^ 2 * ?_ + ?_\n```\n(with inputs `a`, `c` on the left and `b`, `d` on the right); after the use of\n`gcongr`, we have the simpler goals `a ≤ b` and `c ≤ d`.\n\nA pattern can be provided explicitly; this is useful if a non-maximal match is desired:\n```\nexample {a b c d x : ℝ} (h : a + c + 1 ≤ b + d + 1) :\n    x ^ 2 * (a + c) + 5 ≤ x ^ 2 * (b + d) + 5 := by\n  gcongr x ^ 2 * ?_ + 5\n  linarith\n```\n\nThe \"generalized congruence\" rules used are the library lemmas which have been tagged with the\nattribute `@[gcongr]`.  For example, the first example constructs the proof term\n```\nadd_le_add (mul_le_mul_of_nonneg_left _ (pow_bit0_nonneg x 1)) _\n```\nusing the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.\n\nThe tactic attempts to discharge side goals to these \"generalized congruence\" lemmas (such as the\nside goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic\n`gcongr_discharger`, which wraps `positivity` but can also be extended. Side goals not discharged\nin this way are left for the user. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr__With__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">tacticGcongr__With__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L286-L432","name":"Lean.MVarId.gcongr","line":286,"kind":"opaque","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongr","doc":"The core of the `gcongr` tactic.  Parse a goal into the form `(f _ ... _) ∼ (f _ ... _)`,\nlook up any relevant @[gcongr] lemmas, try to apply them, recursively run the tactic itself on\n\"main\" goals which are generated, and run the discharger on side goals which are generated. If there\nis a user-provided template, first check that the template asks us to descend this far into the\nmatch. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongr\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">gcongr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">template</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainGoalDischarger</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span> := <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger\">Mathlib.Tactic.GCongr.gcongrForwardDischarger</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sideGoalDischarger</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span> := <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger\">Mathlib.Tactic.GCongr.gcongrDischarger</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L272-L284","name":"Mathlib.Tactic.GCongr.gcongrForwardDischarger","line":272,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger","doc":"This is used as the default main-goal discharger,\nconsisting of running `Lean.MVarId.gcongrForward` (trying a term together with limited\nforward-reasoning on that term) on each nontrivial hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrForwardDischarger</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L254-L270","name":"Lean.MVarId.gcongrForward","line":254,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongrForward","doc":"Attempt to resolve an (implicitly) relational goal by one of a provided list of hypotheses,\neither with such a hypothesis directly or by a limited palette of relational forward-reasoning from\nthese hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongrForward\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">gcongrForward</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L251-L252","name":"Mathlib.Tactic.GCongr.exact","line":251,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exact\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L247-L249","name":"Mathlib.Tactic.GCongr.symmExact","line":247,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.symmExact","doc":"See if the term is `a ∼ b` with `∼` symmetric and the goal is `b ∼ a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.symmExact\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">symmExact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L243-L245","name":"Mathlib.Tactic.GCongr.exactLeOfLt","line":243,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactLeOfLt","doc":"See if the term is `a < b` and the goal is `a ≤ b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactLeOfLt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">exactLeOfLt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L236-L241","name":"Mathlib.Tactic.GCongr.exactRefl","line":236,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactRefl","doc":"See if the term is `a = b` and the goal is `a ∼ b` or `b ∼ a`, with `∼` reflexive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactRefl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">exactRefl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L224-L232","name":"Mathlib.Tactic.GCongr.gcongrDischarger","line":224,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger","doc":"This is used as the default side-goal discharger,\nit calls the `gcongr_discharger` extensible tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrDischarger</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L222-L222","name":"Mathlib.Tactic.GCongr.tacticGcongr_discharger","line":222,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr_discharger","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr_discharger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">tacticGcongr_discharger</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L136-L142","name":"Mathlib.Tactic.GCongr.gcongrExt","line":136,"kind":"opaque","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrExt","doc":"Environment extension for \"generalized congruence\" (`gcongr`) lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> ((<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)\n  <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L134-L134","name":"Mathlib.Tactic.GCongr.instReprGCongrLemma","line":134,"kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instReprGCongrLemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instReprGCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instReprGCongrLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L134-L134","name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","line":134,"kind":"instance","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instInhabitedGCongrLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L133-L133","name":"Mathlib.Tactic.GCongr.GCongrLemma.varyingArgs","line":133,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.varyingArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.varyingArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">varyingArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L132-L132","name":"Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals","line":132,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">mainSubgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L131-L131","name":"Mathlib.Tactic.GCongr.GCongrLemma.declName","line":131,"kind":"def","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.declName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.declName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L130-L130","name":"Mathlib.Tactic.GCongr.GCongrLemma.mk","line":130,"kind":"ctor","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainSubgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varyingArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/GCongr/Core.lean#L129-L134","name":"Mathlib.Tactic.GCongr.GCongrLemma","line":129,"kind":"structure","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma","doc":"Structure recording the data for a \"generalized congruence\" (`gcongr`) lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}