{"name":"Mathlib.Tactic.Linter.DeprecatedSyntaxLinter","instances":[],"imports":["Init","Lean.Elab.Command","Mathlib.Tactic.Linter.Header"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L86-L105","name":"Mathlib.Linter.Style.deprecatedSyntaxLinter","line":86,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.deprecatedSyntaxLinter","doc":"The deprecated syntax linter flags usages of deprecated syntax and suggests\nreplacement syntax. For each individual case, linting can be turned on or off separately.\n\n* `refine'`, superseded by `refine` and `apply` (controlled by `linter.style.refine`)\n* `cases'`, superseded by `obtain`, `rcases` and `cases` (controlled by `linter.style.cases`)\n* `admit`, superseded by `sorry` (controlled by `linter.style.admit`)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.deprecatedSyntaxLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">deprecatedSyntaxLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L65-L84","name":"Mathlib.Linter.Style.getDeprecatedSyntax","line":65,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.getDeprecatedSyntax","doc":"`getDeprecatedSyntax t` returns all usages of deprecated syntax in the input syntax `t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.getDeprecatedSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">getDeprecatedSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L58-L63","name":"Mathlib.Linter.Style.linter.style.admit","line":58,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.admit","doc":"The option `linter.style.admit` of the deprecated syntax linter flags usages of\nthe `admit` tactic, which is a synonym for the much more common `sorry`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.admit\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">admit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L48-L56","name":"Mathlib.Linter.Style.linter.style.cases","line":48,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.cases","doc":"The option `linter.style.cases` of the deprecated syntax linter flags usages of\nthe `cases'` tactic, which is a backward-compatible version of Lean 3's `cases` tactic.\nUnlike `obtain`, `rcases` and Lean 4's `cases`, variables introduced by `cases'` are not\nrequired to be separated by case, which hinders readability.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.cases\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L35-L46","name":"Mathlib.Linter.Style.linter.style.refine","line":35,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.refine","doc":"The option `linter.style.refine` of the deprecated syntax linter flags usages of\nthe `refine'` tactic.\n\nThe tactics `refine`, `apply` and `refine'` are similar, but they handle metavariables slightly\ndifferently. This means that they are not completely interchangeable, nor can one completely\nreplace another. However, `refine` and `apply` are more readable and (heuristically) tend to be\nmore efficient on average.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.refine\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">refine</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}