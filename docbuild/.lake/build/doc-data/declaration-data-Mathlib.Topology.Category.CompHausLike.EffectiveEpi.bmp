{"name":"Mathlib.Topology.Category.CompHausLike.EffectiveEpi","instances":[],"imports":["Init","Mathlib.CategoryTheory.Sites.Coherent.Comparison","Mathlib.Topology.Category.CompHausLike.Limits"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/CompHausLike/EffectiveEpi.lean#L73-L77","name":"CompHausLike.precoherent","line":73,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/EffectiveEpi.html#CompHausLike.precoherent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/EffectiveEpi.html#CompHausLike.precoherent\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">precoherent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/CompHausLike/EffectiveEpi.lean#L62-L71","name":"CompHausLike.preregular","line":62,"kind":"theorem","docLink":"./Mathlib/Topology/Category/CompHausLike/EffectiveEpi.html#CompHausLike.preregular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/EffectiveEpi.html#CompHausLike.preregular\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">preregular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.Preregular\">CategoryTheory.Preregular</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/CompHausLike/EffectiveEpi.lean#L28-L60","name":"CompHausLike.effectiveEpiStruct","line":28,"kind":"def","docLink":"./Mathlib/Topology/Category/CompHausLike/EffectiveEpi.html#CompHausLike.effectiveEpiStruct","doc":"If `π` is a surjective morphism in `CompHausLike P`, then it is an effective epi.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/CompHausLike/EffectiveEpi.html#CompHausLike.effectiveEpiStruct\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">effectiveEpiStruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B </span><span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hπ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">π</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpiStruct\">CategoryTheory.EffectiveEpiStruct</a> <span class=\"fn\">π</span></span></div></div>"}]}