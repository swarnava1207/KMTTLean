{"name":"Mathlib.AlgebraicTopology.SimplicialSet.StrictSegal","instances":[{"typeNames":["CategoryTheory.nerve"],"name":"CategoryTheory.Nerve.isStrictSegal","className":"SSet.IsStrictSegal"}],"imports":["Init","Mathlib.AlgebraicTopology.SimplicialSet.Nerve","Mathlib.AlgebraicTopology.SimplicialSet.Path"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L421-L422","name":"CategoryTheory.Nerve.isStrictSegal","line":421,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#CategoryTheory.Nerve.isStrictSegal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#CategoryTheory.Nerve.isStrictSegal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Nerve</span>.<span class=\"name\">isStrictSegal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerve\">nerve</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal\">IsStrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L397-L419","name":"CategoryTheory.Nerve.strictSegal","line":397,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#CategoryTheory.Nerve.strictSegal","doc":"Simplices in the nerve of categories are uniquely determined by their spine.\nIndeed, this property describes the essential image of the nerve functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#CategoryTheory.Nerve.strictSegal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Nerve</span>.<span class=\"name\">strictSegal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerve\">nerve</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L378-L386","name":"SSet.StrictSegal.spine_δ_arrow_eq","line":378,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_eq","doc":"If we take the path along the spine of a face of a `spineToSimplex`, the\narrows not contained in the original path can be recovered as the diagonal edge\nof the `spineToSimplex` that \"composes\" arrows `i` and `i + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_eq\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToDiagonal\">spineToDiagonal</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.interval\">interval</a></span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L369-L376","name":"SSet.StrictSegal.spine_δ_arrow_gt","line":369,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_gt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nan arrow `i` with `i + 1 > j` can be identified with arrow `i + 1` in the\noriginal path. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_gt\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L360-L367","name":"SSet.StrictSegal.spine_δ_arrow_lt","line":360,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_lt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nthe common arrows will agree with those of the original path `f`. In particular,\nan arrow `i` with `i + 1 < j` can be identified with the same arrow in `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_lt\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L346-L356","name":"SSet.StrictSegal.spine_δ_vertex_ge","line":346,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_vertex_ge","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\na vertex `i` with `i ≥ j` can be identified with vertex `i + 1` in the original\npath. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_vertex_ge\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_vertex_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L333-L344","name":"SSet.StrictSegal.spine_δ_vertex_lt","line":333,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_vertex_lt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nthe common vertices will agree with those of the original path `f`. In particular,\na vertex `i` with `i < j` can be identified with the same vertex in `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_vertex_lt\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_vertex_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L319-L328","name":"SSet.StrictSegal.spineToSimplex_map","line":319,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_map","doc":"For any `σ : X ⟶ Y` between `StrictSegal` simplicial sets, `spineToSimplex`\ncommutes with `Path.map`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_map\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sy</span> : <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sy</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.map\">map</a></span> <span class=\"fn\">σ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L310-L315","name":"SSet.StrictSegal.spineToSimplex_edge","line":310,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_edge\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j </span><span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjl</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.intervalEdge\">SimplexCategory.intervalEdge</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToDiagonal\">spineToDiagonal</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.interval\">interval</a></span> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L301-L308","name":"SSet.StrictSegal.spineToSimplex_interval","line":301,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_interval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_interval\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_interval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j </span><span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjl</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.subinterval\">SimplexCategory.subinterval</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.interval\">interval</a></span> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L292-L295","name":"SSet.StrictSegal.spineToDiagonal","line":292,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToDiagonal","doc":"In the presence of the strict Segal condition, a path of length `n` can be\n\"composed\" by taking the diagonal edge of the resulting `n`-simplex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToDiagonal\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToDiagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">1</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L287-L290","name":"SSet.StrictSegal.spineToSimplex_arrow","line":287,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_arrow\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.mkOfSucc\">SimplexCategory.mkOfSucc</a> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L281-L285","name":"SSet.StrictSegal.spineToSimplex_vertex","line":281,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_vertex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_vertex\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_vertex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.const\">const</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L276-L279","name":"SSet.StrictSegal.isStrictSegal","line":276,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.isStrictSegal","doc":"The unique existence of an inverse to `spine X n` forall `n : ℕ` implies\nthe mere existence of such an inverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.isStrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isStrictSegal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal\">IsStrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L273-L274","name":"SSet.StrictSegal.spineInjective","line":273,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineInjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineInjective\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineInjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineEquiv\">spineEquiv</a></span> <span class=\"fn\">n</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L263-L269","name":"SSet.StrictSegal.spineEquiv","line":263,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineEquiv","doc":"The fields of `StrictSegal` define an equivalence between `X _⦋n⦌`\nand `Path X n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineEquiv\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L258-L261","name":"SSet.StrictSegal.spineToSimplex_spine_apply","line":258,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_spine_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_spine_apply\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_spine_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Δ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">Δ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Δ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L253-L256","name":"SSet.StrictSegal.spine_spineToSimplex_apply","line":253,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_spineToSimplex_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_spineToSimplex_apply\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_spineToSimplex_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L246-L251","name":"SSet.StrictSegal.truncation","line":246,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.truncation","doc":"A `StrictSegal` structure on a simplicial set `X` restricts to a\n`Truncated.StrictSegal` structure on the `n + 1`-truncation of `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.truncation\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">truncation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.truncation\">SSet.truncation</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L234-L242","name":"SSet.StrictSegal.ofIsStrictSegal","line":234,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.ofIsStrictSegal","doc":"Given `IsStrictSegal X`, a choice of inverse to `spine X n` for all `n : ℕ`\ndetermines an inhabitant of `StrictSegal X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.ofIsStrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">ofIsStrictSegal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal\">IsStrictSegal</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L230-L230","name":"SSet.IsStrictSegal.segal","line":230,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal.segal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal.segal\"><span class=\"name\">SSet</span>.<span class=\"name\">IsStrictSegal</span>.<span class=\"name\">segal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal\">IsStrictSegal</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L229-L229","name":"SSet.IsStrictSegal.mk","line":229,"kind":"ctor","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal.mk\"><span class=\"name\">SSet</span>.<span class=\"name\">IsStrictSegal</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">segal</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal\">IsStrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L227-L230","name":"SSet.IsStrictSegal","line":227,"kind":"class","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal","doc":"For `X` a simplicial set, `IsStrictSegal X` asserts the mere existence of\nan inverse to `spine X n` for all `n : ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">IsStrictSegal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L225-L225","name":"SSet.StrictSegal.spineToSimplex_spine","line":225,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_spine","doc":"`spineToSimplex` is a left inverse to `spine X n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_spine\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_spine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L223-L223","name":"SSet.StrictSegal.spine_spineToSimplex","line":223,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_spineToSimplex","doc":"`spineToSimplex` is a right inverse to `spine X n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_spineToSimplex\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_spineToSimplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L221-L221","name":"SSet.StrictSegal.spineToSimplex","line":221,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex","doc":"The inverse to `spine X n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L219-L219","name":"SSet.StrictSegal.mk","line":219,"kind":"ctor","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.mk\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spineToSimplex</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spine_spineToSimplex</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">spineToSimplex</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spineToSimplex_spine</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">spineToSimplex</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L217-L225","name":"SSet.StrictSegal","line":217,"kind":"structure","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal","doc":"A simplicial set `X` satisfies the strict Segal condition if its simplices\nare uniquely determined by their spine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L205-L210","name":"SSet.Truncated.StrictSegal.spine_δ_arrow_eq","line":205,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_arrow_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_arrow_eq\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.arrow\">arrow</a></span>\n    <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToDiagonal\">spineToDiagonal</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.interval\">interval</a></span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L191-L198","name":"SSet.Truncated.StrictSegal.spine_δ_arrow_gt","line":191,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_arrow_gt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nan arrow `i` with `i + 1 > j` can be identified with arrow `i + 1` in the\noriginal path. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_arrow_gt\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.arrow\">arrow</a></span>\n    <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.arrow\">arrow</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L182-L189","name":"SSet.Truncated.StrictSegal.spine_δ_arrow_lt","line":182,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_arrow_lt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nthe common arrows will agree with those of the original path `f`. In particular,\nan arrow `i` with `i + 1 < j` can be identified with the same arrow in `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_arrow_lt\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.arrow\">arrow</a></span>\n    <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.arrow\">arrow</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L168-L178","name":"SSet.Truncated.StrictSegal.spine_δ_vertex_ge","line":168,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_vertex_ge","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\na vertex `i` with `j ≤ i` can be identified with vertex `i + 1` in the original\npath. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_vertex_ge\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_vertex_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.vertex\">vertex</a></span>\n    <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.vertex\">vertex</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L156-L166","name":"SSet.Truncated.StrictSegal.spine_δ_vertex_lt","line":156,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_vertex_lt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nthe common vertices will agree with those of the original path `f`. In particular,\na vertex `i` with `i < j` can be identified with the same vertex in `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_δ_vertex_lt\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_vertex_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.δ\">SimplexCategory.δ</a> <span class=\"fn\">j</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.vertex\">vertex</a></span>\n    <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.vertex\">vertex</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L139-L149","name":"SSet.Truncated.StrictSegal.spineToSimplex_map","line":139,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_map","doc":"For any `σ : X ⟶ Y` between `n + 1`-truncated `StrictSegal` simplicial sets,\n`spineToSimplex` commutes with `Path.map`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_map\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sy</span> : <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sy</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.map\">map</a></span> <span class=\"fn\">σ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L130-L135","name":"SSet.Truncated.StrictSegal.spineToSimplex_edge","line":130,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_edge\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j </span><span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjl</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.intervalEdge\">SimplexCategory.intervalEdge</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToDiagonal\">spineToDiagonal</a></span> <span class=\"fn\">l</span> <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.interval\">interval</a></span> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L120-L128","name":"SSet.Truncated.StrictSegal.spineToSimplex_interval","line":120,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_interval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_interval\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_interval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j </span><span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjl</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.subinterval\">SimplexCategory.subinterval</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">l</span> <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.interval\">interval</a></span> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L115-L118","name":"SSet.Truncated.StrictSegal.spineToSimplex_arrow","line":115,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_arrow\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.mkOfSucc\">SimplexCategory.mkOfSucc</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L109-L113","name":"SSet.Truncated.StrictSegal.spineToSimplex_vertex","line":109,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_vertex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_vertex\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_vertex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.Hom.tr\">SimplexCategory.Truncated.Hom.tr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.const\">const</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path.vertex\">vertex</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L102-L105","name":"SSet.Truncated.StrictSegal.isStrictSegal","line":102,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.isStrictSegal","doc":"The unique existence of an inverse to `spine X m` for all `m ≤ n + 1`\nimplies the mere existence of such an inverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.isStrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isStrictSegal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal\">IsStrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L95-L98","name":"SSet.Truncated.StrictSegal.spineToDiagonal","line":95,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToDiagonal","doc":"In the presence of the strict Segal condition, a path of length `m` can be\n\"composed\" by taking the diagonal edge of the resulting `m`-simplex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToDiagonal\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToDiagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> := by omega)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> }</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L92-L93","name":"SSet.Truncated.StrictSegal.spineInjective","line":92,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineInjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineInjective\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineInjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> := by omega)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineEquiv\">spineEquiv</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L84-L90","name":"SSet.Truncated.StrictSegal.spineEquiv","line":84,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineEquiv","doc":"The fields of `StrictSegal` define an equivalence between `X _⦋m⦌ₙ₊₁`\nand `Path X m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineEquiv\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> := by omega)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L75-L78","name":"SSet.Truncated.StrictSegal.spineToSimplex_spine_apply","line":75,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_spine_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_spine_apply\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_spine_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Δ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span> <span class=\"fn\">Δ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Δ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L70-L73","name":"SSet.Truncated.StrictSegal.spine_spineToSimplex_apply","line":70,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_spineToSimplex_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_spineToSimplex_apply\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_spineToSimplex_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">sx</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">m</span> <span class=\"fn\">h</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L56-L64","name":"SSet.Truncated.StrictSegal.ofIsStrictSegal","line":56,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.ofIsStrictSegal","doc":"Given `IsStrictSegal X`, a choice of inverse to `spine X m` for all\n`m ≤ n + 1` determines an inhabitant of `StrictSegal X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.ofIsStrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">ofIsStrictSegal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal\">IsStrictSegal</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L52-L52","name":"SSet.Truncated.IsStrictSegal.segal","line":52,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal.segal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal.segal\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">IsStrictSegal</span>.<span class=\"name\">segal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal\">IsStrictSegal</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> := by omega)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L51-L51","name":"SSet.Truncated.IsStrictSegal.mk","line":51,"kind":"ctor","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal.mk\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">IsStrictSegal</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">segal</span> : <span class=\"fn\">∀ (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#_auto._@.Mathlib.AlgebraicTopology.SimplicialSet.StrictSegal._hyg.182\">_auto✝</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal\">IsStrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L49-L52","name":"SSet.Truncated.IsStrictSegal","line":49,"kind":"class","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal","doc":"For an `n + 1`-truncated simplicial set `X`, `IsStrictSegal X` asserts the\nmere existence of an inverse to `spine X m` for all `m ≤ n + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.IsStrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">IsStrictSegal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L46-L46","name":"SSet.Truncated.StrictSegal.spineToSimplex_spine","line":46,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_spine","doc":"`spineToSimplex` is a left inverse to `spine X m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex_spine\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_spine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L43-L43","name":"SSet.Truncated.StrictSegal.spine_spineToSimplex","line":43,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_spineToSimplex","doc":"`spineToSimplex` is a right inverse to `spine X m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spine_spineToSimplex\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_spineToSimplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\">spineToSimplex</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L41-L41","name":"SSet.Truncated.StrictSegal.spineToSimplex","line":41,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex","doc":"The inverse to `spine X m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.spineToSimplex\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> := by omega)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L39-L39","name":"SSet.Truncated.StrictSegal.mk","line":39,"kind":"ctor","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal.mk\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spineToSimplex</span> :\n  <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) →\n    <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#_auto._@.Mathlib.AlgebraicTopology.SimplicialSet.StrictSegal._hyg.39\">_auto✝</a></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.Path\">Path</a></span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">m</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spine_spineToSimplex</span> : <span class=\"fn\">∀ (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">spineToSimplex</span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spineToSimplex_spine</span> : <span class=\"fn\">∀ (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>), <span class=\"fn\"><span class=\"fn\">spineToSimplex</span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Truncated.spine\">spine</a></span> <span class=\"fn\">m</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\">StrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L37-L47","name":"SSet.Truncated.StrictSegal","line":37,"kind":"structure","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal","doc":"An `n + 1`-truncated simplicial set satisfies the strict Segal condition if\nits `m`-simplices are uniquely determined by their spine for all `m ≤ n + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.Truncated.StrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">StrictSegal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">Truncated</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}