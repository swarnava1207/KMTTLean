{"name":"Mathlib.Data.Int.Bitwise","instances":[{"typeNames":["Int"],"name":"Int.instShiftLeft_mathlib","className":"ShiftLeft"},{"typeNames":["Int"],"name":"Int.instShiftRight_mathlib","className":"ShiftRight"}],"imports":["Init","Mathlib.Algebra.Ring.Int.Defs","Mathlib.Data.Nat.Bitwise","Mathlib.Data.Nat.Size","Batteries.Data.Int"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L419-L422","name":"Int.zero_shiftRight'","line":419,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.zero_shiftRight'","doc":"Compare with `Int.zero_shiftRight`, which has `n : ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.zero_shiftRight'\"><span class=\"name\">Int</span>.<span class=\"name\">zero_shiftRight'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L414-L417","name":"Int.zero_shiftLeft","line":414,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.zero_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.zero_shiftLeft\"><span class=\"name\">Int</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L411-L412","name":"Int.one_shiftLeft","line":411,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.one_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.one_shiftLeft\"><span class=\"name\">Int</span>.<span class=\"name\">one_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L407-L409","name":"Int.shiftLeft_eq_mul_pow","line":407,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_eq_mul_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_eq_mul_pow\"><span class=\"name\">Int</span>.<span class=\"name\">shiftLeft_eq_mul_pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L404-L405","name":"Int.shiftLeft_sub","line":404,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_sub\"><span class=\"name\">Int</span>.<span class=\"name\">shiftLeft_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L381-L402","name":"Int.shiftLeft_add","line":381,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_add\"><span class=\"name\">Int</span>.<span class=\"name\">shiftLeft_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L370-L377","name":"Int.shiftRight_add'","line":370,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_add'","doc":"Compare with `Int.shiftRight_add`, which doesn't have the coercions `ℕ → ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_add'\"><span class=\"name\">Int</span>.<span class=\"name\">shiftRight_add'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L367-L368","name":"Int.shiftRight_negSucc","line":367,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">shiftRight_negSucc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L363-L365","name":"Int.shiftLeft_negSucc","line":363,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">shiftLeft_negSucc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.shiftLeft'\">Nat.shiftLeft'</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L361-L361","name":"Int.shiftRight_coe_nat","line":361,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_coe_nat","doc":"**Alias** of `Int.shiftRight_natCast`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_coe_nat\"><span class=\"name\">Int</span>.<span class=\"name\">shiftRight_coe_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L360-L360","name":"Int.shiftLeft_coe_nat","line":360,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_coe_nat","doc":"**Alias** of `Int.shiftLeft_natCast`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_coe_nat\"><span class=\"name\">Int</span>.<span class=\"name\">shiftLeft_coe_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L357-L358","name":"Int.shiftRight_natCast","line":357,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_natCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_natCast\"><span class=\"name\">Int</span>.<span class=\"name\">shiftRight_natCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L353-L355","name":"Int.shiftLeft_natCast","line":353,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_natCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_natCast\"><span class=\"name\">Int</span>.<span class=\"name\">shiftLeft_natCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L350-L351","name":"Int.shiftRight_neg","line":350,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftRight_neg\"><span class=\"name\">Int</span>.<span class=\"name\">shiftRight_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L346-L348","name":"Int.shiftLeft_neg","line":346,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.shiftLeft_neg\"><span class=\"name\">Int</span>.<span class=\"name\">shiftLeft_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L341-L344","name":"Int.testBit_lnot","line":341,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.testBit_lnot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.testBit_lnot\"><span class=\"name\">Int</span>.<span class=\"name\">testBit_lnot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.lnot\">lnot</a></span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L337-L339","name":"Int.testBit_lxor","line":337,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.testBit_lxor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.testBit_lxor\"><span class=\"name\">Int</span>.<span class=\"name\">testBit_lxor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.xor\">xor</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L333-L335","name":"Int.testBit_ldiff","line":333,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.testBit_ldiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.testBit_ldiff\"><span class=\"name\">Int</span>.<span class=\"name\">testBit_ldiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.ldiff\">ldiff</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L329-L331","name":"Int.testBit_land","line":329,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.testBit_land","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.testBit_land\"><span class=\"name\">Int</span>.<span class=\"name\">testBit_land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.land\">land</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L325-L327","name":"Int.testBit_lor","line":325,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.testBit_lor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.testBit_lor\"><span class=\"name\">Int</span>.<span class=\"name\">testBit_lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.lor\">lor</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L316-L323","name":"Int.testBit_bitwise","line":316,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.testBit_bitwise","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.testBit_bitwise\"><span class=\"name\">Int</span>.<span class=\"name\">testBit_bitwise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise\">bitwise</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L311-L314","name":"Int.lnot_bit","line":311,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.lnot_bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.lnot_bit\"><span class=\"name\">Int</span>.<span class=\"name\">lnot_bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.lnot\">lnot</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>) <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.lnot\">lnot</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L307-L309","name":"Int.lxor_bit","line":307,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.lxor_bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.lxor_bit\"><span class=\"name\">Int</span>.<span class=\"name\">lxor_bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.xor\">xor</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> (<span class=\"fn\">a</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">b</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.xor\">xor</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L303-L305","name":"Int.ldiff_bit","line":303,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.ldiff_bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.ldiff_bit\"><span class=\"name\">Int</span>.<span class=\"name\">ldiff_bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.ldiff\">ldiff</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.ldiff\">ldiff</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L299-L301","name":"Int.land_bit","line":299,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.land_bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.land_bit\"><span class=\"name\">Int</span>.<span class=\"name\">land_bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.land\">land</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">b</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.land\">land</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L295-L297","name":"Int.lor_bit","line":295,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.lor_bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.lor_bit\"><span class=\"name\">Int</span>.<span class=\"name\">lor_bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.lor\">lor</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">b</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.lor\">lor</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L284-L293","name":"Int.bitwise_bit","line":284,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_bit\"><span class=\"name\">Int</span>.<span class=\"name\">bitwise_bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise\">bitwise</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise\">bitwise</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L267-L282","name":"Int.bitwise_xor","line":267,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_xor\"><span class=\"name\">Int</span>.<span class=\"name\">bitwise_xor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise\">bitwise</a> <a href=\"./Init/Data/Bool.html#Bool.xor\">xor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Int/Bitwise.html#Int.xor\">Int.xor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L249-L264","name":"Int.bitwise_diff","line":249,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_diff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_diff\"><span class=\"name\">Int</span>.<span class=\"name\">bitwise_diff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise\">bitwise</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Int/Bitwise.html#Int.ldiff\">ldiff</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L234-L246","name":"Int.bitwise_and","line":234,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_and\"><span class=\"name\">Int</span>.<span class=\"name\">bitwise_and</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise\">bitwise</a> <a href=\"./Init/Prelude.html#Bool.and\">and</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Int/Bitwise.html#Int.land\">land</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L217-L231","name":"Int.bitwise_or","line":217,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise_or\"><span class=\"name\">Int</span>.<span class=\"name\">bitwise_or</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise\">bitwise</a> <a href=\"./Init/Prelude.html#Bool.or\">or</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Int/Bitwise.html#Int.lor\">lor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L204-L210","name":"Int.testBit_bit_succ","line":204,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.testBit_bit_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.testBit_bit_succ\"><span class=\"name\">Int</span>.<span class=\"name\">testBit_bit_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L196-L202","name":"Int.testBit_bit_zero","line":196,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.testBit_bit_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.testBit_bit_zero\"><span class=\"name\">Int</span>.<span class=\"name\">testBit_bit_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/Int.html#Int.testBit\">testBit</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L191-L194","name":"Int.bodd_bit","line":191,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_bit\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L186-L189","name":"Int.bit_negSucc","line":186,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bit_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">bit_negSucc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/BinaryRec.html#Nat.bit\">Nat.bit</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>) <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L181-L184","name":"Int.bit_coe_nat","line":181,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bit_coe_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit_coe_nat\"><span class=\"name\">Int</span>.<span class=\"name\">bit_coe_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/BinaryRec.html#Nat.bit\">Nat.bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L177-L179","name":"Int.bit_zero","line":177,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bit_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit_zero\"><span class=\"name\">Int</span>.<span class=\"name\">bit_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L171-L175","name":"Int.bitCasesOn","line":171,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bitCasesOn","doc":"Defines a function from `ℤ` conditionally, if it is defined for odd and even integers separately\nusing `bit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitCasesOn\"><span class=\"name\">Int</span>.<span class=\"name\">bitCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./foundational_types.html\">Sort</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L168-L169","name":"Int.bit_decomp","line":168,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bit_decomp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit_decomp\"><span class=\"name\">Int</span>.<span class=\"name\">bit_decomp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.div2\">div2</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L163-L166","name":"Int.bit_val","line":163,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bit_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit_val\"><span class=\"name\">Int</span>.<span class=\"name\">bit_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L159-L161","name":"Int.div2_val","line":159,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.div2_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.div2_val\"><span class=\"name\">Int</span>.<span class=\"name\">div2_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.div2\">div2</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L147-L157","name":"Int.bodd_add_div2","line":147,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_add_div2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_add_div2\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_add_div2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span>)</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.div2\">div2</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L140-L145","name":"Int.bodd_mul","line":140,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_mul\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span>).<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L132-L138","name":"Int.bodd_add","line":132,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_add\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>).<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L128-L130","name":"Int.bodd_neg","line":128,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_neg\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>).<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L123-L126","name":"Int.bodd_negOfNat","line":123,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_negOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_negOfNat\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_negOfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Int/Basic.html#Int.negOfNat\">negOfNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.bodd\">bodd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L116-L121","name":"Int.bodd_subNatNat","line":116,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_subNatNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_subNatNat\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_subNatNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Int/Basic.html#Int.subNatNat\">subNatNat</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.bodd\">bodd</a></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.bodd\">bodd</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L112-L114","name":"Int.bodd_coe","line":112,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_coe\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.bodd\">bodd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L109-L110","name":"Int.bodd_two","line":109,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_two\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_two</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L105-L107","name":"Int.bodd_one","line":105,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_one\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L101-L103","name":"Int.bodd_zero","line":101,"kind":"theorem","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd_zero\"><span class=\"name\">Int</span>.<span class=\"name\">bodd_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\">bodd</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L94-L97","name":"Int.instShiftRight_mathlib","line":94,"kind":"instance","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.instShiftRight_mathlib","doc":"`m >>> n` produces an integer whose binary representation\nis obtained by right-shifting the binary representation of `m` by `n` places "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.instShiftRight_mathlib\"><span class=\"name\">Int</span>.<span class=\"name\">instShiftRight_mathlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L85-L92","name":"Int.instShiftLeft_mathlib","line":85,"kind":"instance","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.instShiftLeft_mathlib","doc":"`m <<< n` produces an integer whose binary representation\nis obtained by left-shifting the binary representation of `m` by `n` places "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.instShiftLeft_mathlib\"><span class=\"name\">Int</span>.<span class=\"name\">instShiftLeft_mathlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L78-L83","name":"Int.xor","line":78,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.xor","doc":"`xor` computes the bitwise `xor` of two natural numbers "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.xor\"><span class=\"name\">Int</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L69-L76","name":"Int.ldiff","line":69,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.ldiff","doc":"`ldiff a b` performs bitwise set difference. For each corresponding\npair of bits taken as booleans, say `aᵢ` and `bᵢ`, it applies the\nboolean operation `aᵢ ∧ bᵢ` to obtain the `iᵗʰ` bit of the result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.ldiff\"><span class=\"name\">Int</span>.<span class=\"name\">ldiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L62-L67","name":"Int.land","line":62,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.land","doc":"`land` takes two integers and returns their bitwise `and` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.land\"><span class=\"name\">Int</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L55-L60","name":"Int.lor","line":55,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.lor","doc":"`lor` takes two integers and returns their bitwise `or` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.lor\"><span class=\"name\">Int</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L50-L53","name":"Int.lnot","line":50,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.lnot","doc":"`lnot` flips all the bits in the binary representation of its input "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.lnot\"><span class=\"name\">Int</span>.<span class=\"name\">lnot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L42-L48","name":"Int.bitwise","line":42,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bitwise","doc":"`Int.bitwise` applies the function `f` to pairs of bits in the same position in\nthe binary representations of its inputs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bitwise\"><span class=\"name\">Int</span>.<span class=\"name\">bitwise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L38-L40","name":"Int.natBitwise","line":38,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.natBitwise","doc":"`Int.natBitwise` is an auxiliary definition for `Int.bitwise`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.natBitwise\"><span class=\"name\">Int</span>.<span class=\"name\">natBitwise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L33-L36","name":"Int.bit","line":33,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bit","doc":"`bit b` appends the digit `b` to the binary representation of\nits integer input. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bit\"><span class=\"name\">Int</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L28-L31","name":"Int.bodd","line":28,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.bodd","doc":"`bodd n` returns `true` if `n` is odd "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.bodd\"><span class=\"name\">Int</span>.<span class=\"name\">bodd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Int/Bitwise.lean#L23-L26","name":"Int.div2","line":23,"kind":"def","docLink":"./Mathlib/Data/Int/Bitwise.html#Int.div2","doc":"`div2 n = n/2` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/Bitwise.html#Int.div2\"><span class=\"name\">Int</span>.<span class=\"name\">div2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"}]}